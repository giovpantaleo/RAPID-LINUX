// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flexran.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "flexran.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flexran_messageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flexran_message> {
  public:
  const ::protocol::flex_hello* hello_msg_;
  const ::protocol::flex_echo_request* echo_request_msg_;
  const ::protocol::flex_echo_reply* echo_reply_msg_;
  const ::protocol::flex_stats_request* stats_request_msg_;
  const ::protocol::flex_stats_reply* stats_reply_msg_;
  const ::protocol::flex_sf_trigger* sf_trigger_msg_;
  const ::protocol::flex_ul_sr_info* ul_sr_info_msg_;
  const ::protocol::flex_enb_config_request* enb_config_request_msg_;
  const ::protocol::flex_enb_config_reply* enb_config_reply_msg_;
  const ::protocol::flex_ue_config_request* ue_config_request_msg_;
  const ::protocol::flex_ue_config_reply* ue_config_reply_msg_;
  const ::protocol::flex_lc_config_request* lc_config_request_msg_;
  const ::protocol::flex_lc_config_reply* lc_config_reply_msg_;
  const ::protocol::flex_dl_mac_config* dl_mac_config_msg_;
  const ::protocol::flex_ue_state_change* ue_state_change_msg_;
  const ::protocol::flex_control_delegation* control_delegation_msg_;
  const ::protocol::flex_agent_reconfiguration* agent_reconfiguration_msg_;
  const ::protocol::flex_rrc_triggering* rrc_triggering_;
  const ::protocol::flex_ul_mac_config* ul_mac_config_msg_;
  const ::protocol::flex_disconnect* disconnect_msg_;
  const ::protocol::flex_ho_command* ho_command_;
} _flexran_message_default_instance_;
class flex_helloDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_hello> {
} _flex_hello_default_instance_;
class flex_echo_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_echo_request> {
} _flex_echo_request_default_instance_;
class flex_echo_replyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_echo_reply> {
} _flex_echo_reply_default_instance_;
class flex_stats_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_stats_request> {
  public:
  const ::protocol::flex_complete_stats_request* complete_stats_request_;
  const ::protocol::flex_cell_stats_request* cell_stats_request_;
  const ::protocol::flex_ue_stats_request* ue_stats_request_;
} _flex_stats_request_default_instance_;
class flex_stats_replyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_stats_reply> {
} _flex_stats_reply_default_instance_;
class flex_sf_triggerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_sf_trigger> {
} _flex_sf_trigger_default_instance_;
class flex_ul_sr_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_sr_info> {
} _flex_ul_sr_info_default_instance_;
class flex_enb_config_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_enb_config_request> {
} _flex_enb_config_request_default_instance_;
class flex_enb_config_replyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_enb_config_reply> {
} _flex_enb_config_reply_default_instance_;
class flex_ue_config_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_config_request> {
} _flex_ue_config_request_default_instance_;
class flex_ue_config_replyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_config_reply> {
} _flex_ue_config_reply_default_instance_;
class flex_lc_config_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_lc_config_request> {
} _flex_lc_config_request_default_instance_;
class flex_lc_config_replyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_lc_config_reply> {
} _flex_lc_config_reply_default_instance_;
class flex_dl_mac_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_mac_config> {
} _flex_dl_mac_config_default_instance_;
class flex_ul_mac_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_mac_config> {
} _flex_ul_mac_config_default_instance_;
class flex_rrc_triggeringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_rrc_triggering> {
} _flex_rrc_triggering_default_instance_;
class flex_ho_commandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ho_command> {
} _flex_ho_command_default_instance_;
class flex_ue_state_changeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_state_change> {
} _flex_ue_state_change_default_instance_;
class flex_control_delegationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_control_delegation> {
} _flex_control_delegation_default_instance_;
class flex_agent_reconfigurationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_agent_reconfiguration> {
} _flex_agent_reconfiguration_default_instance_;
class flex_echo_request_latencyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_echo_request_latency> {
} _flex_echo_request_latency_default_instance_;
class flex_echo_reply_latencyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_echo_reply_latency> {
} _flex_echo_reply_latency_default_instance_;
class flex_disconnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_disconnect> {
} _flex_disconnect_default_instance_;

namespace protobuf_flexran_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[24];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flexran_message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flexran_message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flexran_message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flexran_message, msg_dir_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), hello_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), echo_request_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), echo_reply_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), stats_request_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), stats_reply_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), sf_trigger_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), ul_sr_info_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), enb_config_request_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), enb_config_reply_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), ue_config_request_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), ue_config_reply_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), lc_config_request_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), lc_config_reply_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), dl_mac_config_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), ue_state_change_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), control_delegation_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), agent_reconfiguration_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), rrc_triggering_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), ul_mac_config_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), disconnect_msg_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flexran_message_default_instance_), ho_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flexran_message, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_hello, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_hello, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_hello, bs_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_hello, capabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_hello, splits_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_request, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_request, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_request, header_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_reply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_reply, _internal_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_reply, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_reply, header_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_request, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_request, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_stats_request_default_instance_), complete_stats_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_stats_request_default_instance_), cell_stats_request_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_stats_request_default_instance_), ue_stats_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_request, body_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_reply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_reply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_reply, ue_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_stats_reply, cell_report_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sf_trigger, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sf_trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sf_trigger, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sf_trigger, sfn_sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sf_trigger, dl_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sf_trigger, ul_info_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_sr_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_sr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_sr_info, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_sr_info, sfn_sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_sr_info, rnti_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_request, header_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, enb_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, cell_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, device_spec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_enb_config_reply, s1ap_),
  0,
  2,
  ~0u,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_request, header_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_reply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_reply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config_reply, ue_config_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_request, header_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_reply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_reply, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config_reply, lc_ue_config_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, sfn_sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, dl_ue_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, dl_rar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, dl_broadcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_mac_config, ofdm_sym_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_mac_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_mac_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_mac_config, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_mac_config, sfn_sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_mac_config, ul_ue_data_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_triggering, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_triggering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_triggering, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_triggering, rrc_trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_triggering, meas_info_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ho_command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ho_command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ho_command, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ho_command, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ho_command, target_phy_cell_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_state_change, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_state_change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_state_change, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_state_change, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_state_change, config_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_control_delegation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_control_delegation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_control_delegation, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_control_delegation, delegation_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_control_delegation, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_control_delegation, name_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_agent_reconfiguration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_agent_reconfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_agent_reconfiguration, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_agent_reconfiguration, policy_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_request_latency, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_request_latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_reply_latency, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_echo_reply_latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_disconnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_disconnect, header_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 28, sizeof(flexran_message)},
  { 50, 59, sizeof(flex_hello)},
  { 63, 69, sizeof(flex_echo_request)},
  { 70, 76, sizeof(flex_echo_reply)},
  { 77, 88, sizeof(flex_stats_request)},
  { 93, 101, sizeof(flex_stats_reply)},
  { 104, 113, sizeof(flex_sf_trigger)},
  { 117, 125, sizeof(flex_ul_sr_info)},
  { 128, 134, sizeof(flex_enb_config_request)},
  { 135, 145, sizeof(flex_enb_config_reply)},
  { 150, 156, sizeof(flex_ue_config_request)},
  { 157, 164, sizeof(flex_ue_config_reply)},
  { 166, 172, sizeof(flex_lc_config_request)},
  { 173, 180, sizeof(flex_lc_config_reply)},
  { 182, 193, sizeof(flex_dl_mac_config)},
  { 199, 207, sizeof(flex_ul_mac_config)},
  { 210, 218, sizeof(flex_rrc_triggering)},
  { 221, 229, sizeof(flex_ho_command)},
  { 232, 240, sizeof(flex_ue_state_change)},
  { 243, 252, sizeof(flex_control_delegation)},
  { 256, 263, sizeof(flex_agent_reconfiguration)},
  { 265, 270, sizeof(flex_echo_request_latency)},
  { 270, 275, sizeof(flex_echo_reply_latency)},
  { 275, 281, sizeof(flex_disconnect)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flexran_message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_hello_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_echo_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_echo_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_stats_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_stats_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_sf_trigger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_sr_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_enb_config_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_enb_config_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_config_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_config_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_lc_config_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_lc_config_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_mac_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_mac_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_rrc_triggering_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ho_command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_state_change_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_control_delegation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_agent_reconfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_echo_request_latency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_echo_reply_latency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_disconnect_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "flexran.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 24);
}

}  // namespace

void TableStruct::Shutdown() {
  _flexran_message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_hello_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_echo_request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_echo_reply_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _flex_stats_request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _flex_stats_reply_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _flex_sf_trigger_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _flex_ul_sr_info_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _flex_enb_config_request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _flex_enb_config_reply_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _flex_ue_config_request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _flex_ue_config_reply_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _flex_lc_config_request_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _flex_lc_config_reply_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _flex_dl_mac_config_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _flex_ul_mac_config_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _flex_rrc_triggering_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _flex_ho_command_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _flex_ue_state_change_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _flex_control_delegation_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _flex_agent_reconfiguration_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _flex_echo_request_latency_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _flex_echo_reply_latency_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _flex_disconnect_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protocol::protobuf_stats_5fmessages_2eproto::InitDefaults();
  ::protocol::protobuf_header_2eproto::InitDefaults();
  ::protocol::protobuf_time_5fcommon_2eproto::InitDefaults();
  ::protocol::protobuf_config_5fmessages_2eproto::InitDefaults();
  ::protocol::protobuf_controller_5fcommands_2eproto::InitDefaults();
  ::protocol::protobuf_config_5fcommon_2eproto::InitDefaults();
  _flexran_message_default_instance_.DefaultConstruct();
  _flex_hello_default_instance_.DefaultConstruct();
  _flex_echo_request_default_instance_.DefaultConstruct();
  _flex_echo_reply_default_instance_.DefaultConstruct();
  _flex_stats_request_default_instance_.DefaultConstruct();
  _flex_stats_reply_default_instance_.DefaultConstruct();
  _flex_sf_trigger_default_instance_.DefaultConstruct();
  _flex_ul_sr_info_default_instance_.DefaultConstruct();
  _flex_enb_config_request_default_instance_.DefaultConstruct();
  _flex_enb_config_reply_default_instance_.DefaultConstruct();
  _flex_ue_config_request_default_instance_.DefaultConstruct();
  _flex_ue_config_reply_default_instance_.DefaultConstruct();
  _flex_lc_config_request_default_instance_.DefaultConstruct();
  _flex_lc_config_reply_default_instance_.DefaultConstruct();
  _flex_dl_mac_config_default_instance_.DefaultConstruct();
  _flex_ul_mac_config_default_instance_.DefaultConstruct();
  _flex_rrc_triggering_default_instance_.DefaultConstruct();
  _flex_ho_command_default_instance_.DefaultConstruct();
  _flex_ue_state_change_default_instance_.DefaultConstruct();
  _flex_control_delegation_default_instance_.DefaultConstruct();
  _flex_agent_reconfiguration_default_instance_.DefaultConstruct();
  _flex_echo_request_latency_default_instance_.DefaultConstruct();
  _flex_echo_reply_latency_default_instance_.DefaultConstruct();
  _flex_disconnect_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::protocol::flex_echo_request::internal_default_instance(),
    100, 13, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::protocol::flex_echo_reply::internal_default_instance(),
    100, 13, false, false);
  _flexran_message_default_instance_.hello_msg_ = const_cast< ::protocol::flex_hello*>(
      ::protocol::flex_hello::internal_default_instance());
  _flexran_message_default_instance_.echo_request_msg_ = const_cast< ::protocol::flex_echo_request*>(
      ::protocol::flex_echo_request::internal_default_instance());
  _flexran_message_default_instance_.echo_reply_msg_ = const_cast< ::protocol::flex_echo_reply*>(
      ::protocol::flex_echo_reply::internal_default_instance());
  _flexran_message_default_instance_.stats_request_msg_ = const_cast< ::protocol::flex_stats_request*>(
      ::protocol::flex_stats_request::internal_default_instance());
  _flexran_message_default_instance_.stats_reply_msg_ = const_cast< ::protocol::flex_stats_reply*>(
      ::protocol::flex_stats_reply::internal_default_instance());
  _flexran_message_default_instance_.sf_trigger_msg_ = const_cast< ::protocol::flex_sf_trigger*>(
      ::protocol::flex_sf_trigger::internal_default_instance());
  _flexran_message_default_instance_.ul_sr_info_msg_ = const_cast< ::protocol::flex_ul_sr_info*>(
      ::protocol::flex_ul_sr_info::internal_default_instance());
  _flexran_message_default_instance_.enb_config_request_msg_ = const_cast< ::protocol::flex_enb_config_request*>(
      ::protocol::flex_enb_config_request::internal_default_instance());
  _flexran_message_default_instance_.enb_config_reply_msg_ = const_cast< ::protocol::flex_enb_config_reply*>(
      ::protocol::flex_enb_config_reply::internal_default_instance());
  _flexran_message_default_instance_.ue_config_request_msg_ = const_cast< ::protocol::flex_ue_config_request*>(
      ::protocol::flex_ue_config_request::internal_default_instance());
  _flexran_message_default_instance_.ue_config_reply_msg_ = const_cast< ::protocol::flex_ue_config_reply*>(
      ::protocol::flex_ue_config_reply::internal_default_instance());
  _flexran_message_default_instance_.lc_config_request_msg_ = const_cast< ::protocol::flex_lc_config_request*>(
      ::protocol::flex_lc_config_request::internal_default_instance());
  _flexran_message_default_instance_.lc_config_reply_msg_ = const_cast< ::protocol::flex_lc_config_reply*>(
      ::protocol::flex_lc_config_reply::internal_default_instance());
  _flexran_message_default_instance_.dl_mac_config_msg_ = const_cast< ::protocol::flex_dl_mac_config*>(
      ::protocol::flex_dl_mac_config::internal_default_instance());
  _flexran_message_default_instance_.ue_state_change_msg_ = const_cast< ::protocol::flex_ue_state_change*>(
      ::protocol::flex_ue_state_change::internal_default_instance());
  _flexran_message_default_instance_.control_delegation_msg_ = const_cast< ::protocol::flex_control_delegation*>(
      ::protocol::flex_control_delegation::internal_default_instance());
  _flexran_message_default_instance_.agent_reconfiguration_msg_ = const_cast< ::protocol::flex_agent_reconfiguration*>(
      ::protocol::flex_agent_reconfiguration::internal_default_instance());
  _flexran_message_default_instance_.rrc_triggering_ = const_cast< ::protocol::flex_rrc_triggering*>(
      ::protocol::flex_rrc_triggering::internal_default_instance());
  _flexran_message_default_instance_.ul_mac_config_msg_ = const_cast< ::protocol::flex_ul_mac_config*>(
      ::protocol::flex_ul_mac_config::internal_default_instance());
  _flexran_message_default_instance_.disconnect_msg_ = const_cast< ::protocol::flex_disconnect*>(
      ::protocol::flex_disconnect::internal_default_instance());
  _flexran_message_default_instance_.ho_command_ = const_cast< ::protocol::flex_ho_command*>(
      ::protocol::flex_ho_command::internal_default_instance());
  _flex_hello_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_echo_request_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_echo_reply_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_stats_request_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_stats_request_default_instance_.complete_stats_request_ = const_cast< ::protocol::flex_complete_stats_request*>(
      ::protocol::flex_complete_stats_request::internal_default_instance());
  _flex_stats_request_default_instance_.cell_stats_request_ = const_cast< ::protocol::flex_cell_stats_request*>(
      ::protocol::flex_cell_stats_request::internal_default_instance());
  _flex_stats_request_default_instance_.ue_stats_request_ = const_cast< ::protocol::flex_ue_stats_request*>(
      ::protocol::flex_ue_stats_request::internal_default_instance());
  _flex_stats_reply_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_sf_trigger_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_ul_sr_info_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_enb_config_request_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_enb_config_reply_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_enb_config_reply_default_instance_.get_mutable()->s1ap_ = const_cast< ::protocol::flex_s1ap_config*>(
      ::protocol::flex_s1ap_config::internal_default_instance());
  _flex_ue_config_request_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_ue_config_reply_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_lc_config_request_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_lc_config_reply_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_dl_mac_config_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_ul_mac_config_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_rrc_triggering_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_rrc_triggering_default_instance_.get_mutable()->meas_info_ = const_cast< ::protocol::flex_measurement_info*>(
      ::protocol::flex_measurement_info::internal_default_instance());
  _flex_ho_command_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_ue_state_change_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_ue_state_change_default_instance_.get_mutable()->config_ = const_cast< ::protocol::flex_ue_config*>(
      ::protocol::flex_ue_config::internal_default_instance());
  _flex_control_delegation_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_agent_reconfiguration_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  _flex_disconnect_default_instance_.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rflexran.proto\022\010protocol\032\024stats_message"
      "s.proto\032\014header.proto\032\021time_common.proto"
      "\032\025config_messages.proto\032\031controller_comm"
      "ands.proto\032\023config_common.proto\"\251\n\n\017flex"
      "ran_message\022,\n\007msg_dir\030d \001(\0162\033.protocol."
      "flexran_direction\022)\n\thello_msg\030\001 \001(\0132\024.p"
      "rotocol.flex_helloH\000\0227\n\020echo_request_msg"
      "\030\002 \001(\0132\033.protocol.flex_echo_requestH\000\0223\n"
      "\016echo_reply_msg\030\003 \001(\0132\031.protocol.flex_ec"
      "ho_replyH\000\0229\n\021stats_request_msg\030\004 \001(\0132\034."
      "protocol.flex_stats_requestH\000\0225\n\017stats_r"
      "eply_msg\030\005 \001(\0132\032.protocol.flex_stats_rep"
      "lyH\000\0223\n\016sf_trigger_msg\030\006 \001(\0132\031.protocol."
      "flex_sf_triggerH\000\0223\n\016ul_sr_info_msg\030\007 \001("
      "\0132\031.protocol.flex_ul_sr_infoH\000\022C\n\026enb_co"
      "nfig_request_msg\030\010 \001(\0132!.protocol.flex_e"
      "nb_config_requestH\000\022\?\n\024enb_config_reply_"
      "msg\030\t \001(\0132\037.protocol.flex_enb_config_rep"
      "lyH\000\022A\n\025ue_config_request_msg\030\n \001(\0132 .pr"
      "otocol.flex_ue_config_requestH\000\022=\n\023ue_co"
      "nfig_reply_msg\030\013 \001(\0132\036.protocol.flex_ue_"
      "config_replyH\000\022A\n\025lc_config_request_msg\030"
      "\014 \001(\0132 .protocol.flex_lc_config_requestH"
      "\000\022=\n\023lc_config_reply_msg\030\r \001(\0132\036.protoco"
      "l.flex_lc_config_replyH\000\0229\n\021dl_mac_confi"
      "g_msg\030\016 \001(\0132\034.protocol.flex_dl_mac_confi"
      "gH\000\022=\n\023ue_state_change_msg\030\017 \001(\0132\036.proto"
      "col.flex_ue_state_changeH\000\022C\n\026control_de"
      "legation_msg\030\020 \001(\0132!.protocol.flex_contr"
      "ol_delegationH\000\022I\n\031agent_reconfiguration"
      "_msg\030\021 \001(\0132$.protocol.flex_agent_reconfi"
      "gurationH\000\0227\n\016rrc_triggering\030\022 \001(\0132\035.pro"
      "tocol.flex_rrc_triggeringH\000\0229\n\021ul_mac_co"
      "nfig_msg\030\023 \001(\0132\034.protocol.flex_ul_mac_co"
      "nfigH\000\0223\n\016disconnect_msg\030\024 \001(\0132\031.protoco"
      "l.flex_disconnectH\000\022/\n\nho_command\030\025 \001(\0132"
      "\031.protocol.flex_ho_commandH\000B\005\n\003msg\"\237\001\n\n"
      "flex_hello\022%\n\006header\030\001 \001(\0132\025.protocol.fl"
      "ex_header\022\r\n\005bs_id\030\002 \001(\004\0222\n\014capabilities"
      "\030\003 \003(\0162\034.protocol.flex_bs_capability\022\'\n\006"
      "splits\030\004 \003(\0162\027.protocol.flex_bs_split\"A\n"
      "\021flex_echo_request\022%\n\006header\030\001 \001(\0132\025.pro"
      "tocol.flex_header*\005\010d\020\310\001\"\?\n\017flex_echo_re"
      "ply\022%\n\006header\030\001 \001(\0132\025.protocol.flex_head"
      "er*\005\010d\020\310\001\"\263\002\n\022flex_stats_request\022%\n\006head"
      "er\030\001 \001(\0132\025.protocol.flex_header\022\'\n\004type\030"
      "\002 \001(\0162\031.protocol.flex_stats_type\022G\n\026comp"
      "lete_stats_request\030\003 \001(\0132%.protocol.flex"
      "_complete_stats_requestH\000\022\?\n\022cell_stats_"
      "request\030\004 \001(\0132!.protocol.flex_cell_stats"
      "_requestH\000\022;\n\020ue_stats_request\030\005 \001(\0132\037.p"
      "rotocol.flex_ue_stats_requestH\000B\006\n\004body\""
      "\243\001\n\020flex_stats_reply\022%\n\006header\030\001 \001(\0132\025.p"
      "rotocol.flex_header\0221\n\tue_report\030\002 \003(\0132\036"
      ".protocol.flex_ue_stats_report\0225\n\013cell_r"
      "eport\030\003 \003(\0132 .protocol.flex_cell_stats_r"
      "eport\"\232\001\n\017flex_sf_trigger\022%\n\006header\030\001 \001("
      "\0132\025.protocol.flex_header\022\016\n\006sfn_sf\030\002 \001(\r"
      "\022\'\n\007dl_info\030\003 \003(\0132\026.protocol.flex_dl_inf"
      "o\022\'\n\007ul_info\030\004 \003(\0132\026.protocol.flex_ul_in"
      "fo\"V\n\017flex_ul_sr_info\022%\n\006header\030\001 \001(\0132\025."
      "protocol.flex_header\022\016\n\006sfn_sf\030\002 \001(\r\022\014\n\004"
      "rnti\030\003 \003(\r\"@\n\027flex_enb_config_request\022%\n"
      "\006header\030\001 \001(\0132\025.protocol.flex_header\"\276\001\n"
      "\025flex_enb_config_reply\022%\n\006header\030\001 \001(\0132\025"
      ".protocol.flex_header\022\016\n\006eNB_id\030\002 \001(\004\022/\n"
      "\013cell_config\030\003 \003(\0132\032.protocol.flex_cell_"
      "config\022\023\n\013device_spec\030\004 \001(\r\022(\n\004s1ap\030\005 \001("
      "\0132\032.protocol.flex_s1ap_config\"\?\n\026flex_ue"
      "_config_request\022%\n\006header\030\001 \001(\0132\025.protoc"
      "ol.flex_header\"j\n\024flex_ue_config_reply\022%"
      "\n\006header\030\001 \001(\0132\025.protocol.flex_header\022+\n"
      "\tue_config\030\002 \003(\0132\030.protocol.flex_ue_conf"
      "ig\"\?\n\026flex_lc_config_request\022%\n\006header\030\001"
      " \001(\0132\025.protocol.flex_header\"p\n\024flex_lc_c"
      "onfig_reply\022%\n\006header\030\001 \001(\0132\025.protocol.f"
      "lex_header\0221\n\014lc_ue_config\030\002 \003(\0132\033.proto"
      "col.flex_lc_ue_config\"\210\002\n\022flex_dl_mac_co"
      "nfig\022%\n\006header\030\001 \001(\0132\025.protocol.flex_hea"
      "der\022\016\n\006sfn_sf\030\002 \001(\r\022*\n\ndl_ue_data\030\003 \003(\0132"
      "\026.protocol.flex_dl_data\022%\n\006dl_rar\030\004 \003(\0132"
      "\025.protocol.flex_dl_rar\0221\n\014dl_broadcast\030\005"
      " \003(\0132\033.protocol.flex_dl_broadcast\0225\n\010ofd"
      "m_sym\030\006 \003(\0132#.protocol.flex_pdcch_ofdm_s"
      "ym_count\"w\n\022flex_ul_mac_config\022%\n\006header"
      "\030\001 \001(\0132\025.protocol.flex_header\022\016\n\006sfn_sf\030"
      "\002 \001(\r\022*\n\nul_ue_data\030\003 \003(\0132\026.protocol.fle"
      "x_ul_data\"\205\001\n\023flex_rrc_triggering\022%\n\006hea"
      "der\030\001 \001(\0132\025.protocol.flex_header\022\023\n\013rrc_"
      "trigger\030\002 \001(\t\0222\n\tmeas_info\030\003 \001(\0132\037.proto"
      "col.flex_measurement_info\"b\n\017flex_ho_com"
      "mand\022%\n\006header\030\001 \001(\0132\025.protocol.flex_hea"
      "der\022\014\n\004rnti\030\002 \001(\r\022\032\n\022target_phy_cell_id\030"
      "\003 \001(\r\"u\n\024flex_ue_state_change\022%\n\006header\030"
      "\001 \001(\0132\025.protocol.flex_header\022\014\n\004type\030\002 \001"
      "(\r\022(\n\006config\030\003 \001(\0132\030.protocol.flex_ue_co"
      "nfig\"x\n\027flex_control_delegation\022%\n\006heade"
      "r\030\001 \001(\0132\025.protocol.flex_header\022\027\n\017delega"
      "tion_type\030\002 \001(\r\022\017\n\007payload\030\003 \001(\014\022\014\n\004name"
      "\030\004 \001(\t\"S\n\032flex_agent_reconfiguration\022%\n\006"
      "header\030\001 \001(\0132\025.protocol.flex_header\022\016\n\006p"
      "olicy\030\002 \001(\t\"I\n\031flex_echo_request_latency"
      "2,\n\007latency\022\033.protocol.flex_echo_request"
      "\030d \001(\r\"E\n\027flex_echo_reply_latency2*\n\007lat"
      "ency\022\031.protocol.flex_echo_reply\030d \001(\r\"8\n"
      "\017flex_disconnect\022%\n\006header\030\001 \001(\0132\025.proto"
      "col.flex_header*j\n\021flexran_direction\022\013\n\007"
      "NOT_SET\020\000\022\026\n\022INITIATING_MESSAGE\020\001\022\026\n\022SUC"
      "CESSFUL_OUTCOME\020\002\022\030\n\024UNSUCCESSFUL_OUTCOM"
      "E\020\003*\262\002\n\013flexran_err\022\n\n\006NO_ERR\020\000\022\032\n\rMSG_D"
      "EQUEUING\020\377\377\377\377\377\377\377\377\377\001\022\032\n\rMSG_ENQUEUING\020\376\377\377"
      "\377\377\377\377\377\377\001\022\031\n\014MSG_DECODING\020\375\377\377\377\377\377\377\377\377\001\022\031\n\014MS"
      "G_ENCODING\020\374\377\377\377\377\377\377\377\377\001\022\026\n\tMSG_BUILD\020\373\377\377\377\377"
      "\377\377\377\377\001\022\036\n\021MSG_NOT_SUPPORTED\020\372\377\377\377\377\377\377\377\377\001\022\034\n"
      "\017MSG_NOT_HANDLED\020\371\377\377\377\377\377\377\377\377\001\022\036\n\021MSG_NOT_V"
      "ALIDATED\020\370\377\377\377\377\377\377\377\377\001\022\032\n\rMSG_OUT_DATED\020\367\377\377"
      "\377\377\377\377\377\377\001\022\027\n\nUNEXPECTED\020\234\377\377\377\377\377\377\377\377\001*p\n\022flex"
      "_bs_capability\022\t\n\005LOPHY\020\000\022\t\n\005HIPHY\020\001\022\t\n\005"
      "LOMAC\020\002\022\t\n\005HIMAC\020\003\022\007\n\003RLC\020\004\022\010\n\004PDCP\020\005\022\010\n"
      "\004SDAP\020\006\022\007\n\003RRC\020\007\022\010\n\004S1AP\020\010*\?\n\rflex_bs_sp"
      "lit\022\006\n\002F1\020\000\022\t\n\005nFAPI\020\001\022\007\n\003IF4\020\002\022\t\n\005IF4p5"
      "\020\003\022\007\n\003IF5\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "flexran.proto", &protobuf_RegisterTypes);
  ::protocol::protobuf_stats_5fmessages_2eproto::AddDescriptors();
  ::protocol::protobuf_header_2eproto::AddDescriptors();
  ::protocol::protobuf_time_5fcommon_2eproto::AddDescriptors();
  ::protocol::protobuf_config_5fmessages_2eproto::AddDescriptors();
  ::protocol::protobuf_controller_5fcommands_2eproto::AddDescriptors();
  ::protocol::protobuf_config_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_flexran_2eproto

const ::google::protobuf::EnumDescriptor* flexran_direction_descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_enum_descriptors[0];
}
bool flexran_direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flexran_err_descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_enum_descriptors[1];
}
bool flexran_err_IsValid(int value) {
  switch (value) {
    case -100:
    case -9:
    case -8:
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_bs_capability_descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_enum_descriptors[2];
}
bool flex_bs_capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_bs_split_descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_enum_descriptors[3];
}
bool flex_bs_split_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flexran_message::kMsgDirFieldNumber;
const int flexran_message::kHelloMsgFieldNumber;
const int flexran_message::kEchoRequestMsgFieldNumber;
const int flexran_message::kEchoReplyMsgFieldNumber;
const int flexran_message::kStatsRequestMsgFieldNumber;
const int flexran_message::kStatsReplyMsgFieldNumber;
const int flexran_message::kSfTriggerMsgFieldNumber;
const int flexran_message::kUlSrInfoMsgFieldNumber;
const int flexran_message::kEnbConfigRequestMsgFieldNumber;
const int flexran_message::kEnbConfigReplyMsgFieldNumber;
const int flexran_message::kUeConfigRequestMsgFieldNumber;
const int flexran_message::kUeConfigReplyMsgFieldNumber;
const int flexran_message::kLcConfigRequestMsgFieldNumber;
const int flexran_message::kLcConfigReplyMsgFieldNumber;
const int flexran_message::kDlMacConfigMsgFieldNumber;
const int flexran_message::kUeStateChangeMsgFieldNumber;
const int flexran_message::kControlDelegationMsgFieldNumber;
const int flexran_message::kAgentReconfigurationMsgFieldNumber;
const int flexran_message::kRrcTriggeringFieldNumber;
const int flexran_message::kUlMacConfigMsgFieldNumber;
const int flexran_message::kDisconnectMsgFieldNumber;
const int flexran_message::kHoCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flexran_message::flexran_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flexran_message)
}
flexran_message::flexran_message(const flexran_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_dir_ = from.msg_dir_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kHelloMsg: {
      mutable_hello_msg()->::protocol::flex_hello::MergeFrom(from.hello_msg());
      break;
    }
    case kEchoRequestMsg: {
      mutable_echo_request_msg()->::protocol::flex_echo_request::MergeFrom(from.echo_request_msg());
      break;
    }
    case kEchoReplyMsg: {
      mutable_echo_reply_msg()->::protocol::flex_echo_reply::MergeFrom(from.echo_reply_msg());
      break;
    }
    case kStatsRequestMsg: {
      mutable_stats_request_msg()->::protocol::flex_stats_request::MergeFrom(from.stats_request_msg());
      break;
    }
    case kStatsReplyMsg: {
      mutable_stats_reply_msg()->::protocol::flex_stats_reply::MergeFrom(from.stats_reply_msg());
      break;
    }
    case kSfTriggerMsg: {
      mutable_sf_trigger_msg()->::protocol::flex_sf_trigger::MergeFrom(from.sf_trigger_msg());
      break;
    }
    case kUlSrInfoMsg: {
      mutable_ul_sr_info_msg()->::protocol::flex_ul_sr_info::MergeFrom(from.ul_sr_info_msg());
      break;
    }
    case kEnbConfigRequestMsg: {
      mutable_enb_config_request_msg()->::protocol::flex_enb_config_request::MergeFrom(from.enb_config_request_msg());
      break;
    }
    case kEnbConfigReplyMsg: {
      mutable_enb_config_reply_msg()->::protocol::flex_enb_config_reply::MergeFrom(from.enb_config_reply_msg());
      break;
    }
    case kUeConfigRequestMsg: {
      mutable_ue_config_request_msg()->::protocol::flex_ue_config_request::MergeFrom(from.ue_config_request_msg());
      break;
    }
    case kUeConfigReplyMsg: {
      mutable_ue_config_reply_msg()->::protocol::flex_ue_config_reply::MergeFrom(from.ue_config_reply_msg());
      break;
    }
    case kLcConfigRequestMsg: {
      mutable_lc_config_request_msg()->::protocol::flex_lc_config_request::MergeFrom(from.lc_config_request_msg());
      break;
    }
    case kLcConfigReplyMsg: {
      mutable_lc_config_reply_msg()->::protocol::flex_lc_config_reply::MergeFrom(from.lc_config_reply_msg());
      break;
    }
    case kDlMacConfigMsg: {
      mutable_dl_mac_config_msg()->::protocol::flex_dl_mac_config::MergeFrom(from.dl_mac_config_msg());
      break;
    }
    case kUeStateChangeMsg: {
      mutable_ue_state_change_msg()->::protocol::flex_ue_state_change::MergeFrom(from.ue_state_change_msg());
      break;
    }
    case kControlDelegationMsg: {
      mutable_control_delegation_msg()->::protocol::flex_control_delegation::MergeFrom(from.control_delegation_msg());
      break;
    }
    case kAgentReconfigurationMsg: {
      mutable_agent_reconfiguration_msg()->::protocol::flex_agent_reconfiguration::MergeFrom(from.agent_reconfiguration_msg());
      break;
    }
    case kRrcTriggering: {
      mutable_rrc_triggering()->::protocol::flex_rrc_triggering::MergeFrom(from.rrc_triggering());
      break;
    }
    case kUlMacConfigMsg: {
      mutable_ul_mac_config_msg()->::protocol::flex_ul_mac_config::MergeFrom(from.ul_mac_config_msg());
      break;
    }
    case kDisconnectMsg: {
      mutable_disconnect_msg()->::protocol::flex_disconnect::MergeFrom(from.disconnect_msg());
      break;
    }
    case kHoCommand: {
      mutable_ho_command()->::protocol::flex_ho_command::MergeFrom(from.ho_command());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flexran_message)
}

void flexran_message::SharedCtor() {
  _cached_size_ = 0;
  msg_dir_ = 0;
  clear_has_msg();
}

flexran_message::~flexran_message() {
  // @@protoc_insertion_point(destructor:protocol.flexran_message)
  SharedDtor();
}

void flexran_message::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void flexran_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flexran_message::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flexran_message& flexran_message::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flexran_message* flexran_message::New(::google::protobuf::Arena* arena) const {
  flexran_message* n = new flexran_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flexran_message::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flexran_message)
  switch (msg_case()) {
    case kHelloMsg: {
      delete msg_.hello_msg_;
      break;
    }
    case kEchoRequestMsg: {
      delete msg_.echo_request_msg_;
      break;
    }
    case kEchoReplyMsg: {
      delete msg_.echo_reply_msg_;
      break;
    }
    case kStatsRequestMsg: {
      delete msg_.stats_request_msg_;
      break;
    }
    case kStatsReplyMsg: {
      delete msg_.stats_reply_msg_;
      break;
    }
    case kSfTriggerMsg: {
      delete msg_.sf_trigger_msg_;
      break;
    }
    case kUlSrInfoMsg: {
      delete msg_.ul_sr_info_msg_;
      break;
    }
    case kEnbConfigRequestMsg: {
      delete msg_.enb_config_request_msg_;
      break;
    }
    case kEnbConfigReplyMsg: {
      delete msg_.enb_config_reply_msg_;
      break;
    }
    case kUeConfigRequestMsg: {
      delete msg_.ue_config_request_msg_;
      break;
    }
    case kUeConfigReplyMsg: {
      delete msg_.ue_config_reply_msg_;
      break;
    }
    case kLcConfigRequestMsg: {
      delete msg_.lc_config_request_msg_;
      break;
    }
    case kLcConfigReplyMsg: {
      delete msg_.lc_config_reply_msg_;
      break;
    }
    case kDlMacConfigMsg: {
      delete msg_.dl_mac_config_msg_;
      break;
    }
    case kUeStateChangeMsg: {
      delete msg_.ue_state_change_msg_;
      break;
    }
    case kControlDelegationMsg: {
      delete msg_.control_delegation_msg_;
      break;
    }
    case kAgentReconfigurationMsg: {
      delete msg_.agent_reconfiguration_msg_;
      break;
    }
    case kRrcTriggering: {
      delete msg_.rrc_triggering_;
      break;
    }
    case kUlMacConfigMsg: {
      delete msg_.ul_mac_config_msg_;
      break;
    }
    case kDisconnectMsg: {
      delete msg_.disconnect_msg_;
      break;
    }
    case kHoCommand: {
      delete msg_.ho_command_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void flexran_message::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flexran_message)
  msg_dir_ = 0;
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flexran_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flexran_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_hello hello_msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_echo_request echo_request_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_echo_request_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_echo_reply echo_reply_msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_echo_reply_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_stats_request stats_request_msg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_request_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_stats_reply stats_reply_msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_reply_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_sf_trigger sf_trigger_msg = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sf_trigger_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ul_sr_info ul_sr_info_msg = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ul_sr_info_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_enb_config_request enb_config_request_msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enb_config_request_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_enb_config_reply enb_config_reply_msg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enb_config_reply_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ue_config_request ue_config_request_msg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ue_config_request_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ue_config_reply ue_config_reply_msg = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ue_config_reply_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_lc_config_request lc_config_request_msg = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lc_config_request_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_lc_config_reply lc_config_reply_msg = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lc_config_reply_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_dl_mac_config dl_mac_config_msg = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dl_mac_config_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ue_state_change ue_state_change_msg = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ue_state_change_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_control_delegation control_delegation_msg = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_delegation_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_agent_reconfiguration agent_reconfiguration_msg = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_reconfiguration_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_rrc_triggering rrc_triggering = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rrc_triggering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ul_mac_config ul_mac_config_msg = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ul_mac_config_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_disconnect disconnect_msg = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disconnect_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ho_command ho_command = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ho_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flexran_direction msg_dir = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flexran_direction_IsValid(value)) {
            set_msg_dir(static_cast< ::protocol::flexran_direction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flexran_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flexran_message)
  return false;
#undef DO_
}

void flexran_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flexran_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (msg_case()) {
    case kHelloMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *msg_.hello_msg_, output);
      break;
    case kEchoRequestMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *msg_.echo_request_msg_, output);
      break;
    case kEchoReplyMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *msg_.echo_reply_msg_, output);
      break;
    case kStatsRequestMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *msg_.stats_request_msg_, output);
      break;
    case kStatsReplyMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *msg_.stats_reply_msg_, output);
      break;
    case kSfTriggerMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *msg_.sf_trigger_msg_, output);
      break;
    case kUlSrInfoMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *msg_.ul_sr_info_msg_, output);
      break;
    case kEnbConfigRequestMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *msg_.enb_config_request_msg_, output);
      break;
    case kEnbConfigReplyMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *msg_.enb_config_reply_msg_, output);
      break;
    case kUeConfigRequestMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *msg_.ue_config_request_msg_, output);
      break;
    case kUeConfigReplyMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *msg_.ue_config_reply_msg_, output);
      break;
    case kLcConfigRequestMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *msg_.lc_config_request_msg_, output);
      break;
    case kLcConfigReplyMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *msg_.lc_config_reply_msg_, output);
      break;
    case kDlMacConfigMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, *msg_.dl_mac_config_msg_, output);
      break;
    case kUeStateChangeMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, *msg_.ue_state_change_msg_, output);
      break;
    case kControlDelegationMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, *msg_.control_delegation_msg_, output);
      break;
    case kAgentReconfigurationMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, *msg_.agent_reconfiguration_msg_, output);
      break;
    case kRrcTriggering:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, *msg_.rrc_triggering_, output);
      break;
    case kUlMacConfigMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, *msg_.ul_mac_config_msg_, output);
      break;
    case kDisconnectMsg:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, *msg_.disconnect_msg_, output);
      break;
    case kHoCommand:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, *msg_.ho_command_, output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .protocol.flexran_direction msg_dir = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->msg_dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flexran_message)
}

::google::protobuf::uint8* flexran_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flexran_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (msg_case()) {
    case kHelloMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *msg_.hello_msg_, deterministic, target);
      break;
    case kEchoRequestMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *msg_.echo_request_msg_, deterministic, target);
      break;
    case kEchoReplyMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *msg_.echo_reply_msg_, deterministic, target);
      break;
    case kStatsRequestMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *msg_.stats_request_msg_, deterministic, target);
      break;
    case kStatsReplyMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *msg_.stats_reply_msg_, deterministic, target);
      break;
    case kSfTriggerMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *msg_.sf_trigger_msg_, deterministic, target);
      break;
    case kUlSrInfoMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *msg_.ul_sr_info_msg_, deterministic, target);
      break;
    case kEnbConfigRequestMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *msg_.enb_config_request_msg_, deterministic, target);
      break;
    case kEnbConfigReplyMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *msg_.enb_config_reply_msg_, deterministic, target);
      break;
    case kUeConfigRequestMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *msg_.ue_config_request_msg_, deterministic, target);
      break;
    case kUeConfigReplyMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *msg_.ue_config_reply_msg_, deterministic, target);
      break;
    case kLcConfigRequestMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *msg_.lc_config_request_msg_, deterministic, target);
      break;
    case kLcConfigReplyMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *msg_.lc_config_reply_msg_, deterministic, target);
      break;
    case kDlMacConfigMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          14, *msg_.dl_mac_config_msg_, deterministic, target);
      break;
    case kUeStateChangeMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          15, *msg_.ue_state_change_msg_, deterministic, target);
      break;
    case kControlDelegationMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          16, *msg_.control_delegation_msg_, deterministic, target);
      break;
    case kAgentReconfigurationMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          17, *msg_.agent_reconfiguration_msg_, deterministic, target);
      break;
    case kRrcTriggering:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          18, *msg_.rrc_triggering_, deterministic, target);
      break;
    case kUlMacConfigMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          19, *msg_.ul_mac_config_msg_, deterministic, target);
      break;
    case kDisconnectMsg:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          20, *msg_.disconnect_msg_, deterministic, target);
      break;
    case kHoCommand:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          21, *msg_.ho_command_, deterministic, target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .protocol.flexran_direction msg_dir = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->msg_dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flexran_message)
  return target;
}

size_t flexran_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flexran_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flexran_direction msg_dir = 100;
  if (has_msg_dir()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_dir());
  }

  switch (msg_case()) {
    // optional .protocol.flex_hello hello_msg = 1;
    case kHelloMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.hello_msg_);
      break;
    }
    // optional .protocol.flex_echo_request echo_request_msg = 2;
    case kEchoRequestMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.echo_request_msg_);
      break;
    }
    // optional .protocol.flex_echo_reply echo_reply_msg = 3;
    case kEchoReplyMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.echo_reply_msg_);
      break;
    }
    // optional .protocol.flex_stats_request stats_request_msg = 4;
    case kStatsRequestMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.stats_request_msg_);
      break;
    }
    // optional .protocol.flex_stats_reply stats_reply_msg = 5;
    case kStatsReplyMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.stats_reply_msg_);
      break;
    }
    // optional .protocol.flex_sf_trigger sf_trigger_msg = 6;
    case kSfTriggerMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.sf_trigger_msg_);
      break;
    }
    // optional .protocol.flex_ul_sr_info ul_sr_info_msg = 7;
    case kUlSrInfoMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ul_sr_info_msg_);
      break;
    }
    // optional .protocol.flex_enb_config_request enb_config_request_msg = 8;
    case kEnbConfigRequestMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.enb_config_request_msg_);
      break;
    }
    // optional .protocol.flex_enb_config_reply enb_config_reply_msg = 9;
    case kEnbConfigReplyMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.enb_config_reply_msg_);
      break;
    }
    // optional .protocol.flex_ue_config_request ue_config_request_msg = 10;
    case kUeConfigRequestMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ue_config_request_msg_);
      break;
    }
    // optional .protocol.flex_ue_config_reply ue_config_reply_msg = 11;
    case kUeConfigReplyMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ue_config_reply_msg_);
      break;
    }
    // optional .protocol.flex_lc_config_request lc_config_request_msg = 12;
    case kLcConfigRequestMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.lc_config_request_msg_);
      break;
    }
    // optional .protocol.flex_lc_config_reply lc_config_reply_msg = 13;
    case kLcConfigReplyMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.lc_config_reply_msg_);
      break;
    }
    // optional .protocol.flex_dl_mac_config dl_mac_config_msg = 14;
    case kDlMacConfigMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.dl_mac_config_msg_);
      break;
    }
    // optional .protocol.flex_ue_state_change ue_state_change_msg = 15;
    case kUeStateChangeMsg: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ue_state_change_msg_);
      break;
    }
    // optional .protocol.flex_control_delegation control_delegation_msg = 16;
    case kControlDelegationMsg: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.control_delegation_msg_);
      break;
    }
    // optional .protocol.flex_agent_reconfiguration agent_reconfiguration_msg = 17;
    case kAgentReconfigurationMsg: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.agent_reconfiguration_msg_);
      break;
    }
    // optional .protocol.flex_rrc_triggering rrc_triggering = 18;
    case kRrcTriggering: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.rrc_triggering_);
      break;
    }
    // optional .protocol.flex_ul_mac_config ul_mac_config_msg = 19;
    case kUlMacConfigMsg: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ul_mac_config_msg_);
      break;
    }
    // optional .protocol.flex_disconnect disconnect_msg = 20;
    case kDisconnectMsg: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.disconnect_msg_);
      break;
    }
    // optional .protocol.flex_ho_command ho_command = 21;
    case kHoCommand: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.ho_command_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flexran_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flexran_message)
  GOOGLE_DCHECK_NE(&from, this);
  const flexran_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flexran_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flexran_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flexran_message)
    MergeFrom(*source);
  }
}

void flexran_message::MergeFrom(const flexran_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flexran_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg_dir()) {
    set_msg_dir(from.msg_dir());
  }
  switch (from.msg_case()) {
    case kHelloMsg: {
      mutable_hello_msg()->::protocol::flex_hello::MergeFrom(from.hello_msg());
      break;
    }
    case kEchoRequestMsg: {
      mutable_echo_request_msg()->::protocol::flex_echo_request::MergeFrom(from.echo_request_msg());
      break;
    }
    case kEchoReplyMsg: {
      mutable_echo_reply_msg()->::protocol::flex_echo_reply::MergeFrom(from.echo_reply_msg());
      break;
    }
    case kStatsRequestMsg: {
      mutable_stats_request_msg()->::protocol::flex_stats_request::MergeFrom(from.stats_request_msg());
      break;
    }
    case kStatsReplyMsg: {
      mutable_stats_reply_msg()->::protocol::flex_stats_reply::MergeFrom(from.stats_reply_msg());
      break;
    }
    case kSfTriggerMsg: {
      mutable_sf_trigger_msg()->::protocol::flex_sf_trigger::MergeFrom(from.sf_trigger_msg());
      break;
    }
    case kUlSrInfoMsg: {
      mutable_ul_sr_info_msg()->::protocol::flex_ul_sr_info::MergeFrom(from.ul_sr_info_msg());
      break;
    }
    case kEnbConfigRequestMsg: {
      mutable_enb_config_request_msg()->::protocol::flex_enb_config_request::MergeFrom(from.enb_config_request_msg());
      break;
    }
    case kEnbConfigReplyMsg: {
      mutable_enb_config_reply_msg()->::protocol::flex_enb_config_reply::MergeFrom(from.enb_config_reply_msg());
      break;
    }
    case kUeConfigRequestMsg: {
      mutable_ue_config_request_msg()->::protocol::flex_ue_config_request::MergeFrom(from.ue_config_request_msg());
      break;
    }
    case kUeConfigReplyMsg: {
      mutable_ue_config_reply_msg()->::protocol::flex_ue_config_reply::MergeFrom(from.ue_config_reply_msg());
      break;
    }
    case kLcConfigRequestMsg: {
      mutable_lc_config_request_msg()->::protocol::flex_lc_config_request::MergeFrom(from.lc_config_request_msg());
      break;
    }
    case kLcConfigReplyMsg: {
      mutable_lc_config_reply_msg()->::protocol::flex_lc_config_reply::MergeFrom(from.lc_config_reply_msg());
      break;
    }
    case kDlMacConfigMsg: {
      mutable_dl_mac_config_msg()->::protocol::flex_dl_mac_config::MergeFrom(from.dl_mac_config_msg());
      break;
    }
    case kUeStateChangeMsg: {
      mutable_ue_state_change_msg()->::protocol::flex_ue_state_change::MergeFrom(from.ue_state_change_msg());
      break;
    }
    case kControlDelegationMsg: {
      mutable_control_delegation_msg()->::protocol::flex_control_delegation::MergeFrom(from.control_delegation_msg());
      break;
    }
    case kAgentReconfigurationMsg: {
      mutable_agent_reconfiguration_msg()->::protocol::flex_agent_reconfiguration::MergeFrom(from.agent_reconfiguration_msg());
      break;
    }
    case kRrcTriggering: {
      mutable_rrc_triggering()->::protocol::flex_rrc_triggering::MergeFrom(from.rrc_triggering());
      break;
    }
    case kUlMacConfigMsg: {
      mutable_ul_mac_config_msg()->::protocol::flex_ul_mac_config::MergeFrom(from.ul_mac_config_msg());
      break;
    }
    case kDisconnectMsg: {
      mutable_disconnect_msg()->::protocol::flex_disconnect::MergeFrom(from.disconnect_msg());
      break;
    }
    case kHoCommand: {
      mutable_ho_command()->::protocol::flex_ho_command::MergeFrom(from.ho_command());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void flexran_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flexran_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flexran_message::CopyFrom(const flexran_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flexran_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flexran_message::IsInitialized() const {
  switch (msg_case()) {
    case kHelloMsg: {
      break;
    }
    case kEchoRequestMsg: {
      if (has_echo_request_msg()) {
        if (!this->echo_request_msg().IsInitialized()) return false;
      }
      break;
    }
    case kEchoReplyMsg: {
      if (has_echo_reply_msg()) {
        if (!this->echo_reply_msg().IsInitialized()) return false;
      }
      break;
    }
    case kStatsRequestMsg: {
      break;
    }
    case kStatsReplyMsg: {
      break;
    }
    case kSfTriggerMsg: {
      break;
    }
    case kUlSrInfoMsg: {
      break;
    }
    case kEnbConfigRequestMsg: {
      break;
    }
    case kEnbConfigReplyMsg: {
      break;
    }
    case kUeConfigRequestMsg: {
      break;
    }
    case kUeConfigReplyMsg: {
      break;
    }
    case kLcConfigRequestMsg: {
      break;
    }
    case kLcConfigReplyMsg: {
      break;
    }
    case kDlMacConfigMsg: {
      break;
    }
    case kUeStateChangeMsg: {
      break;
    }
    case kControlDelegationMsg: {
      break;
    }
    case kAgentReconfigurationMsg: {
      break;
    }
    case kRrcTriggering: {
      break;
    }
    case kUlMacConfigMsg: {
      break;
    }
    case kDisconnectMsg: {
      break;
    }
    case kHoCommand: {
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return true;
}

void flexran_message::Swap(flexran_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flexran_message::InternalSwap(flexran_message* other) {
  std::swap(msg_dir_, other->msg_dir_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flexran_message::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flexran_message

// optional .protocol.flexran_direction msg_dir = 100;
bool flexran_message::has_msg_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flexran_message::set_has_msg_dir() {
  _has_bits_[0] |= 0x00000001u;
}
void flexran_message::clear_has_msg_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
void flexran_message::clear_msg_dir() {
  msg_dir_ = 0;
  clear_has_msg_dir();
}
::protocol::flexran_direction flexran_message::msg_dir() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.msg_dir)
  return static_cast< ::protocol::flexran_direction >(msg_dir_);
}
void flexran_message::set_msg_dir(::protocol::flexran_direction value) {
  assert(::protocol::flexran_direction_IsValid(value));
  set_has_msg_dir();
  msg_dir_ = value;
  // @@protoc_insertion_point(field_set:protocol.flexran_message.msg_dir)
}

// optional .protocol.flex_hello hello_msg = 1;
bool flexran_message::has_hello_msg() const {
  return msg_case() == kHelloMsg;
}
void flexran_message::set_has_hello_msg() {
  _oneof_case_[0] = kHelloMsg;
}
void flexran_message::clear_hello_msg() {
  if (has_hello_msg()) {
    delete msg_.hello_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_hello& flexran_message::hello_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.hello_msg)
  return has_hello_msg()
      ? *msg_.hello_msg_
      : ::protocol::flex_hello::default_instance();
}
::protocol::flex_hello* flexran_message::mutable_hello_msg() {
  if (!has_hello_msg()) {
    clear_msg();
    set_has_hello_msg();
    msg_.hello_msg_ = new ::protocol::flex_hello;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.hello_msg)
  return msg_.hello_msg_;
}
::protocol::flex_hello* flexran_message::release_hello_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.hello_msg)
  if (has_hello_msg()) {
    clear_has_msg();
    ::protocol::flex_hello* temp = msg_.hello_msg_;
    msg_.hello_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_hello_msg(::protocol::flex_hello* hello_msg) {
  clear_msg();
  if (hello_msg) {
    set_has_hello_msg();
    msg_.hello_msg_ = hello_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.hello_msg)
}

// optional .protocol.flex_echo_request echo_request_msg = 2;
bool flexran_message::has_echo_request_msg() const {
  return msg_case() == kEchoRequestMsg;
}
void flexran_message::set_has_echo_request_msg() {
  _oneof_case_[0] = kEchoRequestMsg;
}
void flexran_message::clear_echo_request_msg() {
  if (has_echo_request_msg()) {
    delete msg_.echo_request_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_echo_request& flexran_message::echo_request_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.echo_request_msg)
  return has_echo_request_msg()
      ? *msg_.echo_request_msg_
      : ::protocol::flex_echo_request::default_instance();
}
::protocol::flex_echo_request* flexran_message::mutable_echo_request_msg() {
  if (!has_echo_request_msg()) {
    clear_msg();
    set_has_echo_request_msg();
    msg_.echo_request_msg_ = new ::protocol::flex_echo_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.echo_request_msg)
  return msg_.echo_request_msg_;
}
::protocol::flex_echo_request* flexran_message::release_echo_request_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.echo_request_msg)
  if (has_echo_request_msg()) {
    clear_has_msg();
    ::protocol::flex_echo_request* temp = msg_.echo_request_msg_;
    msg_.echo_request_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_echo_request_msg(::protocol::flex_echo_request* echo_request_msg) {
  clear_msg();
  if (echo_request_msg) {
    set_has_echo_request_msg();
    msg_.echo_request_msg_ = echo_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.echo_request_msg)
}

// optional .protocol.flex_echo_reply echo_reply_msg = 3;
bool flexran_message::has_echo_reply_msg() const {
  return msg_case() == kEchoReplyMsg;
}
void flexran_message::set_has_echo_reply_msg() {
  _oneof_case_[0] = kEchoReplyMsg;
}
void flexran_message::clear_echo_reply_msg() {
  if (has_echo_reply_msg()) {
    delete msg_.echo_reply_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_echo_reply& flexran_message::echo_reply_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.echo_reply_msg)
  return has_echo_reply_msg()
      ? *msg_.echo_reply_msg_
      : ::protocol::flex_echo_reply::default_instance();
}
::protocol::flex_echo_reply* flexran_message::mutable_echo_reply_msg() {
  if (!has_echo_reply_msg()) {
    clear_msg();
    set_has_echo_reply_msg();
    msg_.echo_reply_msg_ = new ::protocol::flex_echo_reply;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.echo_reply_msg)
  return msg_.echo_reply_msg_;
}
::protocol::flex_echo_reply* flexran_message::release_echo_reply_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.echo_reply_msg)
  if (has_echo_reply_msg()) {
    clear_has_msg();
    ::protocol::flex_echo_reply* temp = msg_.echo_reply_msg_;
    msg_.echo_reply_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_echo_reply_msg(::protocol::flex_echo_reply* echo_reply_msg) {
  clear_msg();
  if (echo_reply_msg) {
    set_has_echo_reply_msg();
    msg_.echo_reply_msg_ = echo_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.echo_reply_msg)
}

// optional .protocol.flex_stats_request stats_request_msg = 4;
bool flexran_message::has_stats_request_msg() const {
  return msg_case() == kStatsRequestMsg;
}
void flexran_message::set_has_stats_request_msg() {
  _oneof_case_[0] = kStatsRequestMsg;
}
void flexran_message::clear_stats_request_msg() {
  if (has_stats_request_msg()) {
    delete msg_.stats_request_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_stats_request& flexran_message::stats_request_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.stats_request_msg)
  return has_stats_request_msg()
      ? *msg_.stats_request_msg_
      : ::protocol::flex_stats_request::default_instance();
}
::protocol::flex_stats_request* flexran_message::mutable_stats_request_msg() {
  if (!has_stats_request_msg()) {
    clear_msg();
    set_has_stats_request_msg();
    msg_.stats_request_msg_ = new ::protocol::flex_stats_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.stats_request_msg)
  return msg_.stats_request_msg_;
}
::protocol::flex_stats_request* flexran_message::release_stats_request_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.stats_request_msg)
  if (has_stats_request_msg()) {
    clear_has_msg();
    ::protocol::flex_stats_request* temp = msg_.stats_request_msg_;
    msg_.stats_request_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_stats_request_msg(::protocol::flex_stats_request* stats_request_msg) {
  clear_msg();
  if (stats_request_msg) {
    set_has_stats_request_msg();
    msg_.stats_request_msg_ = stats_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.stats_request_msg)
}

// optional .protocol.flex_stats_reply stats_reply_msg = 5;
bool flexran_message::has_stats_reply_msg() const {
  return msg_case() == kStatsReplyMsg;
}
void flexran_message::set_has_stats_reply_msg() {
  _oneof_case_[0] = kStatsReplyMsg;
}
void flexran_message::clear_stats_reply_msg() {
  if (has_stats_reply_msg()) {
    delete msg_.stats_reply_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_stats_reply& flexran_message::stats_reply_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.stats_reply_msg)
  return has_stats_reply_msg()
      ? *msg_.stats_reply_msg_
      : ::protocol::flex_stats_reply::default_instance();
}
::protocol::flex_stats_reply* flexran_message::mutable_stats_reply_msg() {
  if (!has_stats_reply_msg()) {
    clear_msg();
    set_has_stats_reply_msg();
    msg_.stats_reply_msg_ = new ::protocol::flex_stats_reply;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.stats_reply_msg)
  return msg_.stats_reply_msg_;
}
::protocol::flex_stats_reply* flexran_message::release_stats_reply_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.stats_reply_msg)
  if (has_stats_reply_msg()) {
    clear_has_msg();
    ::protocol::flex_stats_reply* temp = msg_.stats_reply_msg_;
    msg_.stats_reply_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_stats_reply_msg(::protocol::flex_stats_reply* stats_reply_msg) {
  clear_msg();
  if (stats_reply_msg) {
    set_has_stats_reply_msg();
    msg_.stats_reply_msg_ = stats_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.stats_reply_msg)
}

// optional .protocol.flex_sf_trigger sf_trigger_msg = 6;
bool flexran_message::has_sf_trigger_msg() const {
  return msg_case() == kSfTriggerMsg;
}
void flexran_message::set_has_sf_trigger_msg() {
  _oneof_case_[0] = kSfTriggerMsg;
}
void flexran_message::clear_sf_trigger_msg() {
  if (has_sf_trigger_msg()) {
    delete msg_.sf_trigger_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_sf_trigger& flexran_message::sf_trigger_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.sf_trigger_msg)
  return has_sf_trigger_msg()
      ? *msg_.sf_trigger_msg_
      : ::protocol::flex_sf_trigger::default_instance();
}
::protocol::flex_sf_trigger* flexran_message::mutable_sf_trigger_msg() {
  if (!has_sf_trigger_msg()) {
    clear_msg();
    set_has_sf_trigger_msg();
    msg_.sf_trigger_msg_ = new ::protocol::flex_sf_trigger;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.sf_trigger_msg)
  return msg_.sf_trigger_msg_;
}
::protocol::flex_sf_trigger* flexran_message::release_sf_trigger_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.sf_trigger_msg)
  if (has_sf_trigger_msg()) {
    clear_has_msg();
    ::protocol::flex_sf_trigger* temp = msg_.sf_trigger_msg_;
    msg_.sf_trigger_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_sf_trigger_msg(::protocol::flex_sf_trigger* sf_trigger_msg) {
  clear_msg();
  if (sf_trigger_msg) {
    set_has_sf_trigger_msg();
    msg_.sf_trigger_msg_ = sf_trigger_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.sf_trigger_msg)
}

// optional .protocol.flex_ul_sr_info ul_sr_info_msg = 7;
bool flexran_message::has_ul_sr_info_msg() const {
  return msg_case() == kUlSrInfoMsg;
}
void flexran_message::set_has_ul_sr_info_msg() {
  _oneof_case_[0] = kUlSrInfoMsg;
}
void flexran_message::clear_ul_sr_info_msg() {
  if (has_ul_sr_info_msg()) {
    delete msg_.ul_sr_info_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_ul_sr_info& flexran_message::ul_sr_info_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.ul_sr_info_msg)
  return has_ul_sr_info_msg()
      ? *msg_.ul_sr_info_msg_
      : ::protocol::flex_ul_sr_info::default_instance();
}
::protocol::flex_ul_sr_info* flexran_message::mutable_ul_sr_info_msg() {
  if (!has_ul_sr_info_msg()) {
    clear_msg();
    set_has_ul_sr_info_msg();
    msg_.ul_sr_info_msg_ = new ::protocol::flex_ul_sr_info;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.ul_sr_info_msg)
  return msg_.ul_sr_info_msg_;
}
::protocol::flex_ul_sr_info* flexran_message::release_ul_sr_info_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.ul_sr_info_msg)
  if (has_ul_sr_info_msg()) {
    clear_has_msg();
    ::protocol::flex_ul_sr_info* temp = msg_.ul_sr_info_msg_;
    msg_.ul_sr_info_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_ul_sr_info_msg(::protocol::flex_ul_sr_info* ul_sr_info_msg) {
  clear_msg();
  if (ul_sr_info_msg) {
    set_has_ul_sr_info_msg();
    msg_.ul_sr_info_msg_ = ul_sr_info_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ul_sr_info_msg)
}

// optional .protocol.flex_enb_config_request enb_config_request_msg = 8;
bool flexran_message::has_enb_config_request_msg() const {
  return msg_case() == kEnbConfigRequestMsg;
}
void flexran_message::set_has_enb_config_request_msg() {
  _oneof_case_[0] = kEnbConfigRequestMsg;
}
void flexran_message::clear_enb_config_request_msg() {
  if (has_enb_config_request_msg()) {
    delete msg_.enb_config_request_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_enb_config_request& flexran_message::enb_config_request_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.enb_config_request_msg)
  return has_enb_config_request_msg()
      ? *msg_.enb_config_request_msg_
      : ::protocol::flex_enb_config_request::default_instance();
}
::protocol::flex_enb_config_request* flexran_message::mutable_enb_config_request_msg() {
  if (!has_enb_config_request_msg()) {
    clear_msg();
    set_has_enb_config_request_msg();
    msg_.enb_config_request_msg_ = new ::protocol::flex_enb_config_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.enb_config_request_msg)
  return msg_.enb_config_request_msg_;
}
::protocol::flex_enb_config_request* flexran_message::release_enb_config_request_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.enb_config_request_msg)
  if (has_enb_config_request_msg()) {
    clear_has_msg();
    ::protocol::flex_enb_config_request* temp = msg_.enb_config_request_msg_;
    msg_.enb_config_request_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_enb_config_request_msg(::protocol::flex_enb_config_request* enb_config_request_msg) {
  clear_msg();
  if (enb_config_request_msg) {
    set_has_enb_config_request_msg();
    msg_.enb_config_request_msg_ = enb_config_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.enb_config_request_msg)
}

// optional .protocol.flex_enb_config_reply enb_config_reply_msg = 9;
bool flexran_message::has_enb_config_reply_msg() const {
  return msg_case() == kEnbConfigReplyMsg;
}
void flexran_message::set_has_enb_config_reply_msg() {
  _oneof_case_[0] = kEnbConfigReplyMsg;
}
void flexran_message::clear_enb_config_reply_msg() {
  if (has_enb_config_reply_msg()) {
    delete msg_.enb_config_reply_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_enb_config_reply& flexran_message::enb_config_reply_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.enb_config_reply_msg)
  return has_enb_config_reply_msg()
      ? *msg_.enb_config_reply_msg_
      : ::protocol::flex_enb_config_reply::default_instance();
}
::protocol::flex_enb_config_reply* flexran_message::mutable_enb_config_reply_msg() {
  if (!has_enb_config_reply_msg()) {
    clear_msg();
    set_has_enb_config_reply_msg();
    msg_.enb_config_reply_msg_ = new ::protocol::flex_enb_config_reply;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.enb_config_reply_msg)
  return msg_.enb_config_reply_msg_;
}
::protocol::flex_enb_config_reply* flexran_message::release_enb_config_reply_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.enb_config_reply_msg)
  if (has_enb_config_reply_msg()) {
    clear_has_msg();
    ::protocol::flex_enb_config_reply* temp = msg_.enb_config_reply_msg_;
    msg_.enb_config_reply_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_enb_config_reply_msg(::protocol::flex_enb_config_reply* enb_config_reply_msg) {
  clear_msg();
  if (enb_config_reply_msg) {
    set_has_enb_config_reply_msg();
    msg_.enb_config_reply_msg_ = enb_config_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.enb_config_reply_msg)
}

// optional .protocol.flex_ue_config_request ue_config_request_msg = 10;
bool flexran_message::has_ue_config_request_msg() const {
  return msg_case() == kUeConfigRequestMsg;
}
void flexran_message::set_has_ue_config_request_msg() {
  _oneof_case_[0] = kUeConfigRequestMsg;
}
void flexran_message::clear_ue_config_request_msg() {
  if (has_ue_config_request_msg()) {
    delete msg_.ue_config_request_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_ue_config_request& flexran_message::ue_config_request_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.ue_config_request_msg)
  return has_ue_config_request_msg()
      ? *msg_.ue_config_request_msg_
      : ::protocol::flex_ue_config_request::default_instance();
}
::protocol::flex_ue_config_request* flexran_message::mutable_ue_config_request_msg() {
  if (!has_ue_config_request_msg()) {
    clear_msg();
    set_has_ue_config_request_msg();
    msg_.ue_config_request_msg_ = new ::protocol::flex_ue_config_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.ue_config_request_msg)
  return msg_.ue_config_request_msg_;
}
::protocol::flex_ue_config_request* flexran_message::release_ue_config_request_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.ue_config_request_msg)
  if (has_ue_config_request_msg()) {
    clear_has_msg();
    ::protocol::flex_ue_config_request* temp = msg_.ue_config_request_msg_;
    msg_.ue_config_request_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_ue_config_request_msg(::protocol::flex_ue_config_request* ue_config_request_msg) {
  clear_msg();
  if (ue_config_request_msg) {
    set_has_ue_config_request_msg();
    msg_.ue_config_request_msg_ = ue_config_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ue_config_request_msg)
}

// optional .protocol.flex_ue_config_reply ue_config_reply_msg = 11;
bool flexran_message::has_ue_config_reply_msg() const {
  return msg_case() == kUeConfigReplyMsg;
}
void flexran_message::set_has_ue_config_reply_msg() {
  _oneof_case_[0] = kUeConfigReplyMsg;
}
void flexran_message::clear_ue_config_reply_msg() {
  if (has_ue_config_reply_msg()) {
    delete msg_.ue_config_reply_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_ue_config_reply& flexran_message::ue_config_reply_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.ue_config_reply_msg)
  return has_ue_config_reply_msg()
      ? *msg_.ue_config_reply_msg_
      : ::protocol::flex_ue_config_reply::default_instance();
}
::protocol::flex_ue_config_reply* flexran_message::mutable_ue_config_reply_msg() {
  if (!has_ue_config_reply_msg()) {
    clear_msg();
    set_has_ue_config_reply_msg();
    msg_.ue_config_reply_msg_ = new ::protocol::flex_ue_config_reply;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.ue_config_reply_msg)
  return msg_.ue_config_reply_msg_;
}
::protocol::flex_ue_config_reply* flexran_message::release_ue_config_reply_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.ue_config_reply_msg)
  if (has_ue_config_reply_msg()) {
    clear_has_msg();
    ::protocol::flex_ue_config_reply* temp = msg_.ue_config_reply_msg_;
    msg_.ue_config_reply_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_ue_config_reply_msg(::protocol::flex_ue_config_reply* ue_config_reply_msg) {
  clear_msg();
  if (ue_config_reply_msg) {
    set_has_ue_config_reply_msg();
    msg_.ue_config_reply_msg_ = ue_config_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ue_config_reply_msg)
}

// optional .protocol.flex_lc_config_request lc_config_request_msg = 12;
bool flexran_message::has_lc_config_request_msg() const {
  return msg_case() == kLcConfigRequestMsg;
}
void flexran_message::set_has_lc_config_request_msg() {
  _oneof_case_[0] = kLcConfigRequestMsg;
}
void flexran_message::clear_lc_config_request_msg() {
  if (has_lc_config_request_msg()) {
    delete msg_.lc_config_request_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_lc_config_request& flexran_message::lc_config_request_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.lc_config_request_msg)
  return has_lc_config_request_msg()
      ? *msg_.lc_config_request_msg_
      : ::protocol::flex_lc_config_request::default_instance();
}
::protocol::flex_lc_config_request* flexran_message::mutable_lc_config_request_msg() {
  if (!has_lc_config_request_msg()) {
    clear_msg();
    set_has_lc_config_request_msg();
    msg_.lc_config_request_msg_ = new ::protocol::flex_lc_config_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.lc_config_request_msg)
  return msg_.lc_config_request_msg_;
}
::protocol::flex_lc_config_request* flexran_message::release_lc_config_request_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.lc_config_request_msg)
  if (has_lc_config_request_msg()) {
    clear_has_msg();
    ::protocol::flex_lc_config_request* temp = msg_.lc_config_request_msg_;
    msg_.lc_config_request_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_lc_config_request_msg(::protocol::flex_lc_config_request* lc_config_request_msg) {
  clear_msg();
  if (lc_config_request_msg) {
    set_has_lc_config_request_msg();
    msg_.lc_config_request_msg_ = lc_config_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.lc_config_request_msg)
}

// optional .protocol.flex_lc_config_reply lc_config_reply_msg = 13;
bool flexran_message::has_lc_config_reply_msg() const {
  return msg_case() == kLcConfigReplyMsg;
}
void flexran_message::set_has_lc_config_reply_msg() {
  _oneof_case_[0] = kLcConfigReplyMsg;
}
void flexran_message::clear_lc_config_reply_msg() {
  if (has_lc_config_reply_msg()) {
    delete msg_.lc_config_reply_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_lc_config_reply& flexran_message::lc_config_reply_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.lc_config_reply_msg)
  return has_lc_config_reply_msg()
      ? *msg_.lc_config_reply_msg_
      : ::protocol::flex_lc_config_reply::default_instance();
}
::protocol::flex_lc_config_reply* flexran_message::mutable_lc_config_reply_msg() {
  if (!has_lc_config_reply_msg()) {
    clear_msg();
    set_has_lc_config_reply_msg();
    msg_.lc_config_reply_msg_ = new ::protocol::flex_lc_config_reply;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.lc_config_reply_msg)
  return msg_.lc_config_reply_msg_;
}
::protocol::flex_lc_config_reply* flexran_message::release_lc_config_reply_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.lc_config_reply_msg)
  if (has_lc_config_reply_msg()) {
    clear_has_msg();
    ::protocol::flex_lc_config_reply* temp = msg_.lc_config_reply_msg_;
    msg_.lc_config_reply_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_lc_config_reply_msg(::protocol::flex_lc_config_reply* lc_config_reply_msg) {
  clear_msg();
  if (lc_config_reply_msg) {
    set_has_lc_config_reply_msg();
    msg_.lc_config_reply_msg_ = lc_config_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.lc_config_reply_msg)
}

// optional .protocol.flex_dl_mac_config dl_mac_config_msg = 14;
bool flexran_message::has_dl_mac_config_msg() const {
  return msg_case() == kDlMacConfigMsg;
}
void flexran_message::set_has_dl_mac_config_msg() {
  _oneof_case_[0] = kDlMacConfigMsg;
}
void flexran_message::clear_dl_mac_config_msg() {
  if (has_dl_mac_config_msg()) {
    delete msg_.dl_mac_config_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_dl_mac_config& flexran_message::dl_mac_config_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.dl_mac_config_msg)
  return has_dl_mac_config_msg()
      ? *msg_.dl_mac_config_msg_
      : ::protocol::flex_dl_mac_config::default_instance();
}
::protocol::flex_dl_mac_config* flexran_message::mutable_dl_mac_config_msg() {
  if (!has_dl_mac_config_msg()) {
    clear_msg();
    set_has_dl_mac_config_msg();
    msg_.dl_mac_config_msg_ = new ::protocol::flex_dl_mac_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.dl_mac_config_msg)
  return msg_.dl_mac_config_msg_;
}
::protocol::flex_dl_mac_config* flexran_message::release_dl_mac_config_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.dl_mac_config_msg)
  if (has_dl_mac_config_msg()) {
    clear_has_msg();
    ::protocol::flex_dl_mac_config* temp = msg_.dl_mac_config_msg_;
    msg_.dl_mac_config_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_dl_mac_config_msg(::protocol::flex_dl_mac_config* dl_mac_config_msg) {
  clear_msg();
  if (dl_mac_config_msg) {
    set_has_dl_mac_config_msg();
    msg_.dl_mac_config_msg_ = dl_mac_config_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.dl_mac_config_msg)
}

// optional .protocol.flex_ue_state_change ue_state_change_msg = 15;
bool flexran_message::has_ue_state_change_msg() const {
  return msg_case() == kUeStateChangeMsg;
}
void flexran_message::set_has_ue_state_change_msg() {
  _oneof_case_[0] = kUeStateChangeMsg;
}
void flexran_message::clear_ue_state_change_msg() {
  if (has_ue_state_change_msg()) {
    delete msg_.ue_state_change_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_ue_state_change& flexran_message::ue_state_change_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.ue_state_change_msg)
  return has_ue_state_change_msg()
      ? *msg_.ue_state_change_msg_
      : ::protocol::flex_ue_state_change::default_instance();
}
::protocol::flex_ue_state_change* flexran_message::mutable_ue_state_change_msg() {
  if (!has_ue_state_change_msg()) {
    clear_msg();
    set_has_ue_state_change_msg();
    msg_.ue_state_change_msg_ = new ::protocol::flex_ue_state_change;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.ue_state_change_msg)
  return msg_.ue_state_change_msg_;
}
::protocol::flex_ue_state_change* flexran_message::release_ue_state_change_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.ue_state_change_msg)
  if (has_ue_state_change_msg()) {
    clear_has_msg();
    ::protocol::flex_ue_state_change* temp = msg_.ue_state_change_msg_;
    msg_.ue_state_change_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_ue_state_change_msg(::protocol::flex_ue_state_change* ue_state_change_msg) {
  clear_msg();
  if (ue_state_change_msg) {
    set_has_ue_state_change_msg();
    msg_.ue_state_change_msg_ = ue_state_change_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ue_state_change_msg)
}

// optional .protocol.flex_control_delegation control_delegation_msg = 16;
bool flexran_message::has_control_delegation_msg() const {
  return msg_case() == kControlDelegationMsg;
}
void flexran_message::set_has_control_delegation_msg() {
  _oneof_case_[0] = kControlDelegationMsg;
}
void flexran_message::clear_control_delegation_msg() {
  if (has_control_delegation_msg()) {
    delete msg_.control_delegation_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_control_delegation& flexran_message::control_delegation_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.control_delegation_msg)
  return has_control_delegation_msg()
      ? *msg_.control_delegation_msg_
      : ::protocol::flex_control_delegation::default_instance();
}
::protocol::flex_control_delegation* flexran_message::mutable_control_delegation_msg() {
  if (!has_control_delegation_msg()) {
    clear_msg();
    set_has_control_delegation_msg();
    msg_.control_delegation_msg_ = new ::protocol::flex_control_delegation;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.control_delegation_msg)
  return msg_.control_delegation_msg_;
}
::protocol::flex_control_delegation* flexran_message::release_control_delegation_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.control_delegation_msg)
  if (has_control_delegation_msg()) {
    clear_has_msg();
    ::protocol::flex_control_delegation* temp = msg_.control_delegation_msg_;
    msg_.control_delegation_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_control_delegation_msg(::protocol::flex_control_delegation* control_delegation_msg) {
  clear_msg();
  if (control_delegation_msg) {
    set_has_control_delegation_msg();
    msg_.control_delegation_msg_ = control_delegation_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.control_delegation_msg)
}

// optional .protocol.flex_agent_reconfiguration agent_reconfiguration_msg = 17;
bool flexran_message::has_agent_reconfiguration_msg() const {
  return msg_case() == kAgentReconfigurationMsg;
}
void flexran_message::set_has_agent_reconfiguration_msg() {
  _oneof_case_[0] = kAgentReconfigurationMsg;
}
void flexran_message::clear_agent_reconfiguration_msg() {
  if (has_agent_reconfiguration_msg()) {
    delete msg_.agent_reconfiguration_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_agent_reconfiguration& flexran_message::agent_reconfiguration_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.agent_reconfiguration_msg)
  return has_agent_reconfiguration_msg()
      ? *msg_.agent_reconfiguration_msg_
      : ::protocol::flex_agent_reconfiguration::default_instance();
}
::protocol::flex_agent_reconfiguration* flexran_message::mutable_agent_reconfiguration_msg() {
  if (!has_agent_reconfiguration_msg()) {
    clear_msg();
    set_has_agent_reconfiguration_msg();
    msg_.agent_reconfiguration_msg_ = new ::protocol::flex_agent_reconfiguration;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.agent_reconfiguration_msg)
  return msg_.agent_reconfiguration_msg_;
}
::protocol::flex_agent_reconfiguration* flexran_message::release_agent_reconfiguration_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.agent_reconfiguration_msg)
  if (has_agent_reconfiguration_msg()) {
    clear_has_msg();
    ::protocol::flex_agent_reconfiguration* temp = msg_.agent_reconfiguration_msg_;
    msg_.agent_reconfiguration_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_agent_reconfiguration_msg(::protocol::flex_agent_reconfiguration* agent_reconfiguration_msg) {
  clear_msg();
  if (agent_reconfiguration_msg) {
    set_has_agent_reconfiguration_msg();
    msg_.agent_reconfiguration_msg_ = agent_reconfiguration_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.agent_reconfiguration_msg)
}

// optional .protocol.flex_rrc_triggering rrc_triggering = 18;
bool flexran_message::has_rrc_triggering() const {
  return msg_case() == kRrcTriggering;
}
void flexran_message::set_has_rrc_triggering() {
  _oneof_case_[0] = kRrcTriggering;
}
void flexran_message::clear_rrc_triggering() {
  if (has_rrc_triggering()) {
    delete msg_.rrc_triggering_;
    clear_has_msg();
  }
}
 const ::protocol::flex_rrc_triggering& flexran_message::rrc_triggering() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.rrc_triggering)
  return has_rrc_triggering()
      ? *msg_.rrc_triggering_
      : ::protocol::flex_rrc_triggering::default_instance();
}
::protocol::flex_rrc_triggering* flexran_message::mutable_rrc_triggering() {
  if (!has_rrc_triggering()) {
    clear_msg();
    set_has_rrc_triggering();
    msg_.rrc_triggering_ = new ::protocol::flex_rrc_triggering;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.rrc_triggering)
  return msg_.rrc_triggering_;
}
::protocol::flex_rrc_triggering* flexran_message::release_rrc_triggering() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.rrc_triggering)
  if (has_rrc_triggering()) {
    clear_has_msg();
    ::protocol::flex_rrc_triggering* temp = msg_.rrc_triggering_;
    msg_.rrc_triggering_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_rrc_triggering(::protocol::flex_rrc_triggering* rrc_triggering) {
  clear_msg();
  if (rrc_triggering) {
    set_has_rrc_triggering();
    msg_.rrc_triggering_ = rrc_triggering;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.rrc_triggering)
}

// optional .protocol.flex_ul_mac_config ul_mac_config_msg = 19;
bool flexran_message::has_ul_mac_config_msg() const {
  return msg_case() == kUlMacConfigMsg;
}
void flexran_message::set_has_ul_mac_config_msg() {
  _oneof_case_[0] = kUlMacConfigMsg;
}
void flexran_message::clear_ul_mac_config_msg() {
  if (has_ul_mac_config_msg()) {
    delete msg_.ul_mac_config_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_ul_mac_config& flexran_message::ul_mac_config_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.ul_mac_config_msg)
  return has_ul_mac_config_msg()
      ? *msg_.ul_mac_config_msg_
      : ::protocol::flex_ul_mac_config::default_instance();
}
::protocol::flex_ul_mac_config* flexran_message::mutable_ul_mac_config_msg() {
  if (!has_ul_mac_config_msg()) {
    clear_msg();
    set_has_ul_mac_config_msg();
    msg_.ul_mac_config_msg_ = new ::protocol::flex_ul_mac_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.ul_mac_config_msg)
  return msg_.ul_mac_config_msg_;
}
::protocol::flex_ul_mac_config* flexran_message::release_ul_mac_config_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.ul_mac_config_msg)
  if (has_ul_mac_config_msg()) {
    clear_has_msg();
    ::protocol::flex_ul_mac_config* temp = msg_.ul_mac_config_msg_;
    msg_.ul_mac_config_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_ul_mac_config_msg(::protocol::flex_ul_mac_config* ul_mac_config_msg) {
  clear_msg();
  if (ul_mac_config_msg) {
    set_has_ul_mac_config_msg();
    msg_.ul_mac_config_msg_ = ul_mac_config_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ul_mac_config_msg)
}

// optional .protocol.flex_disconnect disconnect_msg = 20;
bool flexran_message::has_disconnect_msg() const {
  return msg_case() == kDisconnectMsg;
}
void flexran_message::set_has_disconnect_msg() {
  _oneof_case_[0] = kDisconnectMsg;
}
void flexran_message::clear_disconnect_msg() {
  if (has_disconnect_msg()) {
    delete msg_.disconnect_msg_;
    clear_has_msg();
  }
}
 const ::protocol::flex_disconnect& flexran_message::disconnect_msg() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.disconnect_msg)
  return has_disconnect_msg()
      ? *msg_.disconnect_msg_
      : ::protocol::flex_disconnect::default_instance();
}
::protocol::flex_disconnect* flexran_message::mutable_disconnect_msg() {
  if (!has_disconnect_msg()) {
    clear_msg();
    set_has_disconnect_msg();
    msg_.disconnect_msg_ = new ::protocol::flex_disconnect;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.disconnect_msg)
  return msg_.disconnect_msg_;
}
::protocol::flex_disconnect* flexran_message::release_disconnect_msg() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.disconnect_msg)
  if (has_disconnect_msg()) {
    clear_has_msg();
    ::protocol::flex_disconnect* temp = msg_.disconnect_msg_;
    msg_.disconnect_msg_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_disconnect_msg(::protocol::flex_disconnect* disconnect_msg) {
  clear_msg();
  if (disconnect_msg) {
    set_has_disconnect_msg();
    msg_.disconnect_msg_ = disconnect_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.disconnect_msg)
}

// optional .protocol.flex_ho_command ho_command = 21;
bool flexran_message::has_ho_command() const {
  return msg_case() == kHoCommand;
}
void flexran_message::set_has_ho_command() {
  _oneof_case_[0] = kHoCommand;
}
void flexran_message::clear_ho_command() {
  if (has_ho_command()) {
    delete msg_.ho_command_;
    clear_has_msg();
  }
}
 const ::protocol::flex_ho_command& flexran_message::ho_command() const {
  // @@protoc_insertion_point(field_get:protocol.flexran_message.ho_command)
  return has_ho_command()
      ? *msg_.ho_command_
      : ::protocol::flex_ho_command::default_instance();
}
::protocol::flex_ho_command* flexran_message::mutable_ho_command() {
  if (!has_ho_command()) {
    clear_msg();
    set_has_ho_command();
    msg_.ho_command_ = new ::protocol::flex_ho_command;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flexran_message.ho_command)
  return msg_.ho_command_;
}
::protocol::flex_ho_command* flexran_message::release_ho_command() {
  // @@protoc_insertion_point(field_release:protocol.flexran_message.ho_command)
  if (has_ho_command()) {
    clear_has_msg();
    ::protocol::flex_ho_command* temp = msg_.ho_command_;
    msg_.ho_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flexran_message::set_allocated_ho_command(::protocol::flex_ho_command* ho_command) {
  clear_msg();
  if (ho_command) {
    set_has_ho_command();
    msg_.ho_command_ = ho_command;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ho_command)
}

bool flexran_message::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void flexran_message::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
flexran_message::MsgCase flexran_message::msg_case() const {
  return flexran_message::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_hello::kHeaderFieldNumber;
const int flex_hello::kBsIdFieldNumber;
const int flex_hello::kCapabilitiesFieldNumber;
const int flex_hello::kSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_hello::flex_hello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_hello)
}
flex_hello::flex_hello(const flex_hello& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      capabilities_(from.capabilities_),
      splits_(from.splits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  bs_id_ = from.bs_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_hello)
}

void flex_hello::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&bs_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(bs_id_));
}

flex_hello::~flex_hello() {
  // @@protoc_insertion_point(destructor:protocol.flex_hello)
  SharedDtor();
}

void flex_hello::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_hello::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_hello& flex_hello::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_hello* flex_hello::New(::google::protobuf::Arena* arena) const {
  flex_hello* n = new flex_hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_hello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_hello)
  capabilities_.Clear();
  splits_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  bs_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bs_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bs_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bs_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_bs_capability capabilities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_bs_capability_IsValid(value)) {
            add_capabilities(static_cast< ::protocol::flex_bs_capability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::protocol::flex_bs_capability_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_capabilities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_bs_split splits = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_bs_split_IsValid(value)) {
            add_splits(static_cast< ::protocol::flex_bs_split >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 4,
                 ::protocol::flex_bs_split_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_splits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_hello)
  return false;
#undef DO_
}

void flex_hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_hello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 bs_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bs_id(), output);
  }

  // repeated .protocol.flex_bs_capability capabilities = 3;
  for (int i = 0, n = this->capabilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->capabilities(i), output);
  }

  // repeated .protocol.flex_bs_split splits = 4;
  for (int i = 0, n = this->splits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->splits(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_hello)
}

::google::protobuf::uint8* flex_hello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_hello)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint64 bs_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bs_id(), target);
  }

  // repeated .protocol.flex_bs_capability capabilities = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->capabilities_, target);

  // repeated .protocol.flex_bs_split splits = 4;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    4, this->splits_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_hello)
  return target;
}

size_t flex_hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_hello)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_bs_capability capabilities = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->capabilities_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->capabilities(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .protocol.flex_bs_split splits = 4;
  {
    size_t data_size = 0;
    unsigned int count = this->splits_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->splits(i));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint64 bs_id = 2;
    if (has_bs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bs_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_hello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_hello)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_hello* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_hello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_hello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_hello)
    MergeFrom(*source);
  }
}

void flex_hello::MergeFrom(const flex_hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
  splits_.MergeFrom(from.splits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      bs_id_ = from.bs_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_hello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_hello::CopyFrom(const flex_hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_hello::IsInitialized() const {
  return true;
}

void flex_hello::Swap(flex_hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_hello::InternalSwap(flex_hello* other) {
  capabilities_.InternalSwap(&other->capabilities_);
  splits_.InternalSwap(&other->splits_);
  std::swap(header_, other->header_);
  std::swap(bs_id_, other->bs_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_hello::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_hello

// optional .protocol.flex_header header = 1;
bool flex_hello::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_hello::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_hello::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_hello::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_hello::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_hello.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_hello::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_hello.header)
  return header_;
}
::protocol::flex_header* flex_hello::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_hello.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_hello::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_hello.header)
}

// optional uint64 bs_id = 2;
bool flex_hello::has_bs_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_hello::set_has_bs_id() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_hello::clear_has_bs_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_hello::clear_bs_id() {
  bs_id_ = GOOGLE_ULONGLONG(0);
  clear_has_bs_id();
}
::google::protobuf::uint64 flex_hello::bs_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_hello.bs_id)
  return bs_id_;
}
void flex_hello::set_bs_id(::google::protobuf::uint64 value) {
  set_has_bs_id();
  bs_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_hello.bs_id)
}

// repeated .protocol.flex_bs_capability capabilities = 3;
int flex_hello::capabilities_size() const {
  return capabilities_.size();
}
void flex_hello::clear_capabilities() {
  capabilities_.Clear();
}
::protocol::flex_bs_capability flex_hello::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_hello.capabilities)
  return static_cast< ::protocol::flex_bs_capability >(capabilities_.Get(index));
}
void flex_hello::set_capabilities(int index, ::protocol::flex_bs_capability value) {
  assert(::protocol::flex_bs_capability_IsValid(value));
  capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_hello.capabilities)
}
void flex_hello::add_capabilities(::protocol::flex_bs_capability value) {
  assert(::protocol::flex_bs_capability_IsValid(value));
  capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_hello.capabilities)
}
const ::google::protobuf::RepeatedField<int>&
flex_hello::capabilities() const {
  // @@protoc_insertion_point(field_list:protocol.flex_hello.capabilities)
  return capabilities_;
}
::google::protobuf::RepeatedField<int>*
flex_hello::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_hello.capabilities)
  return &capabilities_;
}

// repeated .protocol.flex_bs_split splits = 4;
int flex_hello::splits_size() const {
  return splits_.size();
}
void flex_hello::clear_splits() {
  splits_.Clear();
}
::protocol::flex_bs_split flex_hello::splits(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_hello.splits)
  return static_cast< ::protocol::flex_bs_split >(splits_.Get(index));
}
void flex_hello::set_splits(int index, ::protocol::flex_bs_split value) {
  assert(::protocol::flex_bs_split_IsValid(value));
  splits_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_hello.splits)
}
void flex_hello::add_splits(::protocol::flex_bs_split value) {
  assert(::protocol::flex_bs_split_IsValid(value));
  splits_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_hello.splits)
}
const ::google::protobuf::RepeatedField<int>&
flex_hello::splits() const {
  // @@protoc_insertion_point(field_list:protocol.flex_hello.splits)
  return splits_;
}
::google::protobuf::RepeatedField<int>*
flex_hello::mutable_splits() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_hello.splits)
  return &splits_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_echo_request::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_echo_request::flex_echo_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_echo_request)
}
flex_echo_request::flex_echo_request(const flex_echo_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_request)
}

void flex_echo_request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_echo_request::~flex_echo_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_request)
  SharedDtor();
}

void flex_echo_request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_echo_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_echo_request::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_echo_request& flex_echo_request::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_echo_request* flex_echo_request::New(::google::protobuf::Arena* arena) const {
  flex_echo_request* n = new flex_echo_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_echo_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_request)
  _extensions_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_echo_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_echo_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_echo_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_echo_request)
  return false;
#undef DO_
}

void flex_echo_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_echo_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_echo_request)
}

::google::protobuf::uint8* flex_echo_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // Extension range [100, 200)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 200, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_request)
  return target;
}

size_t flex_echo_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_request)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_echo_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_echo_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_request)
    MergeFrom(*source);
  }
}

void flex_echo_request::MergeFrom(const flex_echo_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_request)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_echo_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_request::CopyFrom(const flex_echo_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_request::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void flex_echo_request::Swap(flex_echo_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_echo_request::InternalSwap(flex_echo_request* other) {
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata flex_echo_request::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_echo_request

// optional .protocol.flex_header header = 1;
bool flex_echo_request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_echo_request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_echo_request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_echo_request::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_echo_request::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_echo_request.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_echo_request::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_echo_request.header)
  return header_;
}
::protocol::flex_header* flex_echo_request::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_echo_request.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_echo_request::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_echo_request.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_echo_reply::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_echo_reply::flex_echo_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_echo_reply)
}
flex_echo_reply::flex_echo_reply(const flex_echo_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_reply)
}

void flex_echo_reply::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_echo_reply::~flex_echo_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_reply)
  SharedDtor();
}

void flex_echo_reply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_echo_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_echo_reply::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_echo_reply& flex_echo_reply::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_echo_reply* flex_echo_reply::New(::google::protobuf::Arena* arena) const {
  flex_echo_reply* n = new flex_echo_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_echo_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_reply)
  _extensions_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_echo_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_echo_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_echo_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_echo_reply)
  return false;
#undef DO_
}

void flex_echo_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_echo_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_echo_reply)
}

::google::protobuf::uint8* flex_echo_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // Extension range [100, 200)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 200, deterministic, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_reply)
  return target;
}

size_t flex_echo_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_reply)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_echo_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_echo_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_reply)
    MergeFrom(*source);
  }
}

void flex_echo_reply::MergeFrom(const flex_echo_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_echo_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_reply::CopyFrom(const flex_echo_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_reply::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void flex_echo_reply::Swap(flex_echo_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_echo_reply::InternalSwap(flex_echo_reply* other) {
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata flex_echo_reply::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_echo_reply

// optional .protocol.flex_header header = 1;
bool flex_echo_reply::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_echo_reply::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_echo_reply::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_echo_reply::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_echo_reply::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_echo_reply.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_echo_reply::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_echo_reply.header)
  return header_;
}
::protocol::flex_header* flex_echo_reply::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_echo_reply.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_echo_reply::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_echo_reply.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_stats_request::kHeaderFieldNumber;
const int flex_stats_request::kTypeFieldNumber;
const int flex_stats_request::kCompleteStatsRequestFieldNumber;
const int flex_stats_request::kCellStatsRequestFieldNumber;
const int flex_stats_request::kUeStatsRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_stats_request::flex_stats_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_stats_request)
}
flex_stats_request::flex_stats_request(const flex_stats_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  type_ = from.type_;
  clear_has_body();
  switch (from.body_case()) {
    case kCompleteStatsRequest: {
      mutable_complete_stats_request()->::protocol::flex_complete_stats_request::MergeFrom(from.complete_stats_request());
      break;
    }
    case kCellStatsRequest: {
      mutable_cell_stats_request()->::protocol::flex_cell_stats_request::MergeFrom(from.cell_stats_request());
      break;
    }
    case kUeStatsRequest: {
      mutable_ue_stats_request()->::protocol::flex_ue_stats_request::MergeFrom(from.ue_stats_request());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_stats_request)
}

void flex_stats_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&header_) + sizeof(type_));
  clear_has_body();
}

flex_stats_request::~flex_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_stats_request)
  SharedDtor();
}

void flex_stats_request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (has_body()) {
    clear_body();
  }
}

void flex_stats_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_stats_request::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_stats_request& flex_stats_request::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_stats_request* flex_stats_request::New(::google::protobuf::Arena* arena) const {
  flex_stats_request* n = new flex_stats_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_stats_request::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flex_stats_request)
  switch (body_case()) {
    case kCompleteStatsRequest: {
      delete body_.complete_stats_request_;
      break;
    }
    case kCellStatsRequest: {
      delete body_.cell_stats_request_;
      break;
    }
    case kUeStatsRequest: {
      delete body_.ue_stats_request_;
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void flex_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_stats_request)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  type_ = 0;
  clear_body();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_stats_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_stats_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_stats_type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_stats_type_IsValid(value)) {
            set_type(static_cast< ::protocol::flex_stats_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_complete_stats_request complete_stats_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_complete_stats_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_cell_stats_request cell_stats_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_stats_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ue_stats_request ue_stats_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ue_stats_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_stats_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_stats_request)
  return false;
#undef DO_
}

void flex_stats_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .protocol.flex_stats_type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  switch (body_case()) {
    case kCompleteStatsRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *body_.complete_stats_request_, output);
      break;
    case kCellStatsRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *body_.cell_stats_request_, output);
      break;
    case kUeStatsRequest:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *body_.ue_stats_request_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_stats_request)
}

::google::protobuf::uint8* flex_stats_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .protocol.flex_stats_type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  switch (body_case()) {
    case kCompleteStatsRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *body_.complete_stats_request_, deterministic, target);
      break;
    case kCellStatsRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *body_.cell_stats_request_, deterministic, target);
      break;
    case kUeStatsRequest:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *body_.ue_stats_request_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_stats_request)
  return target;
}

size_t flex_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_stats_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .protocol.flex_stats_type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (body_case()) {
    // optional .protocol.flex_complete_stats_request complete_stats_request = 3;
    case kCompleteStatsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.complete_stats_request_);
      break;
    }
    // optional .protocol.flex_cell_stats_request cell_stats_request = 4;
    case kCellStatsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.cell_stats_request_);
      break;
    }
    // optional .protocol.flex_ue_stats_request ue_stats_request = 5;
    case kUeStatsRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *body_.ue_stats_request_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_stats_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_stats_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_stats_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_stats_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_stats_request)
    MergeFrom(*source);
  }
}

void flex_stats_request::MergeFrom(const flex_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.body_case()) {
    case kCompleteStatsRequest: {
      mutable_complete_stats_request()->::protocol::flex_complete_stats_request::MergeFrom(from.complete_stats_request());
      break;
    }
    case kCellStatsRequest: {
      mutable_cell_stats_request()->::protocol::flex_cell_stats_request::MergeFrom(from.cell_stats_request());
      break;
    }
    case kUeStatsRequest: {
      mutable_ue_stats_request()->::protocol::flex_ue_stats_request::MergeFrom(from.ue_stats_request());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void flex_stats_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_stats_request::CopyFrom(const flex_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_stats_request::IsInitialized() const {
  return true;
}

void flex_stats_request::Swap(flex_stats_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_stats_request::InternalSwap(flex_stats_request* other) {
  std::swap(header_, other->header_);
  std::swap(type_, other->type_);
  std::swap(body_, other->body_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_stats_request::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_stats_request

// optional .protocol.flex_header header = 1;
bool flex_stats_request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_stats_request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_stats_request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_stats_request::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_stats_request::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_request.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_stats_request::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_request.header)
  return header_;
}
::protocol::flex_header* flex_stats_request::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_stats_request.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_stats_request::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.header)
}

// optional .protocol.flex_stats_type type = 2;
bool flex_stats_request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_stats_request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_stats_request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_stats_request::clear_type() {
  type_ = 0;
  clear_has_type();
}
::protocol::flex_stats_type flex_stats_request::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_request.type)
  return static_cast< ::protocol::flex_stats_type >(type_);
}
void flex_stats_request::set_type(::protocol::flex_stats_type value) {
  assert(::protocol::flex_stats_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_stats_request.type)
}

// optional .protocol.flex_complete_stats_request complete_stats_request = 3;
bool flex_stats_request::has_complete_stats_request() const {
  return body_case() == kCompleteStatsRequest;
}
void flex_stats_request::set_has_complete_stats_request() {
  _oneof_case_[0] = kCompleteStatsRequest;
}
void flex_stats_request::clear_complete_stats_request() {
  if (has_complete_stats_request()) {
    delete body_.complete_stats_request_;
    clear_has_body();
  }
}
 const ::protocol::flex_complete_stats_request& flex_stats_request::complete_stats_request() const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_request.complete_stats_request)
  return has_complete_stats_request()
      ? *body_.complete_stats_request_
      : ::protocol::flex_complete_stats_request::default_instance();
}
::protocol::flex_complete_stats_request* flex_stats_request::mutable_complete_stats_request() {
  if (!has_complete_stats_request()) {
    clear_body();
    set_has_complete_stats_request();
    body_.complete_stats_request_ = new ::protocol::flex_complete_stats_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_request.complete_stats_request)
  return body_.complete_stats_request_;
}
::protocol::flex_complete_stats_request* flex_stats_request::release_complete_stats_request() {
  // @@protoc_insertion_point(field_release:protocol.flex_stats_request.complete_stats_request)
  if (has_complete_stats_request()) {
    clear_has_body();
    ::protocol::flex_complete_stats_request* temp = body_.complete_stats_request_;
    body_.complete_stats_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_stats_request::set_allocated_complete_stats_request(::protocol::flex_complete_stats_request* complete_stats_request) {
  clear_body();
  if (complete_stats_request) {
    set_has_complete_stats_request();
    body_.complete_stats_request_ = complete_stats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.complete_stats_request)
}

// optional .protocol.flex_cell_stats_request cell_stats_request = 4;
bool flex_stats_request::has_cell_stats_request() const {
  return body_case() == kCellStatsRequest;
}
void flex_stats_request::set_has_cell_stats_request() {
  _oneof_case_[0] = kCellStatsRequest;
}
void flex_stats_request::clear_cell_stats_request() {
  if (has_cell_stats_request()) {
    delete body_.cell_stats_request_;
    clear_has_body();
  }
}
 const ::protocol::flex_cell_stats_request& flex_stats_request::cell_stats_request() const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_request.cell_stats_request)
  return has_cell_stats_request()
      ? *body_.cell_stats_request_
      : ::protocol::flex_cell_stats_request::default_instance();
}
::protocol::flex_cell_stats_request* flex_stats_request::mutable_cell_stats_request() {
  if (!has_cell_stats_request()) {
    clear_body();
    set_has_cell_stats_request();
    body_.cell_stats_request_ = new ::protocol::flex_cell_stats_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_request.cell_stats_request)
  return body_.cell_stats_request_;
}
::protocol::flex_cell_stats_request* flex_stats_request::release_cell_stats_request() {
  // @@protoc_insertion_point(field_release:protocol.flex_stats_request.cell_stats_request)
  if (has_cell_stats_request()) {
    clear_has_body();
    ::protocol::flex_cell_stats_request* temp = body_.cell_stats_request_;
    body_.cell_stats_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_stats_request::set_allocated_cell_stats_request(::protocol::flex_cell_stats_request* cell_stats_request) {
  clear_body();
  if (cell_stats_request) {
    set_has_cell_stats_request();
    body_.cell_stats_request_ = cell_stats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.cell_stats_request)
}

// optional .protocol.flex_ue_stats_request ue_stats_request = 5;
bool flex_stats_request::has_ue_stats_request() const {
  return body_case() == kUeStatsRequest;
}
void flex_stats_request::set_has_ue_stats_request() {
  _oneof_case_[0] = kUeStatsRequest;
}
void flex_stats_request::clear_ue_stats_request() {
  if (has_ue_stats_request()) {
    delete body_.ue_stats_request_;
    clear_has_body();
  }
}
 const ::protocol::flex_ue_stats_request& flex_stats_request::ue_stats_request() const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_request.ue_stats_request)
  return has_ue_stats_request()
      ? *body_.ue_stats_request_
      : ::protocol::flex_ue_stats_request::default_instance();
}
::protocol::flex_ue_stats_request* flex_stats_request::mutable_ue_stats_request() {
  if (!has_ue_stats_request()) {
    clear_body();
    set_has_ue_stats_request();
    body_.ue_stats_request_ = new ::protocol::flex_ue_stats_request;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_request.ue_stats_request)
  return body_.ue_stats_request_;
}
::protocol::flex_ue_stats_request* flex_stats_request::release_ue_stats_request() {
  // @@protoc_insertion_point(field_release:protocol.flex_stats_request.ue_stats_request)
  if (has_ue_stats_request()) {
    clear_has_body();
    ::protocol::flex_ue_stats_request* temp = body_.ue_stats_request_;
    body_.ue_stats_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_stats_request::set_allocated_ue_stats_request(::protocol::flex_ue_stats_request* ue_stats_request) {
  clear_body();
  if (ue_stats_request) {
    set_has_ue_stats_request();
    body_.ue_stats_request_ = ue_stats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.ue_stats_request)
}

bool flex_stats_request::has_body() const {
  return body_case() != BODY_NOT_SET;
}
void flex_stats_request::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
flex_stats_request::BodyCase flex_stats_request::body_case() const {
  return flex_stats_request::BodyCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_stats_reply::kHeaderFieldNumber;
const int flex_stats_reply::kUeReportFieldNumber;
const int flex_stats_reply::kCellReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_stats_reply::flex_stats_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_stats_reply)
}
flex_stats_reply::flex_stats_reply(const flex_stats_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ue_report_(from.ue_report_),
      cell_report_(from.cell_report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_stats_reply)
}

void flex_stats_reply::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_stats_reply::~flex_stats_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_stats_reply)
  SharedDtor();
}

void flex_stats_reply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_stats_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_stats_reply::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_stats_reply& flex_stats_reply::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_stats_reply* flex_stats_reply::New(::google::protobuf::Arena* arena) const {
  flex_stats_reply* n = new flex_stats_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_stats_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_stats_reply)
  ue_report_.Clear();
  cell_report_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_stats_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_stats_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_ue_stats_report ue_report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ue_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_cell_stats_report cell_report = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_stats_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_stats_reply)
  return false;
#undef DO_
}

void flex_stats_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_stats_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .protocol.flex_ue_stats_report ue_report = 2;
  for (unsigned int i = 0, n = this->ue_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ue_report(i), output);
  }

  // repeated .protocol.flex_cell_stats_report cell_report = 3;
  for (unsigned int i = 0, n = this->cell_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_report(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_stats_reply)
}

::google::protobuf::uint8* flex_stats_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_stats_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .protocol.flex_ue_stats_report ue_report = 2;
  for (unsigned int i = 0, n = this->ue_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ue_report(i), deterministic, target);
  }

  // repeated .protocol.flex_cell_stats_report cell_report = 3;
  for (unsigned int i = 0, n = this->cell_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cell_report(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_stats_reply)
  return target;
}

size_t flex_stats_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_stats_reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_ue_stats_report ue_report = 2;
  {
    unsigned int count = this->ue_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ue_report(i));
    }
  }

  // repeated .protocol.flex_cell_stats_report cell_report = 3;
  {
    unsigned int count = this->cell_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_report(i));
    }
  }

  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_stats_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_stats_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_stats_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_stats_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_stats_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_stats_reply)
    MergeFrom(*source);
  }
}

void flex_stats_reply::MergeFrom(const flex_stats_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_stats_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ue_report_.MergeFrom(from.ue_report_);
  cell_report_.MergeFrom(from.cell_report_);
  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_stats_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_stats_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_stats_reply::CopyFrom(const flex_stats_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_stats_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_stats_reply::IsInitialized() const {
  return true;
}

void flex_stats_reply::Swap(flex_stats_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_stats_reply::InternalSwap(flex_stats_reply* other) {
  ue_report_.InternalSwap(&other->ue_report_);
  cell_report_.InternalSwap(&other->cell_report_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_stats_reply::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_stats_reply

// optional .protocol.flex_header header = 1;
bool flex_stats_reply::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_stats_reply::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_stats_reply::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_stats_reply::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_stats_reply::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_reply.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_stats_reply::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_reply.header)
  return header_;
}
::protocol::flex_header* flex_stats_reply::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_stats_reply.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_stats_reply::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_reply.header)
}

// repeated .protocol.flex_ue_stats_report ue_report = 2;
int flex_stats_reply::ue_report_size() const {
  return ue_report_.size();
}
void flex_stats_reply::clear_ue_report() {
  ue_report_.Clear();
}
const ::protocol::flex_ue_stats_report& flex_stats_reply::ue_report(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_reply.ue_report)
  return ue_report_.Get(index);
}
::protocol::flex_ue_stats_report* flex_stats_reply::mutable_ue_report(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_reply.ue_report)
  return ue_report_.Mutable(index);
}
::protocol::flex_ue_stats_report* flex_stats_reply::add_ue_report() {
  // @@protoc_insertion_point(field_add:protocol.flex_stats_reply.ue_report)
  return ue_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_ue_stats_report >*
flex_stats_reply::mutable_ue_report() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_stats_reply.ue_report)
  return &ue_report_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_ue_stats_report >&
flex_stats_reply::ue_report() const {
  // @@protoc_insertion_point(field_list:protocol.flex_stats_reply.ue_report)
  return ue_report_;
}

// repeated .protocol.flex_cell_stats_report cell_report = 3;
int flex_stats_reply::cell_report_size() const {
  return cell_report_.size();
}
void flex_stats_reply::clear_cell_report() {
  cell_report_.Clear();
}
const ::protocol::flex_cell_stats_report& flex_stats_reply::cell_report(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_stats_reply.cell_report)
  return cell_report_.Get(index);
}
::protocol::flex_cell_stats_report* flex_stats_reply::mutable_cell_report(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_stats_reply.cell_report)
  return cell_report_.Mutable(index);
}
::protocol::flex_cell_stats_report* flex_stats_reply::add_cell_report() {
  // @@protoc_insertion_point(field_add:protocol.flex_stats_reply.cell_report)
  return cell_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_cell_stats_report >*
flex_stats_reply::mutable_cell_report() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_stats_reply.cell_report)
  return &cell_report_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_cell_stats_report >&
flex_stats_reply::cell_report() const {
  // @@protoc_insertion_point(field_list:protocol.flex_stats_reply.cell_report)
  return cell_report_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_sf_trigger::kHeaderFieldNumber;
const int flex_sf_trigger::kSfnSfFieldNumber;
const int flex_sf_trigger::kDlInfoFieldNumber;
const int flex_sf_trigger::kUlInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_sf_trigger::flex_sf_trigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_sf_trigger)
}
flex_sf_trigger::flex_sf_trigger(const flex_sf_trigger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dl_info_(from.dl_info_),
      ul_info_(from.ul_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_sf_trigger)
}

void flex_sf_trigger::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&sfn_sf_) -
    reinterpret_cast<char*>(&header_) + sizeof(sfn_sf_));
}

flex_sf_trigger::~flex_sf_trigger() {
  // @@protoc_insertion_point(destructor:protocol.flex_sf_trigger)
  SharedDtor();
}

void flex_sf_trigger::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_sf_trigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_sf_trigger::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_sf_trigger& flex_sf_trigger::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_sf_trigger* flex_sf_trigger::New(::google::protobuf::Arena* arena) const {
  flex_sf_trigger* n = new flex_sf_trigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_sf_trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_sf_trigger)
  dl_info_.Clear();
  ul_info_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_sf_trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_sf_trigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sfn_sf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sfn_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_dl_info dl_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dl_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_ul_info ul_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ul_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_sf_trigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_sf_trigger)
  return false;
#undef DO_
}

void flex_sf_trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_sf_trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sfn_sf(), output);
  }

  // repeated .protocol.flex_dl_info dl_info = 3;
  for (unsigned int i = 0, n = this->dl_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dl_info(i), output);
  }

  // repeated .protocol.flex_ul_info ul_info = 4;
  for (unsigned int i = 0, n = this->ul_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ul_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_sf_trigger)
}

::google::protobuf::uint8* flex_sf_trigger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_sf_trigger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sfn_sf(), target);
  }

  // repeated .protocol.flex_dl_info dl_info = 3;
  for (unsigned int i = 0, n = this->dl_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dl_info(i), deterministic, target);
  }

  // repeated .protocol.flex_ul_info ul_info = 4;
  for (unsigned int i = 0, n = this->ul_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->ul_info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_sf_trigger)
  return target;
}

size_t flex_sf_trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_sf_trigger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_dl_info dl_info = 3;
  {
    unsigned int count = this->dl_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dl_info(i));
    }
  }

  // repeated .protocol.flex_ul_info ul_info = 4;
  {
    unsigned int count = this->ul_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ul_info(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 sfn_sf = 2;
    if (has_sfn_sf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sfn_sf());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_sf_trigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_sf_trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_sf_trigger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_sf_trigger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_sf_trigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_sf_trigger)
    MergeFrom(*source);
  }
}

void flex_sf_trigger::MergeFrom(const flex_sf_trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_sf_trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dl_info_.MergeFrom(from.dl_info_);
  ul_info_.MergeFrom(from.ul_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_sf_trigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_sf_trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_sf_trigger::CopyFrom(const flex_sf_trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_sf_trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_sf_trigger::IsInitialized() const {
  return true;
}

void flex_sf_trigger::Swap(flex_sf_trigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_sf_trigger::InternalSwap(flex_sf_trigger* other) {
  dl_info_.InternalSwap(&other->dl_info_);
  ul_info_.InternalSwap(&other->ul_info_);
  std::swap(header_, other->header_);
  std::swap(sfn_sf_, other->sfn_sf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_sf_trigger::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_sf_trigger

// optional .protocol.flex_header header = 1;
bool flex_sf_trigger::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_sf_trigger::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_sf_trigger::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_sf_trigger::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_sf_trigger::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sf_trigger.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_sf_trigger::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_sf_trigger.header)
  return header_;
}
::protocol::flex_header* flex_sf_trigger::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_sf_trigger.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_sf_trigger::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_sf_trigger.header)
}

// optional uint32 sfn_sf = 2;
bool flex_sf_trigger::has_sfn_sf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_sf_trigger::set_has_sfn_sf() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_sf_trigger::clear_has_sfn_sf() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_sf_trigger::clear_sfn_sf() {
  sfn_sf_ = 0u;
  clear_has_sfn_sf();
}
::google::protobuf::uint32 flex_sf_trigger::sfn_sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sf_trigger.sfn_sf)
  return sfn_sf_;
}
void flex_sf_trigger::set_sfn_sf(::google::protobuf::uint32 value) {
  set_has_sfn_sf();
  sfn_sf_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sf_trigger.sfn_sf)
}

// repeated .protocol.flex_dl_info dl_info = 3;
int flex_sf_trigger::dl_info_size() const {
  return dl_info_.size();
}
void flex_sf_trigger::clear_dl_info() {
  dl_info_.Clear();
}
const ::protocol::flex_dl_info& flex_sf_trigger::dl_info(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_sf_trigger.dl_info)
  return dl_info_.Get(index);
}
::protocol::flex_dl_info* flex_sf_trigger::mutable_dl_info(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_sf_trigger.dl_info)
  return dl_info_.Mutable(index);
}
::protocol::flex_dl_info* flex_sf_trigger::add_dl_info() {
  // @@protoc_insertion_point(field_add:protocol.flex_sf_trigger.dl_info)
  return dl_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_info >*
flex_sf_trigger::mutable_dl_info() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_sf_trigger.dl_info)
  return &dl_info_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_info >&
flex_sf_trigger::dl_info() const {
  // @@protoc_insertion_point(field_list:protocol.flex_sf_trigger.dl_info)
  return dl_info_;
}

// repeated .protocol.flex_ul_info ul_info = 4;
int flex_sf_trigger::ul_info_size() const {
  return ul_info_.size();
}
void flex_sf_trigger::clear_ul_info() {
  ul_info_.Clear();
}
const ::protocol::flex_ul_info& flex_sf_trigger::ul_info(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_sf_trigger.ul_info)
  return ul_info_.Get(index);
}
::protocol::flex_ul_info* flex_sf_trigger::mutable_ul_info(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_sf_trigger.ul_info)
  return ul_info_.Mutable(index);
}
::protocol::flex_ul_info* flex_sf_trigger::add_ul_info() {
  // @@protoc_insertion_point(field_add:protocol.flex_sf_trigger.ul_info)
  return ul_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_ul_info >*
flex_sf_trigger::mutable_ul_info() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_sf_trigger.ul_info)
  return &ul_info_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_ul_info >&
flex_sf_trigger::ul_info() const {
  // @@protoc_insertion_point(field_list:protocol.flex_sf_trigger.ul_info)
  return ul_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_sr_info::kHeaderFieldNumber;
const int flex_ul_sr_info::kSfnSfFieldNumber;
const int flex_ul_sr_info::kRntiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_sr_info::flex_ul_sr_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_sr_info)
}
flex_ul_sr_info::flex_ul_sr_info(const flex_ul_sr_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rnti_(from.rnti_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_sr_info)
}

void flex_ul_sr_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&sfn_sf_) -
    reinterpret_cast<char*>(&header_) + sizeof(sfn_sf_));
}

flex_ul_sr_info::~flex_ul_sr_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_sr_info)
  SharedDtor();
}

void flex_ul_sr_info::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_ul_sr_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_sr_info::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_sr_info& flex_ul_sr_info::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_sr_info* flex_ul_sr_info::New(::google::protobuf::Arena* arena) const {
  flex_ul_sr_info* n = new flex_ul_sr_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_sr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_sr_info)
  rnti_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_sr_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_sr_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sfn_sf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sfn_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rnti = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_rnti())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rnti())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_sr_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_sr_info)
  return false;
#undef DO_
}

void flex_ul_sr_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_sr_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sfn_sf(), output);
  }

  // repeated uint32 rnti = 3;
  for (int i = 0, n = this->rnti_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rnti(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_sr_info)
}

::google::protobuf::uint8* flex_ul_sr_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_sr_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sfn_sf(), target);
  }

  // repeated uint32 rnti = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->rnti_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_sr_info)
  return target;
}

size_t flex_ul_sr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_sr_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 rnti = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rnti_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rnti_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 sfn_sf = 2;
    if (has_sfn_sf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sfn_sf());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_sr_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_sr_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_sr_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_sr_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_sr_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_sr_info)
    MergeFrom(*source);
  }
}

void flex_ul_sr_info::MergeFrom(const flex_ul_sr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_sr_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rnti_.MergeFrom(from.rnti_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_sr_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_sr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_sr_info::CopyFrom(const flex_ul_sr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_sr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_sr_info::IsInitialized() const {
  return true;
}

void flex_ul_sr_info::Swap(flex_ul_sr_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_sr_info::InternalSwap(flex_ul_sr_info* other) {
  rnti_.InternalSwap(&other->rnti_);
  std::swap(header_, other->header_);
  std::swap(sfn_sf_, other->sfn_sf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_sr_info::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_sr_info

// optional .protocol.flex_header header = 1;
bool flex_ul_sr_info::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_sr_info::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_sr_info::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_sr_info::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_ul_sr_info::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_sr_info.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_ul_sr_info::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_sr_info.header)
  return header_;
}
::protocol::flex_header* flex_ul_sr_info::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_ul_sr_info.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_ul_sr_info::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ul_sr_info.header)
}

// optional uint32 sfn_sf = 2;
bool flex_ul_sr_info::has_sfn_sf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ul_sr_info::set_has_sfn_sf() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ul_sr_info::clear_has_sfn_sf() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ul_sr_info::clear_sfn_sf() {
  sfn_sf_ = 0u;
  clear_has_sfn_sf();
}
::google::protobuf::uint32 flex_ul_sr_info::sfn_sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_sr_info.sfn_sf)
  return sfn_sf_;
}
void flex_ul_sr_info::set_sfn_sf(::google::protobuf::uint32 value) {
  set_has_sfn_sf();
  sfn_sf_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_sr_info.sfn_sf)
}

// repeated uint32 rnti = 3;
int flex_ul_sr_info::rnti_size() const {
  return rnti_.size();
}
void flex_ul_sr_info::clear_rnti() {
  rnti_.Clear();
}
::google::protobuf::uint32 flex_ul_sr_info::rnti(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_sr_info.rnti)
  return rnti_.Get(index);
}
void flex_ul_sr_info::set_rnti(int index, ::google::protobuf::uint32 value) {
  rnti_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_sr_info.rnti)
}
void flex_ul_sr_info::add_rnti(::google::protobuf::uint32 value) {
  rnti_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ul_sr_info.rnti)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_ul_sr_info::rnti() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_sr_info.rnti)
  return rnti_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_ul_sr_info::mutable_rnti() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_sr_info.rnti)
  return &rnti_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_enb_config_request::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_enb_config_request::flex_enb_config_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_enb_config_request)
}
flex_enb_config_request::flex_enb_config_request(const flex_enb_config_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_enb_config_request)
}

void flex_enb_config_request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_enb_config_request::~flex_enb_config_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_enb_config_request)
  SharedDtor();
}

void flex_enb_config_request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_enb_config_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_enb_config_request::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_enb_config_request& flex_enb_config_request::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_enb_config_request* flex_enb_config_request::New(::google::protobuf::Arena* arena) const {
  flex_enb_config_request* n = new flex_enb_config_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_enb_config_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_enb_config_request)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_enb_config_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_enb_config_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_enb_config_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_enb_config_request)
  return false;
#undef DO_
}

void flex_enb_config_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_enb_config_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_enb_config_request)
}

::google::protobuf::uint8* flex_enb_config_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_enb_config_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_enb_config_request)
  return target;
}

size_t flex_enb_config_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_enb_config_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_enb_config_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_enb_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_enb_config_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_enb_config_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_enb_config_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_enb_config_request)
    MergeFrom(*source);
  }
}

void flex_enb_config_request::MergeFrom(const flex_enb_config_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_enb_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_enb_config_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_enb_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_enb_config_request::CopyFrom(const flex_enb_config_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_enb_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_enb_config_request::IsInitialized() const {
  return true;
}

void flex_enb_config_request::Swap(flex_enb_config_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_enb_config_request::InternalSwap(flex_enb_config_request* other) {
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_enb_config_request::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_enb_config_request

// optional .protocol.flex_header header = 1;
bool flex_enb_config_request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_enb_config_request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_enb_config_request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_enb_config_request::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_enb_config_request::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_enb_config_request.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_enb_config_request::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_enb_config_request.header)
  return header_;
}
::protocol::flex_header* flex_enb_config_request::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_enb_config_request.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_enb_config_request::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_enb_config_request.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_enb_config_reply::kHeaderFieldNumber;
const int flex_enb_config_reply::kENBIdFieldNumber;
const int flex_enb_config_reply::kCellConfigFieldNumber;
const int flex_enb_config_reply::kDeviceSpecFieldNumber;
const int flex_enb_config_reply::kS1ApFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_enb_config_reply::flex_enb_config_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_enb_config_reply)
}
flex_enb_config_reply::flex_enb_config_reply(const flex_enb_config_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cell_config_(from.cell_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_s1ap()) {
    s1ap_ = new ::protocol::flex_s1ap_config(*from.s1ap_);
  } else {
    s1ap_ = NULL;
  }
  ::memcpy(&enb_id_, &from.enb_id_,
    reinterpret_cast<char*>(&device_spec_) -
    reinterpret_cast<char*>(&enb_id_) + sizeof(device_spec_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_enb_config_reply)
}

void flex_enb_config_reply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&device_spec_) -
    reinterpret_cast<char*>(&header_) + sizeof(device_spec_));
}

flex_enb_config_reply::~flex_enb_config_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_enb_config_reply)
  SharedDtor();
}

void flex_enb_config_reply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete s1ap_;
  }
}

void flex_enb_config_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_enb_config_reply::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_enb_config_reply& flex_enb_config_reply::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_enb_config_reply* flex_enb_config_reply::New(::google::protobuf::Arena* arena) const {
  flex_enb_config_reply* n = new flex_enb_config_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_enb_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_enb_config_reply)
  cell_config_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::protocol::flex_header::Clear();
    }
    if (has_s1ap()) {
      GOOGLE_DCHECK(s1ap_ != NULL);
      s1ap_->::protocol::flex_s1ap_config::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&enb_id_, 0, reinterpret_cast<char*>(&device_spec_) -
      reinterpret_cast<char*>(&enb_id_) + sizeof(device_spec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_enb_config_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_enb_config_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 eNB_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_enb_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enb_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_cell_config cell_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cell_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_spec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_device_spec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_spec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_s1ap_config s1ap = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s1ap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_enb_config_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_enb_config_reply)
  return false;
#undef DO_
}

void flex_enb_config_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_enb_config_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 eNB_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->enb_id(), output);
  }

  // repeated .protocol.flex_cell_config cell_config = 3;
  for (unsigned int i = 0, n = this->cell_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cell_config(i), output);
  }

  // optional uint32 device_spec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->device_spec(), output);
  }

  // optional .protocol.flex_s1ap_config s1ap = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->s1ap_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_enb_config_reply)
}

::google::protobuf::uint8* flex_enb_config_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_enb_config_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint64 eNB_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->enb_id(), target);
  }

  // repeated .protocol.flex_cell_config cell_config = 3;
  for (unsigned int i = 0, n = this->cell_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cell_config(i), deterministic, target);
  }

  // optional uint32 device_spec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->device_spec(), target);
  }

  // optional .protocol.flex_s1ap_config s1ap = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->s1ap_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_enb_config_reply)
  return target;
}

size_t flex_enb_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_enb_config_reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_cell_config cell_config = 3;
  {
    unsigned int count = this->cell_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cell_config(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .protocol.flex_s1ap_config s1ap = 5;
    if (has_s1ap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->s1ap_);
    }

    // optional uint64 eNB_id = 2;
    if (has_enb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enb_id());
    }

    // optional uint32 device_spec = 4;
    if (has_device_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device_spec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_enb_config_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_enb_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_enb_config_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_enb_config_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_enb_config_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_enb_config_reply)
    MergeFrom(*source);
  }
}

void flex_enb_config_reply::MergeFrom(const flex_enb_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_enb_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_config_.MergeFrom(from.cell_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s1ap()->::protocol::flex_s1ap_config::MergeFrom(from.s1ap());
    }
    if (cached_has_bits & 0x00000004u) {
      enb_id_ = from.enb_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      device_spec_ = from.device_spec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_enb_config_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_enb_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_enb_config_reply::CopyFrom(const flex_enb_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_enb_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_enb_config_reply::IsInitialized() const {
  return true;
}

void flex_enb_config_reply::Swap(flex_enb_config_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_enb_config_reply::InternalSwap(flex_enb_config_reply* other) {
  cell_config_.InternalSwap(&other->cell_config_);
  std::swap(header_, other->header_);
  std::swap(s1ap_, other->s1ap_);
  std::swap(enb_id_, other->enb_id_);
  std::swap(device_spec_, other->device_spec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_enb_config_reply::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_enb_config_reply

// optional .protocol.flex_header header = 1;
bool flex_enb_config_reply::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_enb_config_reply::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_enb_config_reply::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_enb_config_reply::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_enb_config_reply::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_enb_config_reply.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_enb_config_reply::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_enb_config_reply.header)
  return header_;
}
::protocol::flex_header* flex_enb_config_reply::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_enb_config_reply.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_enb_config_reply::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_enb_config_reply.header)
}

// optional uint64 eNB_id = 2;
bool flex_enb_config_reply::has_enb_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_enb_config_reply::set_has_enb_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_enb_config_reply::clear_has_enb_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_enb_config_reply::clear_enb_id() {
  enb_id_ = GOOGLE_ULONGLONG(0);
  clear_has_enb_id();
}
::google::protobuf::uint64 flex_enb_config_reply::enb_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_enb_config_reply.eNB_id)
  return enb_id_;
}
void flex_enb_config_reply::set_enb_id(::google::protobuf::uint64 value) {
  set_has_enb_id();
  enb_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_enb_config_reply.eNB_id)
}

// repeated .protocol.flex_cell_config cell_config = 3;
int flex_enb_config_reply::cell_config_size() const {
  return cell_config_.size();
}
void flex_enb_config_reply::clear_cell_config() {
  cell_config_.Clear();
}
const ::protocol::flex_cell_config& flex_enb_config_reply::cell_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_enb_config_reply.cell_config)
  return cell_config_.Get(index);
}
::protocol::flex_cell_config* flex_enb_config_reply::mutable_cell_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_enb_config_reply.cell_config)
  return cell_config_.Mutable(index);
}
::protocol::flex_cell_config* flex_enb_config_reply::add_cell_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_enb_config_reply.cell_config)
  return cell_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_cell_config >*
flex_enb_config_reply::mutable_cell_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_enb_config_reply.cell_config)
  return &cell_config_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_cell_config >&
flex_enb_config_reply::cell_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_enb_config_reply.cell_config)
  return cell_config_;
}

// optional uint32 device_spec = 4;
bool flex_enb_config_reply::has_device_spec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_enb_config_reply::set_has_device_spec() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_enb_config_reply::clear_has_device_spec() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_enb_config_reply::clear_device_spec() {
  device_spec_ = 0u;
  clear_has_device_spec();
}
::google::protobuf::uint32 flex_enb_config_reply::device_spec() const {
  // @@protoc_insertion_point(field_get:protocol.flex_enb_config_reply.device_spec)
  return device_spec_;
}
void flex_enb_config_reply::set_device_spec(::google::protobuf::uint32 value) {
  set_has_device_spec();
  device_spec_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_enb_config_reply.device_spec)
}

// optional .protocol.flex_s1ap_config s1ap = 5;
bool flex_enb_config_reply::has_s1ap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_enb_config_reply::set_has_s1ap() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_enb_config_reply::clear_has_s1ap() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_enb_config_reply::clear_s1ap() {
  if (s1ap_ != NULL) s1ap_->::protocol::flex_s1ap_config::Clear();
  clear_has_s1ap();
}
const ::protocol::flex_s1ap_config& flex_enb_config_reply::s1ap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_enb_config_reply.s1ap)
  return s1ap_ != NULL ? *s1ap_
                         : *::protocol::flex_s1ap_config::internal_default_instance();
}
::protocol::flex_s1ap_config* flex_enb_config_reply::mutable_s1ap() {
  set_has_s1ap();
  if (s1ap_ == NULL) {
    s1ap_ = new ::protocol::flex_s1ap_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_enb_config_reply.s1ap)
  return s1ap_;
}
::protocol::flex_s1ap_config* flex_enb_config_reply::release_s1ap() {
  // @@protoc_insertion_point(field_release:protocol.flex_enb_config_reply.s1ap)
  clear_has_s1ap();
  ::protocol::flex_s1ap_config* temp = s1ap_;
  s1ap_ = NULL;
  return temp;
}
void flex_enb_config_reply::set_allocated_s1ap(::protocol::flex_s1ap_config* s1ap) {
  delete s1ap_;
  s1ap_ = s1ap;
  if (s1ap) {
    set_has_s1ap();
  } else {
    clear_has_s1ap();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_enb_config_reply.s1ap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_config_request::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_config_request::flex_ue_config_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_config_request)
}
flex_ue_config_request::flex_ue_config_request(const flex_ue_config_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_config_request)
}

void flex_ue_config_request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_ue_config_request::~flex_ue_config_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_config_request)
  SharedDtor();
}

void flex_ue_config_request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_ue_config_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_config_request::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_config_request& flex_ue_config_request::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_config_request* flex_ue_config_request::New(::google::protobuf::Arena* arena) const {
  flex_ue_config_request* n = new flex_ue_config_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_config_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_config_request)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_config_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_config_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_config_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_config_request)
  return false;
#undef DO_
}

void flex_ue_config_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_config_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_config_request)
}

::google::protobuf::uint8* flex_ue_config_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_config_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_config_request)
  return target;
}

size_t flex_ue_config_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_config_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_config_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_config_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_config_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_config_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_config_request)
    MergeFrom(*source);
  }
}

void flex_ue_config_request::MergeFrom(const flex_ue_config_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_ue_config_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_config_request::CopyFrom(const flex_ue_config_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_config_request::IsInitialized() const {
  return true;
}

void flex_ue_config_request::Swap(flex_ue_config_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_config_request::InternalSwap(flex_ue_config_request* other) {
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_config_request::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_config_request

// optional .protocol.flex_header header = 1;
bool flex_ue_config_request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_config_request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_config_request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_config_request::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_ue_config_request::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config_request.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_ue_config_request::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config_request.header)
  return header_;
}
::protocol::flex_header* flex_ue_config_request::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config_request.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_ue_config_request::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config_request.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_config_reply::kHeaderFieldNumber;
const int flex_ue_config_reply::kUeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_config_reply::flex_ue_config_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_config_reply)
}
flex_ue_config_reply::flex_ue_config_reply(const flex_ue_config_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ue_config_(from.ue_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_config_reply)
}

void flex_ue_config_reply::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_ue_config_reply::~flex_ue_config_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_config_reply)
  SharedDtor();
}

void flex_ue_config_reply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_ue_config_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_config_reply::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_config_reply& flex_ue_config_reply::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_config_reply* flex_ue_config_reply::New(::google::protobuf::Arena* arena) const {
  flex_ue_config_reply* n = new flex_ue_config_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_config_reply)
  ue_config_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_config_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_config_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_ue_config ue_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ue_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_config_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_config_reply)
  return false;
#undef DO_
}

void flex_ue_config_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_config_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .protocol.flex_ue_config ue_config = 2;
  for (unsigned int i = 0, n = this->ue_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ue_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_config_reply)
}

::google::protobuf::uint8* flex_ue_config_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_config_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .protocol.flex_ue_config ue_config = 2;
  for (unsigned int i = 0, n = this->ue_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ue_config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_config_reply)
  return target;
}

size_t flex_ue_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_config_reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_ue_config ue_config = 2;
  {
    unsigned int count = this->ue_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ue_config(i));
    }
  }

  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_config_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_config_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_config_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_config_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_config_reply)
    MergeFrom(*source);
  }
}

void flex_ue_config_reply::MergeFrom(const flex_ue_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ue_config_.MergeFrom(from.ue_config_);
  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_ue_config_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_config_reply::CopyFrom(const flex_ue_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_config_reply::IsInitialized() const {
  return true;
}

void flex_ue_config_reply::Swap(flex_ue_config_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_config_reply::InternalSwap(flex_ue_config_reply* other) {
  ue_config_.InternalSwap(&other->ue_config_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_config_reply::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_config_reply

// optional .protocol.flex_header header = 1;
bool flex_ue_config_reply::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_config_reply::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_config_reply::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_config_reply::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_ue_config_reply::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config_reply.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_ue_config_reply::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config_reply.header)
  return header_;
}
::protocol::flex_header* flex_ue_config_reply::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config_reply.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_ue_config_reply::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config_reply.header)
}

// repeated .protocol.flex_ue_config ue_config = 2;
int flex_ue_config_reply::ue_config_size() const {
  return ue_config_.size();
}
void flex_ue_config_reply::clear_ue_config() {
  ue_config_.Clear();
}
const ::protocol::flex_ue_config& flex_ue_config_reply::ue_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config_reply.ue_config)
  return ue_config_.Get(index);
}
::protocol::flex_ue_config* flex_ue_config_reply::mutable_ue_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config_reply.ue_config)
  return ue_config_.Mutable(index);
}
::protocol::flex_ue_config* flex_ue_config_reply::add_ue_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_config_reply.ue_config)
  return ue_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_ue_config >*
flex_ue_config_reply::mutable_ue_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_config_reply.ue_config)
  return &ue_config_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_ue_config >&
flex_ue_config_reply::ue_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_config_reply.ue_config)
  return ue_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_lc_config_request::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_lc_config_request::flex_lc_config_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_lc_config_request)
}
flex_lc_config_request::flex_lc_config_request(const flex_lc_config_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_config_request)
}

void flex_lc_config_request::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_lc_config_request::~flex_lc_config_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_config_request)
  SharedDtor();
}

void flex_lc_config_request::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_lc_config_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_lc_config_request::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_lc_config_request& flex_lc_config_request::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_lc_config_request* flex_lc_config_request::New(::google::protobuf::Arena* arena) const {
  flex_lc_config_request* n = new flex_lc_config_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_lc_config_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_config_request)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_lc_config_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_lc_config_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_lc_config_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_lc_config_request)
  return false;
#undef DO_
}

void flex_lc_config_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_lc_config_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_lc_config_request)
}

::google::protobuf::uint8* flex_lc_config_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_config_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_config_request)
  return target;
}

size_t flex_lc_config_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_config_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_lc_config_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_config_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_lc_config_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_config_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_config_request)
    MergeFrom(*source);
  }
}

void flex_lc_config_request::MergeFrom(const flex_lc_config_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_lc_config_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_config_request::CopyFrom(const flex_lc_config_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_config_request::IsInitialized() const {
  return true;
}

void flex_lc_config_request::Swap(flex_lc_config_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_lc_config_request::InternalSwap(flex_lc_config_request* other) {
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_lc_config_request::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_lc_config_request

// optional .protocol.flex_header header = 1;
bool flex_lc_config_request::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_lc_config_request::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_lc_config_request::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_lc_config_request::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_lc_config_request::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config_request.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_lc_config_request::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_lc_config_request.header)
  return header_;
}
::protocol::flex_header* flex_lc_config_request::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_lc_config_request.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_lc_config_request::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_lc_config_request.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_lc_config_reply::kHeaderFieldNumber;
const int flex_lc_config_reply::kLcUeConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_lc_config_reply::flex_lc_config_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_lc_config_reply)
}
flex_lc_config_reply::flex_lc_config_reply(const flex_lc_config_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lc_ue_config_(from.lc_ue_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_config_reply)
}

void flex_lc_config_reply::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_lc_config_reply::~flex_lc_config_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_config_reply)
  SharedDtor();
}

void flex_lc_config_reply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_lc_config_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_lc_config_reply::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_lc_config_reply& flex_lc_config_reply::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_lc_config_reply* flex_lc_config_reply::New(::google::protobuf::Arena* arena) const {
  flex_lc_config_reply* n = new flex_lc_config_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_lc_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_config_reply)
  lc_ue_config_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_lc_config_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_lc_config_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lc_ue_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_lc_config_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_lc_config_reply)
  return false;
#undef DO_
}

void flex_lc_config_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_lc_config_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
  for (unsigned int i = 0, n = this->lc_ue_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lc_ue_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_lc_config_reply)
}

::google::protobuf::uint8* flex_lc_config_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_config_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
  for (unsigned int i = 0, n = this->lc_ue_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lc_ue_config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_config_reply)
  return target;
}

size_t flex_lc_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_config_reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
  {
    unsigned int count = this->lc_ue_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lc_ue_config(i));
    }
  }

  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_lc_config_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_config_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_lc_config_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_config_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_config_reply)
    MergeFrom(*source);
  }
}

void flex_lc_config_reply::MergeFrom(const flex_lc_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lc_ue_config_.MergeFrom(from.lc_ue_config_);
  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_lc_config_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_config_reply::CopyFrom(const flex_lc_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_config_reply::IsInitialized() const {
  return true;
}

void flex_lc_config_reply::Swap(flex_lc_config_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_lc_config_reply::InternalSwap(flex_lc_config_reply* other) {
  lc_ue_config_.InternalSwap(&other->lc_ue_config_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_lc_config_reply::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_lc_config_reply

// optional .protocol.flex_header header = 1;
bool flex_lc_config_reply::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_lc_config_reply::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_lc_config_reply::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_lc_config_reply::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_lc_config_reply::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config_reply.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_lc_config_reply::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_lc_config_reply.header)
  return header_;
}
::protocol::flex_header* flex_lc_config_reply::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_lc_config_reply.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_lc_config_reply::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_lc_config_reply.header)
}

// repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
int flex_lc_config_reply::lc_ue_config_size() const {
  return lc_ue_config_.size();
}
void flex_lc_config_reply::clear_lc_ue_config() {
  lc_ue_config_.Clear();
}
const ::protocol::flex_lc_ue_config& flex_lc_config_reply::lc_ue_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config_reply.lc_ue_config)
  return lc_ue_config_.Get(index);
}
::protocol::flex_lc_ue_config* flex_lc_config_reply::mutable_lc_ue_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_lc_config_reply.lc_ue_config)
  return lc_ue_config_.Mutable(index);
}
::protocol::flex_lc_ue_config* flex_lc_config_reply::add_lc_ue_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_lc_config_reply.lc_ue_config)
  return lc_ue_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_ue_config >*
flex_lc_config_reply::mutable_lc_ue_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_lc_config_reply.lc_ue_config)
  return &lc_ue_config_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_ue_config >&
flex_lc_config_reply::lc_ue_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_lc_config_reply.lc_ue_config)
  return lc_ue_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_mac_config::kHeaderFieldNumber;
const int flex_dl_mac_config::kSfnSfFieldNumber;
const int flex_dl_mac_config::kDlUeDataFieldNumber;
const int flex_dl_mac_config::kDlRarFieldNumber;
const int flex_dl_mac_config::kDlBroadcastFieldNumber;
const int flex_dl_mac_config::kOfdmSymFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_mac_config::flex_dl_mac_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_mac_config)
}
flex_dl_mac_config::flex_dl_mac_config(const flex_dl_mac_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dl_ue_data_(from.dl_ue_data_),
      dl_rar_(from.dl_rar_),
      dl_broadcast_(from.dl_broadcast_),
      ofdm_sym_(from.ofdm_sym_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_mac_config)
}

void flex_dl_mac_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&sfn_sf_) -
    reinterpret_cast<char*>(&header_) + sizeof(sfn_sf_));
}

flex_dl_mac_config::~flex_dl_mac_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_mac_config)
  SharedDtor();
}

void flex_dl_mac_config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_dl_mac_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_mac_config::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_mac_config& flex_dl_mac_config::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_mac_config* flex_dl_mac_config::New(::google::protobuf::Arena* arena) const {
  flex_dl_mac_config* n = new flex_dl_mac_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_mac_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_mac_config)
  dl_ue_data_.Clear();
  dl_rar_.Clear();
  dl_broadcast_.Clear();
  ofdm_sym_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_mac_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_mac_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sfn_sf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sfn_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_dl_data dl_ue_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dl_ue_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_dl_rar dl_rar = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dl_rar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dl_broadcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ofdm_sym()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_mac_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_mac_config)
  return false;
#undef DO_
}

void flex_dl_mac_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_mac_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sfn_sf(), output);
  }

  // repeated .protocol.flex_dl_data dl_ue_data = 3;
  for (unsigned int i = 0, n = this->dl_ue_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dl_ue_data(i), output);
  }

  // repeated .protocol.flex_dl_rar dl_rar = 4;
  for (unsigned int i = 0, n = this->dl_rar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dl_rar(i), output);
  }

  // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
  for (unsigned int i = 0, n = this->dl_broadcast_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dl_broadcast(i), output);
  }

  // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
  for (unsigned int i = 0, n = this->ofdm_sym_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ofdm_sym(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_mac_config)
}

::google::protobuf::uint8* flex_dl_mac_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_mac_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sfn_sf(), target);
  }

  // repeated .protocol.flex_dl_data dl_ue_data = 3;
  for (unsigned int i = 0, n = this->dl_ue_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dl_ue_data(i), deterministic, target);
  }

  // repeated .protocol.flex_dl_rar dl_rar = 4;
  for (unsigned int i = 0, n = this->dl_rar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->dl_rar(i), deterministic, target);
  }

  // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
  for (unsigned int i = 0, n = this->dl_broadcast_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->dl_broadcast(i), deterministic, target);
  }

  // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
  for (unsigned int i = 0, n = this->ofdm_sym_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->ofdm_sym(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_mac_config)
  return target;
}

size_t flex_dl_mac_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_mac_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_dl_data dl_ue_data = 3;
  {
    unsigned int count = this->dl_ue_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dl_ue_data(i));
    }
  }

  // repeated .protocol.flex_dl_rar dl_rar = 4;
  {
    unsigned int count = this->dl_rar_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dl_rar(i));
    }
  }

  // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
  {
    unsigned int count = this->dl_broadcast_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dl_broadcast(i));
    }
  }

  // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
  {
    unsigned int count = this->ofdm_sym_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ofdm_sym(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 sfn_sf = 2;
    if (has_sfn_sf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sfn_sf());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_mac_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_mac_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_mac_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_mac_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_mac_config)
    MergeFrom(*source);
  }
}

void flex_dl_mac_config::MergeFrom(const flex_dl_mac_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dl_ue_data_.MergeFrom(from.dl_ue_data_);
  dl_rar_.MergeFrom(from.dl_rar_);
  dl_broadcast_.MergeFrom(from.dl_broadcast_);
  ofdm_sym_.MergeFrom(from.ofdm_sym_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_mac_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_mac_config::CopyFrom(const flex_dl_mac_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_mac_config::IsInitialized() const {
  return true;
}

void flex_dl_mac_config::Swap(flex_dl_mac_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_mac_config::InternalSwap(flex_dl_mac_config* other) {
  dl_ue_data_.InternalSwap(&other->dl_ue_data_);
  dl_rar_.InternalSwap(&other->dl_rar_);
  dl_broadcast_.InternalSwap(&other->dl_broadcast_);
  ofdm_sym_.InternalSwap(&other->ofdm_sym_);
  std::swap(header_, other->header_);
  std::swap(sfn_sf_, other->sfn_sf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_mac_config::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_mac_config

// optional .protocol.flex_header header = 1;
bool flex_dl_mac_config::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_mac_config::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_mac_config::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_mac_config::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_dl_mac_config::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_mac_config.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_dl_mac_config::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_mac_config.header)
  return header_;
}
::protocol::flex_header* flex_dl_mac_config::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_mac_config.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_dl_mac_config::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_mac_config.header)
}

// optional uint32 sfn_sf = 2;
bool flex_dl_mac_config::has_sfn_sf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_mac_config::set_has_sfn_sf() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_mac_config::clear_has_sfn_sf() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_mac_config::clear_sfn_sf() {
  sfn_sf_ = 0u;
  clear_has_sfn_sf();
}
::google::protobuf::uint32 flex_dl_mac_config::sfn_sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_mac_config.sfn_sf)
  return sfn_sf_;
}
void flex_dl_mac_config::set_sfn_sf(::google::protobuf::uint32 value) {
  set_has_sfn_sf();
  sfn_sf_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_mac_config.sfn_sf)
}

// repeated .protocol.flex_dl_data dl_ue_data = 3;
int flex_dl_mac_config::dl_ue_data_size() const {
  return dl_ue_data_.size();
}
void flex_dl_mac_config::clear_dl_ue_data() {
  dl_ue_data_.Clear();
}
const ::protocol::flex_dl_data& flex_dl_mac_config::dl_ue_data(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_mac_config.dl_ue_data)
  return dl_ue_data_.Get(index);
}
::protocol::flex_dl_data* flex_dl_mac_config::mutable_dl_ue_data(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_mac_config.dl_ue_data)
  return dl_ue_data_.Mutable(index);
}
::protocol::flex_dl_data* flex_dl_mac_config::add_dl_ue_data() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_mac_config.dl_ue_data)
  return dl_ue_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_data >*
flex_dl_mac_config::mutable_dl_ue_data() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_mac_config.dl_ue_data)
  return &dl_ue_data_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_data >&
flex_dl_mac_config::dl_ue_data() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_mac_config.dl_ue_data)
  return dl_ue_data_;
}

// repeated .protocol.flex_dl_rar dl_rar = 4;
int flex_dl_mac_config::dl_rar_size() const {
  return dl_rar_.size();
}
void flex_dl_mac_config::clear_dl_rar() {
  dl_rar_.Clear();
}
const ::protocol::flex_dl_rar& flex_dl_mac_config::dl_rar(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_mac_config.dl_rar)
  return dl_rar_.Get(index);
}
::protocol::flex_dl_rar* flex_dl_mac_config::mutable_dl_rar(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_mac_config.dl_rar)
  return dl_rar_.Mutable(index);
}
::protocol::flex_dl_rar* flex_dl_mac_config::add_dl_rar() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_mac_config.dl_rar)
  return dl_rar_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_rar >*
flex_dl_mac_config::mutable_dl_rar() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_mac_config.dl_rar)
  return &dl_rar_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_rar >&
flex_dl_mac_config::dl_rar() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_mac_config.dl_rar)
  return dl_rar_;
}

// repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
int flex_dl_mac_config::dl_broadcast_size() const {
  return dl_broadcast_.size();
}
void flex_dl_mac_config::clear_dl_broadcast() {
  dl_broadcast_.Clear();
}
const ::protocol::flex_dl_broadcast& flex_dl_mac_config::dl_broadcast(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_mac_config.dl_broadcast)
  return dl_broadcast_.Get(index);
}
::protocol::flex_dl_broadcast* flex_dl_mac_config::mutable_dl_broadcast(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_mac_config.dl_broadcast)
  return dl_broadcast_.Mutable(index);
}
::protocol::flex_dl_broadcast* flex_dl_mac_config::add_dl_broadcast() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_mac_config.dl_broadcast)
  return dl_broadcast_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_broadcast >*
flex_dl_mac_config::mutable_dl_broadcast() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_mac_config.dl_broadcast)
  return &dl_broadcast_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_broadcast >&
flex_dl_mac_config::dl_broadcast() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_mac_config.dl_broadcast)
  return dl_broadcast_;
}

// repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
int flex_dl_mac_config::ofdm_sym_size() const {
  return ofdm_sym_.size();
}
void flex_dl_mac_config::clear_ofdm_sym() {
  ofdm_sym_.Clear();
}
const ::protocol::flex_pdcch_ofdm_sym_count& flex_dl_mac_config::ofdm_sym(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_mac_config.ofdm_sym)
  return ofdm_sym_.Get(index);
}
::protocol::flex_pdcch_ofdm_sym_count* flex_dl_mac_config::mutable_ofdm_sym(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_mac_config.ofdm_sym)
  return ofdm_sym_.Mutable(index);
}
::protocol::flex_pdcch_ofdm_sym_count* flex_dl_mac_config::add_ofdm_sym() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_mac_config.ofdm_sym)
  return ofdm_sym_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_pdcch_ofdm_sym_count >*
flex_dl_mac_config::mutable_ofdm_sym() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_mac_config.ofdm_sym)
  return &ofdm_sym_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_pdcch_ofdm_sym_count >&
flex_dl_mac_config::ofdm_sym() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_mac_config.ofdm_sym)
  return ofdm_sym_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_mac_config::kHeaderFieldNumber;
const int flex_ul_mac_config::kSfnSfFieldNumber;
const int flex_ul_mac_config::kUlUeDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_mac_config::flex_ul_mac_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_mac_config)
}
flex_ul_mac_config::flex_ul_mac_config(const flex_ul_mac_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ul_ue_data_(from.ul_ue_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_mac_config)
}

void flex_ul_mac_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&sfn_sf_) -
    reinterpret_cast<char*>(&header_) + sizeof(sfn_sf_));
}

flex_ul_mac_config::~flex_ul_mac_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_mac_config)
  SharedDtor();
}

void flex_ul_mac_config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_ul_mac_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_mac_config::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_mac_config& flex_ul_mac_config::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_mac_config* flex_ul_mac_config::New(::google::protobuf::Arena* arena) const {
  flex_ul_mac_config* n = new flex_ul_mac_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_mac_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_mac_config)
  ul_ue_data_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_mac_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_mac_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sfn_sf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sfn_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_ul_data ul_ue_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ul_ue_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_mac_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_mac_config)
  return false;
#undef DO_
}

void flex_ul_mac_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_mac_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sfn_sf(), output);
  }

  // repeated .protocol.flex_ul_data ul_ue_data = 3;
  for (unsigned int i = 0, n = this->ul_ue_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ul_ue_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_mac_config)
}

::google::protobuf::uint8* flex_ul_mac_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_mac_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sfn_sf(), target);
  }

  // repeated .protocol.flex_ul_data ul_ue_data = 3;
  for (unsigned int i = 0, n = this->ul_ue_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ul_ue_data(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_mac_config)
  return target;
}

size_t flex_ul_mac_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_mac_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_ul_data ul_ue_data = 3;
  {
    unsigned int count = this->ul_ue_data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ul_ue_data(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 sfn_sf = 2;
    if (has_sfn_sf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sfn_sf());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_mac_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_mac_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_mac_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_mac_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_mac_config)
    MergeFrom(*source);
  }
}

void flex_ul_mac_config::MergeFrom(const flex_ul_mac_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ul_ue_data_.MergeFrom(from.ul_ue_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_mac_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_mac_config::CopyFrom(const flex_ul_mac_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_mac_config::IsInitialized() const {
  return true;
}

void flex_ul_mac_config::Swap(flex_ul_mac_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_mac_config::InternalSwap(flex_ul_mac_config* other) {
  ul_ue_data_.InternalSwap(&other->ul_ue_data_);
  std::swap(header_, other->header_);
  std::swap(sfn_sf_, other->sfn_sf_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_mac_config::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_mac_config

// optional .protocol.flex_header header = 1;
bool flex_ul_mac_config::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_mac_config::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_mac_config::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_mac_config::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_ul_mac_config::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_mac_config.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_ul_mac_config::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_mac_config.header)
  return header_;
}
::protocol::flex_header* flex_ul_mac_config::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_ul_mac_config.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_ul_mac_config::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ul_mac_config.header)
}

// optional uint32 sfn_sf = 2;
bool flex_ul_mac_config::has_sfn_sf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ul_mac_config::set_has_sfn_sf() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ul_mac_config::clear_has_sfn_sf() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ul_mac_config::clear_sfn_sf() {
  sfn_sf_ = 0u;
  clear_has_sfn_sf();
}
::google::protobuf::uint32 flex_ul_mac_config::sfn_sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_mac_config.sfn_sf)
  return sfn_sf_;
}
void flex_ul_mac_config::set_sfn_sf(::google::protobuf::uint32 value) {
  set_has_sfn_sf();
  sfn_sf_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_mac_config.sfn_sf)
}

// repeated .protocol.flex_ul_data ul_ue_data = 3;
int flex_ul_mac_config::ul_ue_data_size() const {
  return ul_ue_data_.size();
}
void flex_ul_mac_config::clear_ul_ue_data() {
  ul_ue_data_.Clear();
}
const ::protocol::flex_ul_data& flex_ul_mac_config::ul_ue_data(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_mac_config.ul_ue_data)
  return ul_ue_data_.Get(index);
}
::protocol::flex_ul_data* flex_ul_mac_config::mutable_ul_ue_data(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_mac_config.ul_ue_data)
  return ul_ue_data_.Mutable(index);
}
::protocol::flex_ul_data* flex_ul_mac_config::add_ul_ue_data() {
  // @@protoc_insertion_point(field_add:protocol.flex_ul_mac_config.ul_ue_data)
  return ul_ue_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_ul_data >*
flex_ul_mac_config::mutable_ul_ue_data() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_mac_config.ul_ue_data)
  return &ul_ue_data_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_ul_data >&
flex_ul_mac_config::ul_ue_data() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_mac_config.ul_ue_data)
  return ul_ue_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_rrc_triggering::kHeaderFieldNumber;
const int flex_rrc_triggering::kRrcTriggerFieldNumber;
const int flex_rrc_triggering::kMeasInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_rrc_triggering::flex_rrc_triggering()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_rrc_triggering)
}
flex_rrc_triggering::flex_rrc_triggering(const flex_rrc_triggering& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rrc_trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rrc_trigger()) {
    rrc_trigger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rrc_trigger_);
  }
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_meas_info()) {
    meas_info_ = new ::protocol::flex_measurement_info(*from.meas_info_);
  } else {
    meas_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rrc_triggering)
}

void flex_rrc_triggering::SharedCtor() {
  _cached_size_ = 0;
  rrc_trigger_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&meas_info_) -
    reinterpret_cast<char*>(&header_) + sizeof(meas_info_));
}

flex_rrc_triggering::~flex_rrc_triggering() {
  // @@protoc_insertion_point(destructor:protocol.flex_rrc_triggering)
  SharedDtor();
}

void flex_rrc_triggering::SharedDtor() {
  rrc_trigger_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete meas_info_;
  }
}

void flex_rrc_triggering::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_rrc_triggering::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_rrc_triggering& flex_rrc_triggering::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_rrc_triggering* flex_rrc_triggering::New(::google::protobuf::Arena* arena) const {
  flex_rrc_triggering* n = new flex_rrc_triggering;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_rrc_triggering::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rrc_triggering)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_rrc_trigger()) {
      GOOGLE_DCHECK(!rrc_trigger_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rrc_trigger_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::protocol::flex_header::Clear();
    }
    if (has_meas_info()) {
      GOOGLE_DCHECK(meas_info_ != NULL);
      meas_info_->::protocol::flex_measurement_info::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_rrc_triggering::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_rrc_triggering)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rrc_trigger = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rrc_trigger()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rrc_trigger().data(), this->rrc_trigger().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_rrc_triggering.rrc_trigger");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_measurement_info meas_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meas_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_rrc_triggering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_rrc_triggering)
  return false;
#undef DO_
}

void flex_rrc_triggering::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_rrc_triggering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string rrc_trigger = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rrc_trigger().data(), this->rrc_trigger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_rrc_triggering.rrc_trigger");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rrc_trigger(), output);
  }

  // optional .protocol.flex_measurement_info meas_info = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->meas_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_rrc_triggering)
}

::google::protobuf::uint8* flex_rrc_triggering::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rrc_triggering)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional string rrc_trigger = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rrc_trigger().data(), this->rrc_trigger().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_rrc_triggering.rrc_trigger");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rrc_trigger(), target);
  }

  // optional .protocol.flex_measurement_info meas_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->meas_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rrc_triggering)
  return target;
}

size_t flex_rrc_triggering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rrc_triggering)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string rrc_trigger = 2;
    if (has_rrc_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rrc_trigger());
    }

    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .protocol.flex_measurement_info meas_info = 3;
    if (has_meas_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->meas_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_rrc_triggering::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rrc_triggering)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rrc_triggering* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_rrc_triggering>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rrc_triggering)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rrc_triggering)
    MergeFrom(*source);
  }
}

void flex_rrc_triggering::MergeFrom(const flex_rrc_triggering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rrc_triggering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rrc_trigger();
      rrc_trigger_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rrc_trigger_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_meas_info()->::protocol::flex_measurement_info::MergeFrom(from.meas_info());
    }
  }
}

void flex_rrc_triggering::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rrc_triggering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rrc_triggering::CopyFrom(const flex_rrc_triggering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rrc_triggering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rrc_triggering::IsInitialized() const {
  return true;
}

void flex_rrc_triggering::Swap(flex_rrc_triggering* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_rrc_triggering::InternalSwap(flex_rrc_triggering* other) {
  rrc_trigger_.Swap(&other->rrc_trigger_);
  std::swap(header_, other->header_);
  std::swap(meas_info_, other->meas_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_rrc_triggering::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_rrc_triggering

// optional .protocol.flex_header header = 1;
bool flex_rrc_triggering::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_rrc_triggering::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_rrc_triggering::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_rrc_triggering::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_rrc_triggering::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_triggering.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_rrc_triggering::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_rrc_triggering.header)
  return header_;
}
::protocol::flex_header* flex_rrc_triggering::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_rrc_triggering.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_rrc_triggering::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_rrc_triggering.header)
}

// optional string rrc_trigger = 2;
bool flex_rrc_triggering::has_rrc_trigger() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_rrc_triggering::set_has_rrc_trigger() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_rrc_triggering::clear_has_rrc_trigger() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_rrc_triggering::clear_rrc_trigger() {
  rrc_trigger_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rrc_trigger();
}
const ::std::string& flex_rrc_triggering::rrc_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_triggering.rrc_trigger)
  return rrc_trigger_.GetNoArena();
}
void flex_rrc_triggering::set_rrc_trigger(const ::std::string& value) {
  set_has_rrc_trigger();
  rrc_trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_rrc_triggering.rrc_trigger)
}
#if LANG_CXX11
void flex_rrc_triggering::set_rrc_trigger(::std::string&& value) {
  set_has_rrc_trigger();
  rrc_trigger_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_rrc_triggering.rrc_trigger)
}
#endif
void flex_rrc_triggering::set_rrc_trigger(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rrc_trigger();
  rrc_trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_rrc_triggering.rrc_trigger)
}
void flex_rrc_triggering::set_rrc_trigger(const char* value, size_t size) {
  set_has_rrc_trigger();
  rrc_trigger_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_rrc_triggering.rrc_trigger)
}
::std::string* flex_rrc_triggering::mutable_rrc_trigger() {
  set_has_rrc_trigger();
  // @@protoc_insertion_point(field_mutable:protocol.flex_rrc_triggering.rrc_trigger)
  return rrc_trigger_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_rrc_triggering::release_rrc_trigger() {
  // @@protoc_insertion_point(field_release:protocol.flex_rrc_triggering.rrc_trigger)
  clear_has_rrc_trigger();
  return rrc_trigger_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_rrc_triggering::set_allocated_rrc_trigger(::std::string* rrc_trigger) {
  if (rrc_trigger != NULL) {
    set_has_rrc_trigger();
  } else {
    clear_has_rrc_trigger();
  }
  rrc_trigger_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rrc_trigger);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_rrc_triggering.rrc_trigger)
}

// optional .protocol.flex_measurement_info meas_info = 3;
bool flex_rrc_triggering::has_meas_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_rrc_triggering::set_has_meas_info() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_rrc_triggering::clear_has_meas_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_rrc_triggering::clear_meas_info() {
  if (meas_info_ != NULL) meas_info_->::protocol::flex_measurement_info::Clear();
  clear_has_meas_info();
}
const ::protocol::flex_measurement_info& flex_rrc_triggering::meas_info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_triggering.meas_info)
  return meas_info_ != NULL ? *meas_info_
                         : *::protocol::flex_measurement_info::internal_default_instance();
}
::protocol::flex_measurement_info* flex_rrc_triggering::mutable_meas_info() {
  set_has_meas_info();
  if (meas_info_ == NULL) {
    meas_info_ = new ::protocol::flex_measurement_info;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_rrc_triggering.meas_info)
  return meas_info_;
}
::protocol::flex_measurement_info* flex_rrc_triggering::release_meas_info() {
  // @@protoc_insertion_point(field_release:protocol.flex_rrc_triggering.meas_info)
  clear_has_meas_info();
  ::protocol::flex_measurement_info* temp = meas_info_;
  meas_info_ = NULL;
  return temp;
}
void flex_rrc_triggering::set_allocated_meas_info(::protocol::flex_measurement_info* meas_info) {
  delete meas_info_;
  meas_info_ = meas_info;
  if (meas_info) {
    set_has_meas_info();
  } else {
    clear_has_meas_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_rrc_triggering.meas_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ho_command::kHeaderFieldNumber;
const int flex_ho_command::kRntiFieldNumber;
const int flex_ho_command::kTargetPhyCellIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ho_command::flex_ho_command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ho_command)
}
flex_ho_command::flex_ho_command(const flex_ho_command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&target_phy_cell_id_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(target_phy_cell_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ho_command)
}

void flex_ho_command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&target_phy_cell_id_) -
    reinterpret_cast<char*>(&header_) + sizeof(target_phy_cell_id_));
}

flex_ho_command::~flex_ho_command() {
  // @@protoc_insertion_point(destructor:protocol.flex_ho_command)
  SharedDtor();
}

void flex_ho_command::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_ho_command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ho_command::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ho_command& flex_ho_command::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ho_command* flex_ho_command::New(::google::protobuf::Arena* arena) const {
  flex_ho_command* n = new flex_ho_command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ho_command::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ho_command)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&target_phy_cell_id_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(target_phy_cell_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ho_command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ho_command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rnti = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_phy_cell_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_phy_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_phy_cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ho_command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ho_command)
  return false;
#undef DO_
}

void flex_ho_command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ho_command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 rnti = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rnti(), output);
  }

  // optional uint32 target_phy_cell_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_phy_cell_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ho_command)
}

::google::protobuf::uint8* flex_ho_command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ho_command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 rnti = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rnti(), target);
  }

  // optional uint32 target_phy_cell_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_phy_cell_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ho_command)
  return target;
}

size_t flex_ho_command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ho_command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 rnti = 2;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 target_phy_cell_id = 3;
    if (has_target_phy_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_phy_cell_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ho_command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ho_command)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ho_command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ho_command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ho_command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ho_command)
    MergeFrom(*source);
  }
}

void flex_ho_command::MergeFrom(const flex_ho_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ho_command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_phy_cell_id_ = from.target_phy_cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ho_command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ho_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ho_command::CopyFrom(const flex_ho_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ho_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ho_command::IsInitialized() const {
  return true;
}

void flex_ho_command::Swap(flex_ho_command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ho_command::InternalSwap(flex_ho_command* other) {
  std::swap(header_, other->header_);
  std::swap(rnti_, other->rnti_);
  std::swap(target_phy_cell_id_, other->target_phy_cell_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ho_command::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ho_command

// optional .protocol.flex_header header = 1;
bool flex_ho_command::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ho_command::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ho_command::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ho_command::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_ho_command::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ho_command.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_ho_command::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ho_command.header)
  return header_;
}
::protocol::flex_header* flex_ho_command::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_ho_command.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_ho_command::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ho_command.header)
}

// optional uint32 rnti = 2;
bool flex_ho_command::has_rnti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ho_command::set_has_rnti() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ho_command::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ho_command::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_ho_command::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ho_command.rnti)
  return rnti_;
}
void flex_ho_command::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ho_command.rnti)
}

// optional uint32 target_phy_cell_id = 3;
bool flex_ho_command::has_target_phy_cell_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ho_command::set_has_target_phy_cell_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ho_command::clear_has_target_phy_cell_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ho_command::clear_target_phy_cell_id() {
  target_phy_cell_id_ = 0u;
  clear_has_target_phy_cell_id();
}
::google::protobuf::uint32 flex_ho_command::target_phy_cell_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ho_command.target_phy_cell_id)
  return target_phy_cell_id_;
}
void flex_ho_command::set_target_phy_cell_id(::google::protobuf::uint32 value) {
  set_has_target_phy_cell_id();
  target_phy_cell_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ho_command.target_phy_cell_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_state_change::kHeaderFieldNumber;
const int flex_ue_state_change::kTypeFieldNumber;
const int flex_ue_state_change::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_state_change::flex_ue_state_change()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_state_change)
}
flex_ue_state_change::flex_ue_state_change(const flex_ue_state_change& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::protocol::flex_ue_config(*from.config_);
  } else {
    config_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_state_change)
}

void flex_ue_state_change::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&header_) + sizeof(type_));
}

flex_ue_state_change::~flex_ue_state_change() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_state_change)
  SharedDtor();
}

void flex_ue_state_change::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void flex_ue_state_change::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_state_change::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_state_change& flex_ue_state_change::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_state_change* flex_ue_state_change::New(::google::protobuf::Arena* arena) const {
  flex_ue_state_change* n = new flex_ue_state_change;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_state_change::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_state_change)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::protocol::flex_header::Clear();
    }
    if (has_config()) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->::protocol::flex_ue_config::Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_state_change::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_state_change)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ue_config config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_state_change)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_state_change)
  return false;
#undef DO_
}

void flex_ue_state_change::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_state_change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional .protocol.flex_ue_config config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_state_change)
}

::google::protobuf::uint8* flex_ue_state_change::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_state_change)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional .protocol.flex_ue_config config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_state_change)
  return target;
}

size_t flex_ue_state_change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_state_change)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .protocol.flex_ue_config config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->config_);
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_state_change::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_state_change)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_state_change* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_state_change>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_state_change)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_state_change)
    MergeFrom(*source);
  }
}

void flex_ue_state_change::MergeFrom(const flex_ue_state_change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_state_change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_config()->::protocol::flex_ue_config::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_state_change::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_state_change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_state_change::CopyFrom(const flex_ue_state_change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_state_change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_state_change::IsInitialized() const {
  return true;
}

void flex_ue_state_change::Swap(flex_ue_state_change* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_state_change::InternalSwap(flex_ue_state_change* other) {
  std::swap(header_, other->header_);
  std::swap(config_, other->config_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_state_change::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_state_change

// optional .protocol.flex_header header = 1;
bool flex_ue_state_change::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_state_change::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_state_change::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_state_change::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_ue_state_change::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_state_change.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_ue_state_change::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_state_change.header)
  return header_;
}
::protocol::flex_header* flex_ue_state_change::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_state_change.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_ue_state_change::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_state_change.header)
}

// optional uint32 type = 2;
bool flex_ue_state_change::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ue_state_change::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ue_state_change::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ue_state_change::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 flex_ue_state_change::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_state_change.type)
  return type_;
}
void flex_ue_state_change::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_state_change.type)
}

// optional .protocol.flex_ue_config config = 3;
bool flex_ue_state_change::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ue_state_change::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ue_state_change::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ue_state_change::clear_config() {
  if (config_ != NULL) config_->::protocol::flex_ue_config::Clear();
  clear_has_config();
}
const ::protocol::flex_ue_config& flex_ue_state_change::config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_state_change.config)
  return config_ != NULL ? *config_
                         : *::protocol::flex_ue_config::internal_default_instance();
}
::protocol::flex_ue_config* flex_ue_state_change::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    config_ = new ::protocol::flex_ue_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_state_change.config)
  return config_;
}
::protocol::flex_ue_config* flex_ue_state_change::release_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_state_change.config)
  clear_has_config();
  ::protocol::flex_ue_config* temp = config_;
  config_ = NULL;
  return temp;
}
void flex_ue_state_change::set_allocated_config(::protocol::flex_ue_config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_state_change.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_control_delegation::kHeaderFieldNumber;
const int flex_control_delegation::kDelegationTypeFieldNumber;
const int flex_control_delegation::kPayloadFieldNumber;
const int flex_control_delegation::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_control_delegation::flex_control_delegation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_control_delegation)
}
flex_control_delegation::flex_control_delegation(const flex_control_delegation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  delegation_type_ = from.delegation_type_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_control_delegation)
}

void flex_control_delegation::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&delegation_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(delegation_type_));
}

flex_control_delegation::~flex_control_delegation() {
  // @@protoc_insertion_point(destructor:protocol.flex_control_delegation)
  SharedDtor();
}

void flex_control_delegation::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_control_delegation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_control_delegation::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_control_delegation& flex_control_delegation::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_control_delegation* flex_control_delegation::New(::google::protobuf::Arena* arena) const {
  flex_control_delegation* n = new flex_control_delegation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_control_delegation::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_control_delegation)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_payload()) {
      GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::protocol::flex_header::Clear();
    }
  }
  delegation_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_control_delegation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_control_delegation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delegation_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_delegation_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delegation_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_control_delegation.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_control_delegation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_control_delegation)
  return false;
#undef DO_
}

void flex_control_delegation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_control_delegation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 delegation_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delegation_type(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_control_delegation.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_control_delegation)
}

::google::protobuf::uint8* flex_control_delegation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_control_delegation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 delegation_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->delegation_type(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_control_delegation.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_control_delegation)
  return target;
}

size_t flex_control_delegation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_control_delegation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 delegation_type = 2;
    if (has_delegation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delegation_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_control_delegation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_control_delegation)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_control_delegation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_control_delegation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_control_delegation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_control_delegation)
    MergeFrom(*source);
  }
}

void flex_control_delegation::MergeFrom(const flex_control_delegation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_control_delegation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000008u) {
      delegation_type_ = from.delegation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_control_delegation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_control_delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_control_delegation::CopyFrom(const flex_control_delegation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_control_delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_control_delegation::IsInitialized() const {
  return true;
}

void flex_control_delegation::Swap(flex_control_delegation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_control_delegation::InternalSwap(flex_control_delegation* other) {
  payload_.Swap(&other->payload_);
  name_.Swap(&other->name_);
  std::swap(header_, other->header_);
  std::swap(delegation_type_, other->delegation_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_control_delegation::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_control_delegation

// optional .protocol.flex_header header = 1;
bool flex_control_delegation::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_control_delegation::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_control_delegation::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_control_delegation::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_control_delegation::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_control_delegation.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_control_delegation::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_control_delegation.header)
  return header_;
}
::protocol::flex_header* flex_control_delegation::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_control_delegation.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_control_delegation::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_control_delegation.header)
}

// optional uint32 delegation_type = 2;
bool flex_control_delegation::has_delegation_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_control_delegation::set_has_delegation_type() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_control_delegation::clear_has_delegation_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_control_delegation::clear_delegation_type() {
  delegation_type_ = 0u;
  clear_has_delegation_type();
}
::google::protobuf::uint32 flex_control_delegation::delegation_type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_control_delegation.delegation_type)
  return delegation_type_;
}
void flex_control_delegation::set_delegation_type(::google::protobuf::uint32 value) {
  set_has_delegation_type();
  delegation_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_control_delegation.delegation_type)
}

// optional bytes payload = 3;
bool flex_control_delegation::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_control_delegation::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_control_delegation::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_control_delegation::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& flex_control_delegation::payload() const {
  // @@protoc_insertion_point(field_get:protocol.flex_control_delegation.payload)
  return payload_.GetNoArena();
}
void flex_control_delegation::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_control_delegation.payload)
}
#if LANG_CXX11
void flex_control_delegation::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_control_delegation.payload)
}
#endif
void flex_control_delegation::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_control_delegation.payload)
}
void flex_control_delegation::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_control_delegation.payload)
}
::std::string* flex_control_delegation::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:protocol.flex_control_delegation.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_control_delegation::release_payload() {
  // @@protoc_insertion_point(field_release:protocol.flex_control_delegation.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_control_delegation::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_control_delegation.payload)
}

// optional string name = 4;
bool flex_control_delegation::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_control_delegation::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_control_delegation::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_control_delegation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& flex_control_delegation::name() const {
  // @@protoc_insertion_point(field_get:protocol.flex_control_delegation.name)
  return name_.GetNoArena();
}
void flex_control_delegation::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_control_delegation.name)
}
#if LANG_CXX11
void flex_control_delegation::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_control_delegation.name)
}
#endif
void flex_control_delegation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_control_delegation.name)
}
void flex_control_delegation::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_control_delegation.name)
}
::std::string* flex_control_delegation::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.flex_control_delegation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_control_delegation::release_name() {
  // @@protoc_insertion_point(field_release:protocol.flex_control_delegation.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_control_delegation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_control_delegation.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_agent_reconfiguration::kHeaderFieldNumber;
const int flex_agent_reconfiguration::kPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_agent_reconfiguration::flex_agent_reconfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_agent_reconfiguration)
}
flex_agent_reconfiguration::flex_agent_reconfiguration(const flex_agent_reconfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_policy()) {
    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_agent_reconfiguration)
}

void flex_agent_reconfiguration::SharedCtor() {
  _cached_size_ = 0;
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

flex_agent_reconfiguration::~flex_agent_reconfiguration() {
  // @@protoc_insertion_point(destructor:protocol.flex_agent_reconfiguration)
  SharedDtor();
}

void flex_agent_reconfiguration::SharedDtor() {
  policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_agent_reconfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_agent_reconfiguration::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_agent_reconfiguration& flex_agent_reconfiguration::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_agent_reconfiguration* flex_agent_reconfiguration::New(::google::protobuf::Arena* arena) const {
  flex_agent_reconfiguration* n = new flex_agent_reconfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_agent_reconfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_agent_reconfiguration)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_policy()) {
      GOOGLE_DCHECK(!policy_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*policy_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::protocol::flex_header::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_agent_reconfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_agent_reconfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string policy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_agent_reconfiguration.policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_agent_reconfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_agent_reconfiguration)
  return false;
#undef DO_
}

void flex_agent_reconfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_agent_reconfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string policy = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_agent_reconfiguration.policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->policy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_agent_reconfiguration)
}

::google::protobuf::uint8* flex_agent_reconfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_agent_reconfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional string policy = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_agent_reconfiguration.policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->policy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_agent_reconfiguration)
  return target;
}

size_t flex_agent_reconfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_agent_reconfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string policy = 2;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional .protocol.flex_header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_agent_reconfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_agent_reconfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_agent_reconfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_agent_reconfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_agent_reconfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_agent_reconfiguration)
    MergeFrom(*source);
  }
}

void flex_agent_reconfiguration::MergeFrom(const flex_agent_reconfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_agent_reconfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_policy();
      policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::protocol::flex_header::MergeFrom(from.header());
    }
  }
}

void flex_agent_reconfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_agent_reconfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_agent_reconfiguration::CopyFrom(const flex_agent_reconfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_agent_reconfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_agent_reconfiguration::IsInitialized() const {
  return true;
}

void flex_agent_reconfiguration::Swap(flex_agent_reconfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_agent_reconfiguration::InternalSwap(flex_agent_reconfiguration* other) {
  policy_.Swap(&other->policy_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_agent_reconfiguration::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_agent_reconfiguration

// optional .protocol.flex_header header = 1;
bool flex_agent_reconfiguration::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_agent_reconfiguration::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_agent_reconfiguration::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_agent_reconfiguration::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_agent_reconfiguration::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_agent_reconfiguration.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_agent_reconfiguration::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_agent_reconfiguration.header)
  return header_;
}
::protocol::flex_header* flex_agent_reconfiguration::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_agent_reconfiguration.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_agent_reconfiguration::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_agent_reconfiguration.header)
}

// optional string policy = 2;
bool flex_agent_reconfiguration::has_policy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_agent_reconfiguration::set_has_policy() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_agent_reconfiguration::clear_has_policy() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_agent_reconfiguration::clear_policy() {
  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_policy();
}
const ::std::string& flex_agent_reconfiguration::policy() const {
  // @@protoc_insertion_point(field_get:protocol.flex_agent_reconfiguration.policy)
  return policy_.GetNoArena();
}
void flex_agent_reconfiguration::set_policy(const ::std::string& value) {
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_agent_reconfiguration.policy)
}
#if LANG_CXX11
void flex_agent_reconfiguration::set_policy(::std::string&& value) {
  set_has_policy();
  policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_agent_reconfiguration.policy)
}
#endif
void flex_agent_reconfiguration::set_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_agent_reconfiguration.policy)
}
void flex_agent_reconfiguration::set_policy(const char* value, size_t size) {
  set_has_policy();
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_agent_reconfiguration.policy)
}
::std::string* flex_agent_reconfiguration::mutable_policy() {
  set_has_policy();
  // @@protoc_insertion_point(field_mutable:protocol.flex_agent_reconfiguration.policy)
  return policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_agent_reconfiguration::release_policy() {
  // @@protoc_insertion_point(field_release:protocol.flex_agent_reconfiguration.policy)
  clear_has_policy();
  return policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_agent_reconfiguration::set_allocated_policy(::std::string* policy) {
  if (policy != NULL) {
    set_has_policy();
  } else {
    clear_has_policy();
  }
  policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_agent_reconfiguration.policy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_echo_request_latency::flex_echo_request_latency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_echo_request_latency)
}
flex_echo_request_latency::flex_echo_request_latency(const flex_echo_request_latency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_request_latency)
}

void flex_echo_request_latency::SharedCtor() {
  _cached_size_ = 0;
}

flex_echo_request_latency::~flex_echo_request_latency() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_request_latency)
  SharedDtor();
}

void flex_echo_request_latency::SharedDtor() {
}

void flex_echo_request_latency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_echo_request_latency::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_echo_request_latency& flex_echo_request_latency::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_echo_request_latency* flex_echo_request_latency::New(::google::protobuf::Arena* arena) const {
  flex_echo_request_latency* n = new flex_echo_request_latency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_echo_request_latency::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_request_latency)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_echo_request_latency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_echo_request_latency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_echo_request_latency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_echo_request_latency)
  return false;
#undef DO_
}

void flex_echo_request_latency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_echo_request_latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_echo_request_latency)
}

::google::protobuf::uint8* flex_echo_request_latency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_request_latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_request_latency)
  return target;
}

size_t flex_echo_request_latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_request_latency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_echo_request_latency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_request_latency)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_request_latency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_echo_request_latency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_request_latency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_request_latency)
    MergeFrom(*source);
  }
}

void flex_echo_request_latency::MergeFrom(const flex_echo_request_latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_request_latency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void flex_echo_request_latency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_request_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_request_latency::CopyFrom(const flex_echo_request_latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_request_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_request_latency::IsInitialized() const {
  return true;
}

void flex_echo_request_latency::Swap(flex_echo_request_latency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_echo_request_latency::InternalSwap(flex_echo_request_latency* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_echo_request_latency::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_echo_request_latency

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_echo_reply_latency::flex_echo_reply_latency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_echo_reply_latency)
}
flex_echo_reply_latency::flex_echo_reply_latency(const flex_echo_reply_latency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_reply_latency)
}

void flex_echo_reply_latency::SharedCtor() {
  _cached_size_ = 0;
}

flex_echo_reply_latency::~flex_echo_reply_latency() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_reply_latency)
  SharedDtor();
}

void flex_echo_reply_latency::SharedDtor() {
}

void flex_echo_reply_latency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_echo_reply_latency::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_echo_reply_latency& flex_echo_reply_latency::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_echo_reply_latency* flex_echo_reply_latency::New(::google::protobuf::Arena* arena) const {
  flex_echo_reply_latency* n = new flex_echo_reply_latency;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_echo_reply_latency::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_reply_latency)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_echo_reply_latency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_echo_reply_latency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_echo_reply_latency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_echo_reply_latency)
  return false;
#undef DO_
}

void flex_echo_reply_latency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_echo_reply_latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_echo_reply_latency)
}

::google::protobuf::uint8* flex_echo_reply_latency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_reply_latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_reply_latency)
  return target;
}

size_t flex_echo_reply_latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_reply_latency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_echo_reply_latency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_reply_latency)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_reply_latency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_echo_reply_latency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_reply_latency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_reply_latency)
    MergeFrom(*source);
  }
}

void flex_echo_reply_latency::MergeFrom(const flex_echo_reply_latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_reply_latency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void flex_echo_reply_latency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_reply_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_reply_latency::CopyFrom(const flex_echo_reply_latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_reply_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_reply_latency::IsInitialized() const {
  return true;
}

void flex_echo_reply_latency::Swap(flex_echo_reply_latency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_echo_reply_latency::InternalSwap(flex_echo_reply_latency* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_echo_reply_latency::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_echo_reply_latency

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_disconnect::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_disconnect::flex_disconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_flexran_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_disconnect)
}
flex_disconnect::flex_disconnect(const flex_disconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_disconnect)
}

void flex_disconnect::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

flex_disconnect::~flex_disconnect() {
  // @@protoc_insertion_point(destructor:protocol.flex_disconnect)
  SharedDtor();
}

void flex_disconnect::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void flex_disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_disconnect::descriptor() {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_disconnect& flex_disconnect::default_instance() {
  protobuf_flexran_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_disconnect* flex_disconnect::New(::google::protobuf::Arena* arena) const {
  flex_disconnect* n = new flex_disconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_disconnect)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::protocol::flex_header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_disconnect)
  return false;
#undef DO_
}

void flex_disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_disconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_disconnect)
}

::google::protobuf::uint8* flex_disconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_disconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_disconnect)
  return target;
}

size_t flex_disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_disconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .protocol.flex_header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_disconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_disconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_disconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_disconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_disconnect)
    MergeFrom(*source);
  }
}

void flex_disconnect::MergeFrom(const flex_disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::protocol::flex_header::MergeFrom(from.header());
  }
}

void flex_disconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_disconnect::CopyFrom(const flex_disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_disconnect::IsInitialized() const {
  return true;
}

void flex_disconnect::Swap(flex_disconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_disconnect::InternalSwap(flex_disconnect* other) {
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_disconnect::GetMetadata() const {
  protobuf_flexran_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_flexran_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_disconnect

// optional .protocol.flex_header header = 1;
bool flex_disconnect::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_disconnect::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_disconnect::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_disconnect::clear_header() {
  if (header_ != NULL) header_->::protocol::flex_header::Clear();
  clear_has_header();
}
const ::protocol::flex_header& flex_disconnect::header() const {
  // @@protoc_insertion_point(field_get:protocol.flex_disconnect.header)
  return header_ != NULL ? *header_
                         : *::protocol::flex_header::internal_default_instance();
}
::protocol::flex_header* flex_disconnect::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::protocol::flex_header;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_disconnect.header)
  return header_;
}
::protocol::flex_header* flex_disconnect::release_header() {
  // @@protoc_insertion_point(field_release:protocol.flex_disconnect.header)
  clear_has_header();
  ::protocol::flex_header* temp = header_;
  header_ = NULL;
  return temp;
}
void flex_disconnect::set_allocated_header(::protocol::flex_header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_disconnect.header)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_echo_request_latency::kLatencyFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protocol::flex_echo_request,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  flex_echo_request_latency::latency(kLatencyFieldNumber, 0u);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_echo_reply_latency::kLatencyFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protocol::flex_echo_reply,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  flex_echo_reply_latency::latency(kLatencyFieldNumber, 0u);

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
