// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mac_primitives.proto

#ifndef PROTOBUF_mac_5fprimitives_2eproto__INCLUDED
#define PROTOBUF_mac_5fprimitives_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace protocol {
class flex_dl_dci;
class flex_dl_dciDefaultTypeInternal;
extern flex_dl_dciDefaultTypeInternal _flex_dl_dci_default_instance_;
class flex_rlc_pdu;
class flex_rlc_pduDefaultTypeInternal;
extern flex_rlc_pduDefaultTypeInternal _flex_rlc_pdu_default_instance_;
class flex_rlc_pdu_tb;
class flex_rlc_pdu_tbDefaultTypeInternal;
extern flex_rlc_pdu_tbDefaultTypeInternal _flex_rlc_pdu_tb_default_instance_;
class flex_ul_dci;
class flex_ul_dciDefaultTypeInternal;
extern flex_ul_dciDefaultTypeInternal _flex_ul_dci_default_instance_;
}  // namespace protocol

namespace protocol {

namespace protobuf_mac_5fprimitives_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mac_5fprimitives_2eproto

enum flex_dci_format {
  FLDCIF_1 = 0,
  FLDCIF_1A = 1,
  FLDCIF_1B = 2,
  FLDCIF_1C = 3,
  FLDCIF_1D = 4,
  FLDCIF_2 = 5,
  FLDCIF_2A = 6,
  FLDCIF_2B = 7,
  FLDCIF_3 = 8,
  FLDCIF_3A = 9
};
bool flex_dci_format_IsValid(int value);
const flex_dci_format flex_dci_format_MIN = FLDCIF_1;
const flex_dci_format flex_dci_format_MAX = FLDCIF_3A;
const int flex_dci_format_ARRAYSIZE = flex_dci_format_MAX + 1;

const ::google::protobuf::EnumDescriptor* flex_dci_format_descriptor();
inline const ::std::string& flex_dci_format_Name(flex_dci_format value) {
  return ::google::protobuf::internal::NameOfEnum(
    flex_dci_format_descriptor(), value);
}
inline bool flex_dci_format_Parse(
    const ::std::string& name, flex_dci_format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<flex_dci_format>(
    flex_dci_format_descriptor(), name, value);
}
enum flex_vrb_format {
  FLVRBF_LOCALIZED = 0,
  FLVRBF_DISTRIBUTED = 1
};
bool flex_vrb_format_IsValid(int value);
const flex_vrb_format flex_vrb_format_MIN = FLVRBF_LOCALIZED;
const flex_vrb_format flex_vrb_format_MAX = FLVRBF_DISTRIBUTED;
const int flex_vrb_format_ARRAYSIZE = flex_vrb_format_MAX + 1;

const ::google::protobuf::EnumDescriptor* flex_vrb_format_descriptor();
inline const ::std::string& flex_vrb_format_Name(flex_vrb_format value) {
  return ::google::protobuf::internal::NameOfEnum(
    flex_vrb_format_descriptor(), value);
}
inline bool flex_vrb_format_Parse(
    const ::std::string& name, flex_vrb_format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<flex_vrb_format>(
    flex_vrb_format_descriptor(), name, value);
}
enum flex_ngap_val {
  FLNGV_1 = 0,
  FLNGV_2 = 1
};
bool flex_ngap_val_IsValid(int value);
const flex_ngap_val flex_ngap_val_MIN = FLNGV_1;
const flex_ngap_val flex_ngap_val_MAX = FLNGV_2;
const int flex_ngap_val_ARRAYSIZE = flex_ngap_val_MAX + 1;

const ::google::protobuf::EnumDescriptor* flex_ngap_val_descriptor();
inline const ::std::string& flex_ngap_val_Name(flex_ngap_val value) {
  return ::google::protobuf::internal::NameOfEnum(
    flex_ngap_val_descriptor(), value);
}
inline bool flex_ngap_val_Parse(
    const ::std::string& name, flex_ngap_val* value) {
  return ::google::protobuf::internal::ParseNamedEnum<flex_ngap_val>(
    flex_ngap_val_descriptor(), name, value);
}
// ===================================================================

class flex_dl_dci : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_dl_dci) */ {
 public:
  flex_dl_dci();
  virtual ~flex_dl_dci();

  flex_dl_dci(const flex_dl_dci& from);

  inline flex_dl_dci& operator=(const flex_dl_dci& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_dl_dci& default_instance();

  static inline const flex_dl_dci* internal_default_instance() {
    return reinterpret_cast<const flex_dl_dci*>(
               &_flex_dl_dci_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(flex_dl_dci* other);

  // implements Message ----------------------------------------------

  inline flex_dl_dci* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_dl_dci* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_dl_dci& from);
  void MergeFrom(const flex_dl_dci& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_dl_dci* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 tbs_size = 5;
  int tbs_size_size() const;
  void clear_tbs_size();
  static const int kTbsSizeFieldNumber = 5;
  ::google::protobuf::uint32 tbs_size(int index) const;
  void set_tbs_size(int index, ::google::protobuf::uint32 value);
  void add_tbs_size(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tbs_size() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tbs_size();

  // repeated uint32 mcs = 6;
  int mcs_size() const;
  void clear_mcs();
  static const int kMcsFieldNumber = 6;
  ::google::protobuf::uint32 mcs(int index) const;
  void set_mcs(int index, ::google::protobuf::uint32 value);
  void add_mcs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mcs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mcs();

  // repeated uint32 ndi = 7;
  int ndi_size() const;
  void clear_ndi();
  static const int kNdiFieldNumber = 7;
  ::google::protobuf::uint32 ndi(int index) const;
  void set_ndi(int index, ::google::protobuf::uint32 value);
  void add_ndi(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ndi() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ndi();

  // repeated uint32 rv = 8;
  int rv_size() const;
  void clear_rv();
  static const int kRvFieldNumber = 8;
  ::google::protobuf::uint32 rv(int index) const;
  void set_rv(int index, ::google::protobuf::uint32 value);
  void add_rv(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rv() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rv();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  void clear_rnti();
  static const int kRntiFieldNumber = 1;
  ::google::protobuf::uint32 rnti() const;
  void set_rnti(::google::protobuf::uint32 value);

  // optional uint32 res_alloc = 2;
  bool has_res_alloc() const;
  void clear_res_alloc();
  static const int kResAllocFieldNumber = 2;
  ::google::protobuf::uint32 res_alloc() const;
  void set_res_alloc(::google::protobuf::uint32 value);

  // optional uint32 rb_bitmap = 3;
  bool has_rb_bitmap() const;
  void clear_rb_bitmap();
  static const int kRbBitmapFieldNumber = 3;
  ::google::protobuf::uint32 rb_bitmap() const;
  void set_rb_bitmap(::google::protobuf::uint32 value);

  // optional uint32 rb_shift = 4;
  bool has_rb_shift() const;
  void clear_rb_shift();
  static const int kRbShiftFieldNumber = 4;
  ::google::protobuf::uint32 rb_shift() const;
  void set_rb_shift(::google::protobuf::uint32 value);

  // optional uint32 cce_index = 9;
  bool has_cce_index() const;
  void clear_cce_index();
  static const int kCceIndexFieldNumber = 9;
  ::google::protobuf::uint32 cce_index() const;
  void set_cce_index(::google::protobuf::uint32 value);

  // optional uint32 aggr_level = 10;
  bool has_aggr_level() const;
  void clear_aggr_level();
  static const int kAggrLevelFieldNumber = 10;
  ::google::protobuf::uint32 aggr_level() const;
  void set_aggr_level(::google::protobuf::uint32 value);

  // optional uint32 precoding_info = 11;
  bool has_precoding_info() const;
  void clear_precoding_info();
  static const int kPrecodingInfoFieldNumber = 11;
  ::google::protobuf::uint32 precoding_info() const;
  void set_precoding_info(::google::protobuf::uint32 value);

  // optional uint32 format = 12;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 12;
  ::google::protobuf::uint32 format() const;
  void set_format(::google::protobuf::uint32 value);

  // optional uint32 tpc = 13;
  bool has_tpc() const;
  void clear_tpc();
  static const int kTpcFieldNumber = 13;
  ::google::protobuf::uint32 tpc() const;
  void set_tpc(::google::protobuf::uint32 value);

  // optional uint32 harq_process = 14;
  bool has_harq_process() const;
  void clear_harq_process();
  static const int kHarqProcessFieldNumber = 14;
  ::google::protobuf::uint32 harq_process() const;
  void set_harq_process(::google::protobuf::uint32 value);

  // optional uint32 dai = 15;
  bool has_dai() const;
  void clear_dai();
  static const int kDaiFieldNumber = 15;
  ::google::protobuf::uint32 dai() const;
  void set_dai(::google::protobuf::uint32 value);

  // optional uint32 vrb_format = 16;
  bool has_vrb_format() const;
  void clear_vrb_format();
  static const int kVrbFormatFieldNumber = 16;
  ::google::protobuf::uint32 vrb_format() const;
  void set_vrb_format(::google::protobuf::uint32 value);

  // optional uint32 tb_swap = 17;
  bool has_tb_swap() const;
  void clear_tb_swap();
  static const int kTbSwapFieldNumber = 17;
  ::google::protobuf::uint32 tb_swap() const;
  void set_tb_swap(::google::protobuf::uint32 value);

  // optional uint32 sps_release = 18;
  bool has_sps_release() const;
  void clear_sps_release();
  static const int kSpsReleaseFieldNumber = 18;
  ::google::protobuf::uint32 sps_release() const;
  void set_sps_release(::google::protobuf::uint32 value);

  // optional uint32 pdcch_order = 19;
  bool has_pdcch_order() const;
  void clear_pdcch_order();
  static const int kPdcchOrderFieldNumber = 19;
  ::google::protobuf::uint32 pdcch_order() const;
  void set_pdcch_order(::google::protobuf::uint32 value);

  // optional uint32 preamble_index = 20;
  bool has_preamble_index() const;
  void clear_preamble_index();
  static const int kPreambleIndexFieldNumber = 20;
  ::google::protobuf::uint32 preamble_index() const;
  void set_preamble_index(::google::protobuf::uint32 value);

  // optional uint32 prach_mask_index = 21;
  bool has_prach_mask_index() const;
  void clear_prach_mask_index();
  static const int kPrachMaskIndexFieldNumber = 21;
  ::google::protobuf::uint32 prach_mask_index() const;
  void set_prach_mask_index(::google::protobuf::uint32 value);

  // optional uint32 n_gap = 22;
  bool has_n_gap() const;
  void clear_n_gap();
  static const int kNGapFieldNumber = 22;
  ::google::protobuf::uint32 n_gap() const;
  void set_n_gap(::google::protobuf::uint32 value);

  // optional uint32 tbs_idx = 23;
  bool has_tbs_idx() const;
  void clear_tbs_idx();
  static const int kTbsIdxFieldNumber = 23;
  ::google::protobuf::uint32 tbs_idx() const;
  void set_tbs_idx(::google::protobuf::uint32 value);

  // optional uint32 dl_power_offset = 24;
  bool has_dl_power_offset() const;
  void clear_dl_power_offset();
  static const int kDlPowerOffsetFieldNumber = 24;
  ::google::protobuf::uint32 dl_power_offset() const;
  void set_dl_power_offset(::google::protobuf::uint32 value);

  // optional uint32 pdcch_power_offset = 25;
  bool has_pdcch_power_offset() const;
  void clear_pdcch_power_offset();
  static const int kPdcchPowerOffsetFieldNumber = 25;
  ::google::protobuf::uint32 pdcch_power_offset() const;
  void set_pdcch_power_offset(::google::protobuf::uint32 value);

  // optional uint32 cif_present = 26;
  bool has_cif_present() const;
  void clear_cif_present();
  static const int kCifPresentFieldNumber = 26;
  ::google::protobuf::uint32 cif_present() const;
  void set_cif_present(::google::protobuf::uint32 value);

  // optional uint32 cif = 27;
  bool has_cif() const;
  void clear_cif();
  static const int kCifFieldNumber = 27;
  ::google::protobuf::uint32 cif() const;
  void set_cif(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.flex_dl_dci)
 private:
  void set_has_rnti();
  void clear_has_rnti();
  void set_has_res_alloc();
  void clear_has_res_alloc();
  void set_has_rb_bitmap();
  void clear_has_rb_bitmap();
  void set_has_rb_shift();
  void clear_has_rb_shift();
  void set_has_cce_index();
  void clear_has_cce_index();
  void set_has_aggr_level();
  void clear_has_aggr_level();
  void set_has_precoding_info();
  void clear_has_precoding_info();
  void set_has_format();
  void clear_has_format();
  void set_has_tpc();
  void clear_has_tpc();
  void set_has_harq_process();
  void clear_has_harq_process();
  void set_has_dai();
  void clear_has_dai();
  void set_has_vrb_format();
  void clear_has_vrb_format();
  void set_has_tb_swap();
  void clear_has_tb_swap();
  void set_has_sps_release();
  void clear_has_sps_release();
  void set_has_pdcch_order();
  void clear_has_pdcch_order();
  void set_has_preamble_index();
  void clear_has_preamble_index();
  void set_has_prach_mask_index();
  void clear_has_prach_mask_index();
  void set_has_n_gap();
  void clear_has_n_gap();
  void set_has_tbs_idx();
  void clear_has_tbs_idx();
  void set_has_dl_power_offset();
  void clear_has_dl_power_offset();
  void set_has_pdcch_power_offset();
  void clear_has_pdcch_power_offset();
  void set_has_cif_present();
  void clear_has_cif_present();
  void set_has_cif();
  void clear_has_cif();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tbs_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mcs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ndi_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rv_;
  ::google::protobuf::uint32 rnti_;
  ::google::protobuf::uint32 res_alloc_;
  ::google::protobuf::uint32 rb_bitmap_;
  ::google::protobuf::uint32 rb_shift_;
  ::google::protobuf::uint32 cce_index_;
  ::google::protobuf::uint32 aggr_level_;
  ::google::protobuf::uint32 precoding_info_;
  ::google::protobuf::uint32 format_;
  ::google::protobuf::uint32 tpc_;
  ::google::protobuf::uint32 harq_process_;
  ::google::protobuf::uint32 dai_;
  ::google::protobuf::uint32 vrb_format_;
  ::google::protobuf::uint32 tb_swap_;
  ::google::protobuf::uint32 sps_release_;
  ::google::protobuf::uint32 pdcch_order_;
  ::google::protobuf::uint32 preamble_index_;
  ::google::protobuf::uint32 prach_mask_index_;
  ::google::protobuf::uint32 n_gap_;
  ::google::protobuf::uint32 tbs_idx_;
  ::google::protobuf::uint32 dl_power_offset_;
  ::google::protobuf::uint32 pdcch_power_offset_;
  ::google::protobuf::uint32 cif_present_;
  ::google::protobuf::uint32 cif_;
  friend struct protobuf_mac_5fprimitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_ul_dci : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ul_dci) */ {
 public:
  flex_ul_dci();
  virtual ~flex_ul_dci();

  flex_ul_dci(const flex_ul_dci& from);

  inline flex_ul_dci& operator=(const flex_ul_dci& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_ul_dci& default_instance();

  static inline const flex_ul_dci* internal_default_instance() {
    return reinterpret_cast<const flex_ul_dci*>(
               &_flex_ul_dci_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(flex_ul_dci* other);

  // implements Message ----------------------------------------------

  inline flex_ul_dci* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_ul_dci* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_ul_dci& from);
  void MergeFrom(const flex_ul_dci& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_ul_dci* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  void clear_rnti();
  static const int kRntiFieldNumber = 1;
  ::google::protobuf::uint32 rnti() const;
  void set_rnti(::google::protobuf::uint32 value);

  // optional uint32 rb_start = 2;
  bool has_rb_start() const;
  void clear_rb_start();
  static const int kRbStartFieldNumber = 2;
  ::google::protobuf::uint32 rb_start() const;
  void set_rb_start(::google::protobuf::uint32 value);

  // optional uint32 rb_len = 3;
  bool has_rb_len() const;
  void clear_rb_len();
  static const int kRbLenFieldNumber = 3;
  ::google::protobuf::uint32 rb_len() const;
  void set_rb_len(::google::protobuf::uint32 value);

  // optional uint32 mcs = 4;
  bool has_mcs() const;
  void clear_mcs();
  static const int kMcsFieldNumber = 4;
  ::google::protobuf::uint32 mcs() const;
  void set_mcs(::google::protobuf::uint32 value);

  // optional uint32 cyclic_shift2 = 5;
  bool has_cyclic_shift2() const;
  void clear_cyclic_shift2();
  static const int kCyclicShift2FieldNumber = 5;
  ::google::protobuf::uint32 cyclic_shift2() const;
  void set_cyclic_shift2(::google::protobuf::uint32 value);

  // optional uint32 freq_hop_flag = 6;
  bool has_freq_hop_flag() const;
  void clear_freq_hop_flag();
  static const int kFreqHopFlagFieldNumber = 6;
  ::google::protobuf::uint32 freq_hop_flag() const;
  void set_freq_hop_flag(::google::protobuf::uint32 value);

  // optional uint32 freq_hop_map = 7;
  bool has_freq_hop_map() const;
  void clear_freq_hop_map();
  static const int kFreqHopMapFieldNumber = 7;
  ::google::protobuf::uint32 freq_hop_map() const;
  void set_freq_hop_map(::google::protobuf::uint32 value);

  // optional uint32 ndi = 8;
  bool has_ndi() const;
  void clear_ndi();
  static const int kNdiFieldNumber = 8;
  ::google::protobuf::uint32 ndi() const;
  void set_ndi(::google::protobuf::uint32 value);

  // optional uint32 rv = 9;
  bool has_rv() const;
  void clear_rv();
  static const int kRvFieldNumber = 9;
  ::google::protobuf::uint32 rv() const;
  void set_rv(::google::protobuf::uint32 value);

  // optional uint32 harq_pid = 10;
  bool has_harq_pid() const;
  void clear_harq_pid();
  static const int kHarqPidFieldNumber = 10;
  ::google::protobuf::uint32 harq_pid() const;
  void set_harq_pid(::google::protobuf::uint32 value);

  // optional uint32 ultx_mode = 11;
  bool has_ultx_mode() const;
  void clear_ultx_mode();
  static const int kUltxModeFieldNumber = 11;
  ::google::protobuf::uint32 ultx_mode() const;
  void set_ultx_mode(::google::protobuf::uint32 value);

  // optional uint32 tbs_size = 12;
  bool has_tbs_size() const;
  void clear_tbs_size();
  static const int kTbsSizeFieldNumber = 12;
  ::google::protobuf::uint32 tbs_size() const;
  void set_tbs_size(::google::protobuf::uint32 value);

  // optional uint32 n_srs = 13;
  bool has_n_srs() const;
  void clear_n_srs();
  static const int kNSrsFieldNumber = 13;
  ::google::protobuf::uint32 n_srs() const;
  void set_n_srs(::google::protobuf::uint32 value);

  // optional uint32 res_alloc = 14;
  bool has_res_alloc() const;
  void clear_res_alloc();
  static const int kResAllocFieldNumber = 14;
  ::google::protobuf::uint32 res_alloc() const;
  void set_res_alloc(::google::protobuf::uint32 value);

  // optional uint32 size = 15;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 15;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional uint32 dai = 16;
  bool has_dai() const;
  void clear_dai();
  static const int kDaiFieldNumber = 16;
  ::google::protobuf::uint32 dai() const;
  void set_dai(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.flex_ul_dci)
 private:
  void set_has_rnti();
  void clear_has_rnti();
  void set_has_rb_start();
  void clear_has_rb_start();
  void set_has_rb_len();
  void clear_has_rb_len();
  void set_has_mcs();
  void clear_has_mcs();
  void set_has_cyclic_shift2();
  void clear_has_cyclic_shift2();
  void set_has_freq_hop_flag();
  void clear_has_freq_hop_flag();
  void set_has_freq_hop_map();
  void clear_has_freq_hop_map();
  void set_has_ndi();
  void clear_has_ndi();
  void set_has_rv();
  void clear_has_rv();
  void set_has_harq_pid();
  void clear_has_harq_pid();
  void set_has_ultx_mode();
  void clear_has_ultx_mode();
  void set_has_tbs_size();
  void clear_has_tbs_size();
  void set_has_n_srs();
  void clear_has_n_srs();
  void set_has_res_alloc();
  void clear_has_res_alloc();
  void set_has_size();
  void clear_has_size();
  void set_has_dai();
  void clear_has_dai();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 rnti_;
  ::google::protobuf::uint32 rb_start_;
  ::google::protobuf::uint32 rb_len_;
  ::google::protobuf::uint32 mcs_;
  ::google::protobuf::uint32 cyclic_shift2_;
  ::google::protobuf::uint32 freq_hop_flag_;
  ::google::protobuf::uint32 freq_hop_map_;
  ::google::protobuf::uint32 ndi_;
  ::google::protobuf::uint32 rv_;
  ::google::protobuf::uint32 harq_pid_;
  ::google::protobuf::uint32 ultx_mode_;
  ::google::protobuf::uint32 tbs_size_;
  ::google::protobuf::uint32 n_srs_;
  ::google::protobuf::uint32 res_alloc_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 dai_;
  friend struct protobuf_mac_5fprimitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_rlc_pdu : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_rlc_pdu) */ {
 public:
  flex_rlc_pdu();
  virtual ~flex_rlc_pdu();

  flex_rlc_pdu(const flex_rlc_pdu& from);

  inline flex_rlc_pdu& operator=(const flex_rlc_pdu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_rlc_pdu& default_instance();

  static inline const flex_rlc_pdu* internal_default_instance() {
    return reinterpret_cast<const flex_rlc_pdu*>(
               &_flex_rlc_pdu_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(flex_rlc_pdu* other);

  // implements Message ----------------------------------------------

  inline flex_rlc_pdu* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_rlc_pdu* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_rlc_pdu& from);
  void MergeFrom(const flex_rlc_pdu& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_rlc_pdu* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  int rlc_pdu_tb_size() const;
  void clear_rlc_pdu_tb();
  static const int kRlcPduTbFieldNumber = 1;
  const ::protocol::flex_rlc_pdu_tb& rlc_pdu_tb(int index) const;
  ::protocol::flex_rlc_pdu_tb* mutable_rlc_pdu_tb(int index);
  ::protocol::flex_rlc_pdu_tb* add_rlc_pdu_tb();
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >*
      mutable_rlc_pdu_tb();
  const ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >&
      rlc_pdu_tb() const;

  // @@protoc_insertion_point(class_scope:protocol.flex_rlc_pdu)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb > rlc_pdu_tb_;
  friend struct protobuf_mac_5fprimitives_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_rlc_pdu_tb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_rlc_pdu_tb) */ {
 public:
  flex_rlc_pdu_tb();
  virtual ~flex_rlc_pdu_tb();

  flex_rlc_pdu_tb(const flex_rlc_pdu_tb& from);

  inline flex_rlc_pdu_tb& operator=(const flex_rlc_pdu_tb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_rlc_pdu_tb& default_instance();

  static inline const flex_rlc_pdu_tb* internal_default_instance() {
    return reinterpret_cast<const flex_rlc_pdu_tb*>(
               &_flex_rlc_pdu_tb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(flex_rlc_pdu_tb* other);

  // implements Message ----------------------------------------------

  inline flex_rlc_pdu_tb* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_rlc_pdu_tb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_rlc_pdu_tb& from);
  void MergeFrom(const flex_rlc_pdu_tb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_rlc_pdu_tb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 logical_channel_id = 1;
  bool has_logical_channel_id() const;
  void clear_logical_channel_id();
  static const int kLogicalChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 logical_channel_id() const;
  void set_logical_channel_id(::google::protobuf::uint32 value);

  // optional uint32 size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.flex_rlc_pdu_tb)
 private:
  void set_has_logical_channel_id();
  void clear_has_logical_channel_id();
  void set_has_size();
  void clear_has_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 logical_channel_id_;
  ::google::protobuf::uint32 size_;
  friend struct protobuf_mac_5fprimitives_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_dci

// optional uint32 rnti = 1;
inline bool flex_dl_dci::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_dl_dci::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_dl_dci::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_dl_dci::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
inline ::google::protobuf::uint32 flex_dl_dci::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rnti)
  return rnti_;
}
inline void flex_dl_dci::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rnti)
}

// optional uint32 res_alloc = 2;
inline bool flex_dl_dci::has_res_alloc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_dl_dci::set_has_res_alloc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_dl_dci::clear_has_res_alloc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_dl_dci::clear_res_alloc() {
  res_alloc_ = 0u;
  clear_has_res_alloc();
}
inline ::google::protobuf::uint32 flex_dl_dci::res_alloc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.res_alloc)
  return res_alloc_;
}
inline void flex_dl_dci::set_res_alloc(::google::protobuf::uint32 value) {
  set_has_res_alloc();
  res_alloc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.res_alloc)
}

// optional uint32 rb_bitmap = 3;
inline bool flex_dl_dci::has_rb_bitmap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flex_dl_dci::set_has_rb_bitmap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flex_dl_dci::clear_has_rb_bitmap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flex_dl_dci::clear_rb_bitmap() {
  rb_bitmap_ = 0u;
  clear_has_rb_bitmap();
}
inline ::google::protobuf::uint32 flex_dl_dci::rb_bitmap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rb_bitmap)
  return rb_bitmap_;
}
inline void flex_dl_dci::set_rb_bitmap(::google::protobuf::uint32 value) {
  set_has_rb_bitmap();
  rb_bitmap_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rb_bitmap)
}

// optional uint32 rb_shift = 4;
inline bool flex_dl_dci::has_rb_shift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flex_dl_dci::set_has_rb_shift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flex_dl_dci::clear_has_rb_shift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flex_dl_dci::clear_rb_shift() {
  rb_shift_ = 0u;
  clear_has_rb_shift();
}
inline ::google::protobuf::uint32 flex_dl_dci::rb_shift() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rb_shift)
  return rb_shift_;
}
inline void flex_dl_dci::set_rb_shift(::google::protobuf::uint32 value) {
  set_has_rb_shift();
  rb_shift_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rb_shift)
}

// repeated uint32 tbs_size = 5;
inline int flex_dl_dci::tbs_size_size() const {
  return tbs_size_.size();
}
inline void flex_dl_dci::clear_tbs_size() {
  tbs_size_.Clear();
}
inline ::google::protobuf::uint32 flex_dl_dci::tbs_size(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tbs_size)
  return tbs_size_.Get(index);
}
inline void flex_dl_dci::set_tbs_size(int index, ::google::protobuf::uint32 value) {
  tbs_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tbs_size)
}
inline void flex_dl_dci::add_tbs_size(::google::protobuf::uint32 value) {
  tbs_size_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.tbs_size)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::tbs_size() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.tbs_size)
  return tbs_size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_tbs_size() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.tbs_size)
  return &tbs_size_;
}

// repeated uint32 mcs = 6;
inline int flex_dl_dci::mcs_size() const {
  return mcs_.size();
}
inline void flex_dl_dci::clear_mcs() {
  mcs_.Clear();
}
inline ::google::protobuf::uint32 flex_dl_dci::mcs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.mcs)
  return mcs_.Get(index);
}
inline void flex_dl_dci::set_mcs(int index, ::google::protobuf::uint32 value) {
  mcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.mcs)
}
inline void flex_dl_dci::add_mcs(::google::protobuf::uint32 value) {
  mcs_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.mcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::mcs() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.mcs)
  return mcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_mcs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.mcs)
  return &mcs_;
}

// repeated uint32 ndi = 7;
inline int flex_dl_dci::ndi_size() const {
  return ndi_.size();
}
inline void flex_dl_dci::clear_ndi() {
  ndi_.Clear();
}
inline ::google::protobuf::uint32 flex_dl_dci::ndi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.ndi)
  return ndi_.Get(index);
}
inline void flex_dl_dci::set_ndi(int index, ::google::protobuf::uint32 value) {
  ndi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.ndi)
}
inline void flex_dl_dci::add_ndi(::google::protobuf::uint32 value) {
  ndi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.ndi)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::ndi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.ndi)
  return ndi_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_ndi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.ndi)
  return &ndi_;
}

// repeated uint32 rv = 8;
inline int flex_dl_dci::rv_size() const {
  return rv_.size();
}
inline void flex_dl_dci::clear_rv() {
  rv_.Clear();
}
inline ::google::protobuf::uint32 flex_dl_dci::rv(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rv)
  return rv_.Get(index);
}
inline void flex_dl_dci::set_rv(int index, ::google::protobuf::uint32 value) {
  rv_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rv)
}
inline void flex_dl_dci::add_rv(::google::protobuf::uint32 value) {
  rv_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.rv)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::rv() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.rv)
  return rv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_rv() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.rv)
  return &rv_;
}

// optional uint32 cce_index = 9;
inline bool flex_dl_dci::has_cce_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flex_dl_dci::set_has_cce_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void flex_dl_dci::clear_has_cce_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void flex_dl_dci::clear_cce_index() {
  cce_index_ = 0u;
  clear_has_cce_index();
}
inline ::google::protobuf::uint32 flex_dl_dci::cce_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cce_index)
  return cce_index_;
}
inline void flex_dl_dci::set_cce_index(::google::protobuf::uint32 value) {
  set_has_cce_index();
  cce_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cce_index)
}

// optional uint32 aggr_level = 10;
inline bool flex_dl_dci::has_aggr_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void flex_dl_dci::set_has_aggr_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void flex_dl_dci::clear_has_aggr_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void flex_dl_dci::clear_aggr_level() {
  aggr_level_ = 0u;
  clear_has_aggr_level();
}
inline ::google::protobuf::uint32 flex_dl_dci::aggr_level() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.aggr_level)
  return aggr_level_;
}
inline void flex_dl_dci::set_aggr_level(::google::protobuf::uint32 value) {
  set_has_aggr_level();
  aggr_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.aggr_level)
}

// optional uint32 precoding_info = 11;
inline bool flex_dl_dci::has_precoding_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void flex_dl_dci::set_has_precoding_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void flex_dl_dci::clear_has_precoding_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void flex_dl_dci::clear_precoding_info() {
  precoding_info_ = 0u;
  clear_has_precoding_info();
}
inline ::google::protobuf::uint32 flex_dl_dci::precoding_info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.precoding_info)
  return precoding_info_;
}
inline void flex_dl_dci::set_precoding_info(::google::protobuf::uint32 value) {
  set_has_precoding_info();
  precoding_info_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.precoding_info)
}

// optional uint32 format = 12;
inline bool flex_dl_dci::has_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void flex_dl_dci::set_has_format() {
  _has_bits_[0] |= 0x00000080u;
}
inline void flex_dl_dci::clear_has_format() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void flex_dl_dci::clear_format() {
  format_ = 0u;
  clear_has_format();
}
inline ::google::protobuf::uint32 flex_dl_dci::format() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.format)
  return format_;
}
inline void flex_dl_dci::set_format(::google::protobuf::uint32 value) {
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.format)
}

// optional uint32 tpc = 13;
inline bool flex_dl_dci::has_tpc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void flex_dl_dci::set_has_tpc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void flex_dl_dci::clear_has_tpc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void flex_dl_dci::clear_tpc() {
  tpc_ = 0u;
  clear_has_tpc();
}
inline ::google::protobuf::uint32 flex_dl_dci::tpc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tpc)
  return tpc_;
}
inline void flex_dl_dci::set_tpc(::google::protobuf::uint32 value) {
  set_has_tpc();
  tpc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tpc)
}

// optional uint32 harq_process = 14;
inline bool flex_dl_dci::has_harq_process() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void flex_dl_dci::set_has_harq_process() {
  _has_bits_[0] |= 0x00000200u;
}
inline void flex_dl_dci::clear_has_harq_process() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void flex_dl_dci::clear_harq_process() {
  harq_process_ = 0u;
  clear_has_harq_process();
}
inline ::google::protobuf::uint32 flex_dl_dci::harq_process() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.harq_process)
  return harq_process_;
}
inline void flex_dl_dci::set_harq_process(::google::protobuf::uint32 value) {
  set_has_harq_process();
  harq_process_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.harq_process)
}

// optional uint32 dai = 15;
inline bool flex_dl_dci::has_dai() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void flex_dl_dci::set_has_dai() {
  _has_bits_[0] |= 0x00000400u;
}
inline void flex_dl_dci::clear_has_dai() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void flex_dl_dci::clear_dai() {
  dai_ = 0u;
  clear_has_dai();
}
inline ::google::protobuf::uint32 flex_dl_dci::dai() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.dai)
  return dai_;
}
inline void flex_dl_dci::set_dai(::google::protobuf::uint32 value) {
  set_has_dai();
  dai_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.dai)
}

// optional uint32 vrb_format = 16;
inline bool flex_dl_dci::has_vrb_format() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void flex_dl_dci::set_has_vrb_format() {
  _has_bits_[0] |= 0x00000800u;
}
inline void flex_dl_dci::clear_has_vrb_format() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void flex_dl_dci::clear_vrb_format() {
  vrb_format_ = 0u;
  clear_has_vrb_format();
}
inline ::google::protobuf::uint32 flex_dl_dci::vrb_format() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.vrb_format)
  return vrb_format_;
}
inline void flex_dl_dci::set_vrb_format(::google::protobuf::uint32 value) {
  set_has_vrb_format();
  vrb_format_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.vrb_format)
}

// optional uint32 tb_swap = 17;
inline bool flex_dl_dci::has_tb_swap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void flex_dl_dci::set_has_tb_swap() {
  _has_bits_[0] |= 0x00001000u;
}
inline void flex_dl_dci::clear_has_tb_swap() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void flex_dl_dci::clear_tb_swap() {
  tb_swap_ = 0u;
  clear_has_tb_swap();
}
inline ::google::protobuf::uint32 flex_dl_dci::tb_swap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tb_swap)
  return tb_swap_;
}
inline void flex_dl_dci::set_tb_swap(::google::protobuf::uint32 value) {
  set_has_tb_swap();
  tb_swap_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tb_swap)
}

// optional uint32 sps_release = 18;
inline bool flex_dl_dci::has_sps_release() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void flex_dl_dci::set_has_sps_release() {
  _has_bits_[0] |= 0x00002000u;
}
inline void flex_dl_dci::clear_has_sps_release() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void flex_dl_dci::clear_sps_release() {
  sps_release_ = 0u;
  clear_has_sps_release();
}
inline ::google::protobuf::uint32 flex_dl_dci::sps_release() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.sps_release)
  return sps_release_;
}
inline void flex_dl_dci::set_sps_release(::google::protobuf::uint32 value) {
  set_has_sps_release();
  sps_release_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.sps_release)
}

// optional uint32 pdcch_order = 19;
inline bool flex_dl_dci::has_pdcch_order() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void flex_dl_dci::set_has_pdcch_order() {
  _has_bits_[0] |= 0x00004000u;
}
inline void flex_dl_dci::clear_has_pdcch_order() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void flex_dl_dci::clear_pdcch_order() {
  pdcch_order_ = 0u;
  clear_has_pdcch_order();
}
inline ::google::protobuf::uint32 flex_dl_dci::pdcch_order() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.pdcch_order)
  return pdcch_order_;
}
inline void flex_dl_dci::set_pdcch_order(::google::protobuf::uint32 value) {
  set_has_pdcch_order();
  pdcch_order_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.pdcch_order)
}

// optional uint32 preamble_index = 20;
inline bool flex_dl_dci::has_preamble_index() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void flex_dl_dci::set_has_preamble_index() {
  _has_bits_[0] |= 0x00008000u;
}
inline void flex_dl_dci::clear_has_preamble_index() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void flex_dl_dci::clear_preamble_index() {
  preamble_index_ = 0u;
  clear_has_preamble_index();
}
inline ::google::protobuf::uint32 flex_dl_dci::preamble_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.preamble_index)
  return preamble_index_;
}
inline void flex_dl_dci::set_preamble_index(::google::protobuf::uint32 value) {
  set_has_preamble_index();
  preamble_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.preamble_index)
}

// optional uint32 prach_mask_index = 21;
inline bool flex_dl_dci::has_prach_mask_index() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void flex_dl_dci::set_has_prach_mask_index() {
  _has_bits_[0] |= 0x00010000u;
}
inline void flex_dl_dci::clear_has_prach_mask_index() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void flex_dl_dci::clear_prach_mask_index() {
  prach_mask_index_ = 0u;
  clear_has_prach_mask_index();
}
inline ::google::protobuf::uint32 flex_dl_dci::prach_mask_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.prach_mask_index)
  return prach_mask_index_;
}
inline void flex_dl_dci::set_prach_mask_index(::google::protobuf::uint32 value) {
  set_has_prach_mask_index();
  prach_mask_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.prach_mask_index)
}

// optional uint32 n_gap = 22;
inline bool flex_dl_dci::has_n_gap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void flex_dl_dci::set_has_n_gap() {
  _has_bits_[0] |= 0x00020000u;
}
inline void flex_dl_dci::clear_has_n_gap() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void flex_dl_dci::clear_n_gap() {
  n_gap_ = 0u;
  clear_has_n_gap();
}
inline ::google::protobuf::uint32 flex_dl_dci::n_gap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.n_gap)
  return n_gap_;
}
inline void flex_dl_dci::set_n_gap(::google::protobuf::uint32 value) {
  set_has_n_gap();
  n_gap_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.n_gap)
}

// optional uint32 tbs_idx = 23;
inline bool flex_dl_dci::has_tbs_idx() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void flex_dl_dci::set_has_tbs_idx() {
  _has_bits_[0] |= 0x00040000u;
}
inline void flex_dl_dci::clear_has_tbs_idx() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void flex_dl_dci::clear_tbs_idx() {
  tbs_idx_ = 0u;
  clear_has_tbs_idx();
}
inline ::google::protobuf::uint32 flex_dl_dci::tbs_idx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tbs_idx)
  return tbs_idx_;
}
inline void flex_dl_dci::set_tbs_idx(::google::protobuf::uint32 value) {
  set_has_tbs_idx();
  tbs_idx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tbs_idx)
}

// optional uint32 dl_power_offset = 24;
inline bool flex_dl_dci::has_dl_power_offset() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void flex_dl_dci::set_has_dl_power_offset() {
  _has_bits_[0] |= 0x00080000u;
}
inline void flex_dl_dci::clear_has_dl_power_offset() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void flex_dl_dci::clear_dl_power_offset() {
  dl_power_offset_ = 0u;
  clear_has_dl_power_offset();
}
inline ::google::protobuf::uint32 flex_dl_dci::dl_power_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.dl_power_offset)
  return dl_power_offset_;
}
inline void flex_dl_dci::set_dl_power_offset(::google::protobuf::uint32 value) {
  set_has_dl_power_offset();
  dl_power_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.dl_power_offset)
}

// optional uint32 pdcch_power_offset = 25;
inline bool flex_dl_dci::has_pdcch_power_offset() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void flex_dl_dci::set_has_pdcch_power_offset() {
  _has_bits_[0] |= 0x00100000u;
}
inline void flex_dl_dci::clear_has_pdcch_power_offset() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void flex_dl_dci::clear_pdcch_power_offset() {
  pdcch_power_offset_ = 0u;
  clear_has_pdcch_power_offset();
}
inline ::google::protobuf::uint32 flex_dl_dci::pdcch_power_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.pdcch_power_offset)
  return pdcch_power_offset_;
}
inline void flex_dl_dci::set_pdcch_power_offset(::google::protobuf::uint32 value) {
  set_has_pdcch_power_offset();
  pdcch_power_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.pdcch_power_offset)
}

// optional uint32 cif_present = 26;
inline bool flex_dl_dci::has_cif_present() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void flex_dl_dci::set_has_cif_present() {
  _has_bits_[0] |= 0x00200000u;
}
inline void flex_dl_dci::clear_has_cif_present() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void flex_dl_dci::clear_cif_present() {
  cif_present_ = 0u;
  clear_has_cif_present();
}
inline ::google::protobuf::uint32 flex_dl_dci::cif_present() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cif_present)
  return cif_present_;
}
inline void flex_dl_dci::set_cif_present(::google::protobuf::uint32 value) {
  set_has_cif_present();
  cif_present_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cif_present)
}

// optional uint32 cif = 27;
inline bool flex_dl_dci::has_cif() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void flex_dl_dci::set_has_cif() {
  _has_bits_[0] |= 0x00400000u;
}
inline void flex_dl_dci::clear_has_cif() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void flex_dl_dci::clear_cif() {
  cif_ = 0u;
  clear_has_cif();
}
inline ::google::protobuf::uint32 flex_dl_dci::cif() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cif)
  return cif_;
}
inline void flex_dl_dci::set_cif(::google::protobuf::uint32 value) {
  set_has_cif();
  cif_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cif)
}

// -------------------------------------------------------------------

// flex_ul_dci

// optional uint32 rnti = 1;
inline bool flex_ul_dci::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_ul_dci::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_ul_dci::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_ul_dci::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
inline ::google::protobuf::uint32 flex_ul_dci::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rnti)
  return rnti_;
}
inline void flex_ul_dci::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rnti)
}

// optional uint32 rb_start = 2;
inline bool flex_ul_dci::has_rb_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_ul_dci::set_has_rb_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_ul_dci::clear_has_rb_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_ul_dci::clear_rb_start() {
  rb_start_ = 0u;
  clear_has_rb_start();
}
inline ::google::protobuf::uint32 flex_ul_dci::rb_start() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rb_start)
  return rb_start_;
}
inline void flex_ul_dci::set_rb_start(::google::protobuf::uint32 value) {
  set_has_rb_start();
  rb_start_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rb_start)
}

// optional uint32 rb_len = 3;
inline bool flex_ul_dci::has_rb_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flex_ul_dci::set_has_rb_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flex_ul_dci::clear_has_rb_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flex_ul_dci::clear_rb_len() {
  rb_len_ = 0u;
  clear_has_rb_len();
}
inline ::google::protobuf::uint32 flex_ul_dci::rb_len() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rb_len)
  return rb_len_;
}
inline void flex_ul_dci::set_rb_len(::google::protobuf::uint32 value) {
  set_has_rb_len();
  rb_len_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rb_len)
}

// optional uint32 mcs = 4;
inline bool flex_ul_dci::has_mcs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flex_ul_dci::set_has_mcs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flex_ul_dci::clear_has_mcs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flex_ul_dci::clear_mcs() {
  mcs_ = 0u;
  clear_has_mcs();
}
inline ::google::protobuf::uint32 flex_ul_dci::mcs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.mcs)
  return mcs_;
}
inline void flex_ul_dci::set_mcs(::google::protobuf::uint32 value) {
  set_has_mcs();
  mcs_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.mcs)
}

// optional uint32 cyclic_shift2 = 5;
inline bool flex_ul_dci::has_cyclic_shift2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flex_ul_dci::set_has_cyclic_shift2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void flex_ul_dci::clear_has_cyclic_shift2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void flex_ul_dci::clear_cyclic_shift2() {
  cyclic_shift2_ = 0u;
  clear_has_cyclic_shift2();
}
inline ::google::protobuf::uint32 flex_ul_dci::cyclic_shift2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.cyclic_shift2)
  return cyclic_shift2_;
}
inline void flex_ul_dci::set_cyclic_shift2(::google::protobuf::uint32 value) {
  set_has_cyclic_shift2();
  cyclic_shift2_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.cyclic_shift2)
}

// optional uint32 freq_hop_flag = 6;
inline bool flex_ul_dci::has_freq_hop_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void flex_ul_dci::set_has_freq_hop_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void flex_ul_dci::clear_has_freq_hop_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void flex_ul_dci::clear_freq_hop_flag() {
  freq_hop_flag_ = 0u;
  clear_has_freq_hop_flag();
}
inline ::google::protobuf::uint32 flex_ul_dci::freq_hop_flag() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.freq_hop_flag)
  return freq_hop_flag_;
}
inline void flex_ul_dci::set_freq_hop_flag(::google::protobuf::uint32 value) {
  set_has_freq_hop_flag();
  freq_hop_flag_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.freq_hop_flag)
}

// optional uint32 freq_hop_map = 7;
inline bool flex_ul_dci::has_freq_hop_map() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void flex_ul_dci::set_has_freq_hop_map() {
  _has_bits_[0] |= 0x00000040u;
}
inline void flex_ul_dci::clear_has_freq_hop_map() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void flex_ul_dci::clear_freq_hop_map() {
  freq_hop_map_ = 0u;
  clear_has_freq_hop_map();
}
inline ::google::protobuf::uint32 flex_ul_dci::freq_hop_map() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.freq_hop_map)
  return freq_hop_map_;
}
inline void flex_ul_dci::set_freq_hop_map(::google::protobuf::uint32 value) {
  set_has_freq_hop_map();
  freq_hop_map_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.freq_hop_map)
}

// optional uint32 ndi = 8;
inline bool flex_ul_dci::has_ndi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void flex_ul_dci::set_has_ndi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void flex_ul_dci::clear_has_ndi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void flex_ul_dci::clear_ndi() {
  ndi_ = 0u;
  clear_has_ndi();
}
inline ::google::protobuf::uint32 flex_ul_dci::ndi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.ndi)
  return ndi_;
}
inline void flex_ul_dci::set_ndi(::google::protobuf::uint32 value) {
  set_has_ndi();
  ndi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.ndi)
}

// optional uint32 rv = 9;
inline bool flex_ul_dci::has_rv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void flex_ul_dci::set_has_rv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void flex_ul_dci::clear_has_rv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void flex_ul_dci::clear_rv() {
  rv_ = 0u;
  clear_has_rv();
}
inline ::google::protobuf::uint32 flex_ul_dci::rv() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rv)
  return rv_;
}
inline void flex_ul_dci::set_rv(::google::protobuf::uint32 value) {
  set_has_rv();
  rv_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rv)
}

// optional uint32 harq_pid = 10;
inline bool flex_ul_dci::has_harq_pid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void flex_ul_dci::set_has_harq_pid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void flex_ul_dci::clear_has_harq_pid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void flex_ul_dci::clear_harq_pid() {
  harq_pid_ = 0u;
  clear_has_harq_pid();
}
inline ::google::protobuf::uint32 flex_ul_dci::harq_pid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.harq_pid)
  return harq_pid_;
}
inline void flex_ul_dci::set_harq_pid(::google::protobuf::uint32 value) {
  set_has_harq_pid();
  harq_pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.harq_pid)
}

// optional uint32 ultx_mode = 11;
inline bool flex_ul_dci::has_ultx_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void flex_ul_dci::set_has_ultx_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void flex_ul_dci::clear_has_ultx_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void flex_ul_dci::clear_ultx_mode() {
  ultx_mode_ = 0u;
  clear_has_ultx_mode();
}
inline ::google::protobuf::uint32 flex_ul_dci::ultx_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.ultx_mode)
  return ultx_mode_;
}
inline void flex_ul_dci::set_ultx_mode(::google::protobuf::uint32 value) {
  set_has_ultx_mode();
  ultx_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.ultx_mode)
}

// optional uint32 tbs_size = 12;
inline bool flex_ul_dci::has_tbs_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void flex_ul_dci::set_has_tbs_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void flex_ul_dci::clear_has_tbs_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void flex_ul_dci::clear_tbs_size() {
  tbs_size_ = 0u;
  clear_has_tbs_size();
}
inline ::google::protobuf::uint32 flex_ul_dci::tbs_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.tbs_size)
  return tbs_size_;
}
inline void flex_ul_dci::set_tbs_size(::google::protobuf::uint32 value) {
  set_has_tbs_size();
  tbs_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.tbs_size)
}

// optional uint32 n_srs = 13;
inline bool flex_ul_dci::has_n_srs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void flex_ul_dci::set_has_n_srs() {
  _has_bits_[0] |= 0x00001000u;
}
inline void flex_ul_dci::clear_has_n_srs() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void flex_ul_dci::clear_n_srs() {
  n_srs_ = 0u;
  clear_has_n_srs();
}
inline ::google::protobuf::uint32 flex_ul_dci::n_srs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.n_srs)
  return n_srs_;
}
inline void flex_ul_dci::set_n_srs(::google::protobuf::uint32 value) {
  set_has_n_srs();
  n_srs_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.n_srs)
}

// optional uint32 res_alloc = 14;
inline bool flex_ul_dci::has_res_alloc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void flex_ul_dci::set_has_res_alloc() {
  _has_bits_[0] |= 0x00002000u;
}
inline void flex_ul_dci::clear_has_res_alloc() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void flex_ul_dci::clear_res_alloc() {
  res_alloc_ = 0u;
  clear_has_res_alloc();
}
inline ::google::protobuf::uint32 flex_ul_dci::res_alloc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.res_alloc)
  return res_alloc_;
}
inline void flex_ul_dci::set_res_alloc(::google::protobuf::uint32 value) {
  set_has_res_alloc();
  res_alloc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.res_alloc)
}

// optional uint32 size = 15;
inline bool flex_ul_dci::has_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void flex_ul_dci::set_has_size() {
  _has_bits_[0] |= 0x00004000u;
}
inline void flex_ul_dci::clear_has_size() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void flex_ul_dci::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 flex_ul_dci::size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.size)
  return size_;
}
inline void flex_ul_dci::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.size)
}

// optional uint32 dai = 16;
inline bool flex_ul_dci::has_dai() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void flex_ul_dci::set_has_dai() {
  _has_bits_[0] |= 0x00008000u;
}
inline void flex_ul_dci::clear_has_dai() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void flex_ul_dci::clear_dai() {
  dai_ = 0u;
  clear_has_dai();
}
inline ::google::protobuf::uint32 flex_ul_dci::dai() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.dai)
  return dai_;
}
inline void flex_ul_dci::set_dai(::google::protobuf::uint32 value) {
  set_has_dai();
  dai_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.dai)
}

// -------------------------------------------------------------------

// flex_rlc_pdu

// repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
inline int flex_rlc_pdu::rlc_pdu_tb_size() const {
  return rlc_pdu_tb_.size();
}
inline void flex_rlc_pdu::clear_rlc_pdu_tb() {
  rlc_pdu_tb_.Clear();
}
inline const ::protocol::flex_rlc_pdu_tb& flex_rlc_pdu::rlc_pdu_tb(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Get(index);
}
inline ::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::mutable_rlc_pdu_tb(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Mutable(index);
}
inline ::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::add_rlc_pdu_tb() {
  // @@protoc_insertion_point(field_add:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >*
flex_rlc_pdu::mutable_rlc_pdu_tb() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return &rlc_pdu_tb_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >&
flex_rlc_pdu::rlc_pdu_tb() const {
  // @@protoc_insertion_point(field_list:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_;
}

// -------------------------------------------------------------------

// flex_rlc_pdu_tb

// optional uint32 logical_channel_id = 1;
inline bool flex_rlc_pdu_tb::has_logical_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_rlc_pdu_tb::set_has_logical_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_rlc_pdu_tb::clear_has_logical_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_rlc_pdu_tb::clear_logical_channel_id() {
  logical_channel_id_ = 0u;
  clear_has_logical_channel_id();
}
inline ::google::protobuf::uint32 flex_rlc_pdu_tb::logical_channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu_tb.logical_channel_id)
  return logical_channel_id_;
}
inline void flex_rlc_pdu_tb::set_logical_channel_id(::google::protobuf::uint32 value) {
  set_has_logical_channel_id();
  logical_channel_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_pdu_tb.logical_channel_id)
}

// optional uint32 size = 2;
inline bool flex_rlc_pdu_tb::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_rlc_pdu_tb::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_rlc_pdu_tb::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_rlc_pdu_tb::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 flex_rlc_pdu_tb::size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu_tb.size)
  return size_;
}
inline void flex_rlc_pdu_tb::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_pdu_tb.size)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::flex_dci_format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_dci_format>() {
  return ::protocol::flex_dci_format_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_vrb_format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_vrb_format>() {
  return ::protocol::flex_vrb_format_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_ngap_val> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_ngap_val>() {
  return ::protocol::flex_ngap_val_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mac_5fprimitives_2eproto__INCLUDED
