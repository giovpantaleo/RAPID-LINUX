// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "time_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_dl_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_info> {
} _flex_dl_info_default_instance_;
class flex_ul_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_info> {
} _flex_ul_info_default_instance_;

namespace protobuf_time_5fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_info, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_info, harq_process_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_info, harq_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_info, serv_cell_index_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, ul_reception_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, reception_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, tpc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, serv_cell_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_info, rssi_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(flex_dl_info)},
  { 13, 24, sizeof(flex_ul_info)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_info_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "time_common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_dl_info_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_ul_info_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _flex_dl_info_default_instance_.DefaultConstruct();
  _flex_ul_info_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021time_common.proto\022\010protocol\"c\n\014flex_dl"
      "_info\022\014\n\004rnti\030\001 \001(\r\022\027\n\017harq_process_id\030\002"
      " \001(\r\022\023\n\013harq_status\030\003 \003(\r\022\027\n\017serv_cell_i"
      "ndex\030\004 \001(\r\"\200\001\n\014flex_ul_info\022\014\n\004rnti\030\001 \001("
      "\r\022\024\n\014ul_reception\030\002 \003(\r\022\030\n\020reception_sta"
      "tus\030\003 \001(\r\022\013\n\003tpc\030\004 \001(\r\022\027\n\017serv_cell_inde"
      "x\030\005 \001(\r\022\014\n\004rssi\030\006 \001(\r*=\n\020flex_harq_statu"
      "s\022\014\n\010FLHS_ACK\020\000\022\r\n\tFLHS_NACK\020\001\022\014\n\010FLHS_D"
      "TX\020\002*I\n\025flex_reception_status\022\013\n\007FLRS_OK"
      "\020\000\022\017\n\013FLRS_NOT_OK\020\001\022\022\n\016FLRS_NOT_VALID\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "time_common.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_time_5fcommon_2eproto

const ::google::protobuf::EnumDescriptor* flex_harq_status_descriptor() {
  protobuf_time_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5fcommon_2eproto::file_level_enum_descriptors[0];
}
bool flex_harq_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_reception_status_descriptor() {
  protobuf_time_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5fcommon_2eproto::file_level_enum_descriptors[1];
}
bool flex_reception_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_info::kRntiFieldNumber;
const int flex_dl_info::kHarqProcessIdFieldNumber;
const int flex_dl_info::kHarqStatusFieldNumber;
const int flex_dl_info::kServCellIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_info::flex_dl_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_time_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_info)
}
flex_dl_info::flex_dl_info(const flex_dl_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      harq_status_(from.harq_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&serv_cell_index_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(serv_cell_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_info)
}

void flex_dl_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rnti_, 0, reinterpret_cast<char*>(&serv_cell_index_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(serv_cell_index_));
}

flex_dl_info::~flex_dl_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_info)
  SharedDtor();
}

void flex_dl_info::SharedDtor() {
}

void flex_dl_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_info::descriptor() {
  protobuf_time_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_info& flex_dl_info::default_instance() {
  protobuf_time_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_info* flex_dl_info::New(::google::protobuf::Arena* arena) const {
  flex_dl_info* n = new flex_dl_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_info)
  harq_status_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&serv_cell_index_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(serv_cell_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 harq_process_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_harq_process_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harq_process_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 harq_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_harq_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_harq_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 serv_cell_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_serv_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serv_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_info)
  return false;
#undef DO_
}

void flex_dl_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional uint32 harq_process_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->harq_process_id(), output);
  }

  // repeated uint32 harq_status = 3;
  for (int i = 0, n = this->harq_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->harq_status(i), output);
  }

  // optional uint32 serv_cell_index = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serv_cell_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_info)
}

::google::protobuf::uint8* flex_dl_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional uint32 harq_process_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->harq_process_id(), target);
  }

  // repeated uint32 harq_status = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->harq_status_, target);

  // optional uint32 serv_cell_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serv_cell_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_info)
  return target;
}

size_t flex_dl_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 harq_status = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->harq_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->harq_status_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 harq_process_id = 2;
    if (has_harq_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harq_process_id());
    }

    // optional uint32 serv_cell_index = 4;
    if (has_serv_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serv_cell_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_info)
    MergeFrom(*source);
  }
}

void flex_dl_info::MergeFrom(const flex_dl_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  harq_status_.MergeFrom(from.harq_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      harq_process_id_ = from.harq_process_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_info::CopyFrom(const flex_dl_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_info::IsInitialized() const {
  return true;
}

void flex_dl_info::Swap(flex_dl_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_info::InternalSwap(flex_dl_info* other) {
  harq_status_.InternalSwap(&other->harq_status_);
  std::swap(rnti_, other->rnti_);
  std::swap(harq_process_id_, other->harq_process_id_);
  std::swap(serv_cell_index_, other->serv_cell_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_info::GetMetadata() const {
  protobuf_time_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_info

// optional uint32 rnti = 1;
bool flex_dl_info::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_info::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_info::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_info::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_dl_info::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.rnti)
  return rnti_;
}
void flex_dl_info::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.rnti)
}

// optional uint32 harq_process_id = 2;
bool flex_dl_info::has_harq_process_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_info::set_has_harq_process_id() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_info::clear_has_harq_process_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_info::clear_harq_process_id() {
  harq_process_id_ = 0u;
  clear_has_harq_process_id();
}
::google::protobuf::uint32 flex_dl_info::harq_process_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.harq_process_id)
  return harq_process_id_;
}
void flex_dl_info::set_harq_process_id(::google::protobuf::uint32 value) {
  set_has_harq_process_id();
  harq_process_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.harq_process_id)
}

// repeated uint32 harq_status = 3;
int flex_dl_info::harq_status_size() const {
  return harq_status_.size();
}
void flex_dl_info::clear_harq_status() {
  harq_status_.Clear();
}
::google::protobuf::uint32 flex_dl_info::harq_status(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.harq_status)
  return harq_status_.Get(index);
}
void flex_dl_info::set_harq_status(int index, ::google::protobuf::uint32 value) {
  harq_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.harq_status)
}
void flex_dl_info::add_harq_status(::google::protobuf::uint32 value) {
  harq_status_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_info.harq_status)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_info::harq_status() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_info.harq_status)
  return harq_status_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_info::mutable_harq_status() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_info.harq_status)
  return &harq_status_;
}

// optional uint32 serv_cell_index = 4;
bool flex_dl_info::has_serv_cell_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_dl_info::set_has_serv_cell_index() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_dl_info::clear_has_serv_cell_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_dl_info::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  clear_has_serv_cell_index();
}
::google::protobuf::uint32 flex_dl_info::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.serv_cell_index)
  return serv_cell_index_;
}
void flex_dl_info::set_serv_cell_index(::google::protobuf::uint32 value) {
  set_has_serv_cell_index();
  serv_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.serv_cell_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_info::kRntiFieldNumber;
const int flex_ul_info::kUlReceptionFieldNumber;
const int flex_ul_info::kReceptionStatusFieldNumber;
const int flex_ul_info::kTpcFieldNumber;
const int flex_ul_info::kServCellIndexFieldNumber;
const int flex_ul_info::kRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_info::flex_ul_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_time_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_info)
}
flex_ul_info::flex_ul_info(const flex_ul_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ul_reception_(from.ul_reception_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&rssi_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(rssi_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_info)
}

void flex_ul_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rnti_, 0, reinterpret_cast<char*>(&rssi_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(rssi_));
}

flex_ul_info::~flex_ul_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_info)
  SharedDtor();
}

void flex_ul_info::SharedDtor() {
}

void flex_ul_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_info::descriptor() {
  protobuf_time_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_info& flex_ul_info::default_instance() {
  protobuf_time_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_info* flex_ul_info::New(::google::protobuf::Arena* arena) const {
  flex_ul_info* n = new flex_ul_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_info)
  ul_reception_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(rssi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ul_reception = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ul_reception())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ul_reception())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reception_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_reception_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reception_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tpc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tpc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 serv_cell_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_serv_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serv_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rssi = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_rssi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_info)
  return false;
#undef DO_
}

void flex_ul_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // repeated uint32 ul_reception = 2;
  for (int i = 0, n = this->ul_reception_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ul_reception(i), output);
  }

  // optional uint32 reception_status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reception_status(), output);
  }

  // optional uint32 tpc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tpc(), output);
  }

  // optional uint32 serv_cell_index = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serv_cell_index(), output);
  }

  // optional uint32 rssi = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rssi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_info)
}

::google::protobuf::uint8* flex_ul_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // repeated uint32 ul_reception = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ul_reception_, target);

  // optional uint32 reception_status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reception_status(), target);
  }

  // optional uint32 tpc = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tpc(), target);
  }

  // optional uint32 serv_cell_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serv_cell_index(), target);
  }

  // optional uint32 rssi = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rssi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_info)
  return target;
}

size_t flex_ul_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 ul_reception = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ul_reception_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ul_reception_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 reception_status = 3;
    if (has_reception_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reception_status());
    }

    // optional uint32 tpc = 4;
    if (has_tpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tpc());
    }

    // optional uint32 serv_cell_index = 5;
    if (has_serv_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serv_cell_index());
    }

    // optional uint32 rssi = 6;
    if (has_rssi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rssi());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_info)
    MergeFrom(*source);
  }
}

void flex_ul_info::MergeFrom(const flex_ul_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ul_reception_.MergeFrom(from.ul_reception_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      reception_status_ = from.reception_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      tpc_ = from.tpc_;
    }
    if (cached_has_bits & 0x00000008u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      rssi_ = from.rssi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_info::CopyFrom(const flex_ul_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_info::IsInitialized() const {
  return true;
}

void flex_ul_info::Swap(flex_ul_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_info::InternalSwap(flex_ul_info* other) {
  ul_reception_.InternalSwap(&other->ul_reception_);
  std::swap(rnti_, other->rnti_);
  std::swap(reception_status_, other->reception_status_);
  std::swap(tpc_, other->tpc_);
  std::swap(serv_cell_index_, other->serv_cell_index_);
  std::swap(rssi_, other->rssi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_info::GetMetadata() const {
  protobuf_time_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_time_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_info

// optional uint32 rnti = 1;
bool flex_ul_info::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_info::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_info::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_info::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_ul_info::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.rnti)
  return rnti_;
}
void flex_ul_info::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.rnti)
}

// repeated uint32 ul_reception = 2;
int flex_ul_info::ul_reception_size() const {
  return ul_reception_.size();
}
void flex_ul_info::clear_ul_reception() {
  ul_reception_.Clear();
}
::google::protobuf::uint32 flex_ul_info::ul_reception(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.ul_reception)
  return ul_reception_.Get(index);
}
void flex_ul_info::set_ul_reception(int index, ::google::protobuf::uint32 value) {
  ul_reception_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.ul_reception)
}
void flex_ul_info::add_ul_reception(::google::protobuf::uint32 value) {
  ul_reception_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ul_info.ul_reception)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_ul_info::ul_reception() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_info.ul_reception)
  return ul_reception_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_ul_info::mutable_ul_reception() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_info.ul_reception)
  return &ul_reception_;
}

// optional uint32 reception_status = 3;
bool flex_ul_info::has_reception_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ul_info::set_has_reception_status() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ul_info::clear_has_reception_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ul_info::clear_reception_status() {
  reception_status_ = 0u;
  clear_has_reception_status();
}
::google::protobuf::uint32 flex_ul_info::reception_status() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.reception_status)
  return reception_status_;
}
void flex_ul_info::set_reception_status(::google::protobuf::uint32 value) {
  set_has_reception_status();
  reception_status_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.reception_status)
}

// optional uint32 tpc = 4;
bool flex_ul_info::has_tpc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ul_info::set_has_tpc() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ul_info::clear_has_tpc() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ul_info::clear_tpc() {
  tpc_ = 0u;
  clear_has_tpc();
}
::google::protobuf::uint32 flex_ul_info::tpc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.tpc)
  return tpc_;
}
void flex_ul_info::set_tpc(::google::protobuf::uint32 value) {
  set_has_tpc();
  tpc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.tpc)
}

// optional uint32 serv_cell_index = 5;
bool flex_ul_info::has_serv_cell_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_ul_info::set_has_serv_cell_index() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_ul_info::clear_has_serv_cell_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ul_info::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  clear_has_serv_cell_index();
}
::google::protobuf::uint32 flex_ul_info::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.serv_cell_index)
  return serv_cell_index_;
}
void flex_ul_info::set_serv_cell_index(::google::protobuf::uint32 value) {
  set_has_serv_cell_index();
  serv_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.serv_cell_index)
}

// optional uint32 rssi = 6;
bool flex_ul_info::has_rssi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_ul_info::set_has_rssi() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_ul_info::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ul_info::clear_rssi() {
  rssi_ = 0u;
  clear_has_rssi();
}
::google::protobuf::uint32 flex_ul_info::rssi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.rssi)
  return rssi_;
}
void flex_ul_info::set_rssi(::google::protobuf::uint32 value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.rssi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
