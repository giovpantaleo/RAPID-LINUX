// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_si_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_si_config> {
} _flex_si_config_default_instance_;
class flex_si_messageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_si_message> {
} _flex_si_message_default_instance_;
class flex_slice_staticDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_slice_static> {
} _flex_slice_static_default_instance_;
class flex_sliceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_slice> {
  public:
  const ::protocol::flex_slice_static* static__;
} _flex_slice_default_instance_;
class flex_slice_dl_ul_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_slice_dl_ul_config> {
} _flex_slice_dl_ul_config_default_instance_;
class flex_drx_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_drx_config> {
} _flex_drx_config_default_instance_;
class flex_sps_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_sps_config> {
} _flex_sps_config_default_instance_;
class flex_sr_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_sr_config> {
} _flex_sr_config_default_instance_;
class flex_cqi_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_cqi_config> {
} _flex_cqi_config_default_instance_;
class flex_ue_capabilitiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_capabilities> {
} _flex_ue_capabilities_default_instance_;
class flex_scell_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_scell_config> {
} _flex_scell_config_default_instance_;
class flex_lc_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_lc_config> {
} _flex_lc_config_default_instance_;
class flex_plmnDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_plmn> {
} _flex_plmn_default_instance_;
class flex_measurement_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_measurement_info> {
} _flex_measurement_info_default_instance_;
class flex_measurement_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_measurement_event> {
} _flex_measurement_event_default_instance_;
class flex_per_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_per_event> {
} _flex_per_event_default_instance_;
class flex_a1_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_a1_event> {
} _flex_a1_event_default_instance_;
class flex_a2_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_a2_event> {
} _flex_a2_event_default_instance_;
class flex_a3_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_a3_event> {
} _flex_a3_event_default_instance_;
class flex_a4_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_a4_event> {
} _flex_a4_event_default_instance_;
class flex_a5_eventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_a5_event> {
} _flex_a5_event_default_instance_;
class flex_gummeiDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_gummei> {
} _flex_gummei_default_instance_;
class flex_s1ap_mmeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_s1ap_mme> {
} _flex_s1ap_mme_default_instance_;

namespace protobuf_config_5fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_config, sfn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_config, sib1_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_config, si_window_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_config, si_message_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_message, periodicity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_si_message, length_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_static, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_static, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_static, poslow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_static, poshigh_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, scheduler_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_slice_default_instance_), static__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice, params_),
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_dl_ul_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_dl_ul_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_dl_ul_config, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_dl_ul_config, slices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_dl_ul_config, scheduler_),
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, on_duration_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, drx_inactivity_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, drx_retransmission_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, long_drx_cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, long_drx_cycle_start_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, short_drx_cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_drx_config, drx_short_cycle_timer_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, semi_persistent_sched_interval_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, semi_persistent_sched_interval_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, num_of_conf_sps_proc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, n1_pucch_an_persistent_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sps_config, implicit_release_after_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sr_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sr_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sr_config, sr_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sr_config, sched_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_sr_config, dsr_trans_max_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cqi_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cqi_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cqi_config, cqi_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cqi_config, cqi_sched_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cqi_config, ri_sched_interval_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, half_duplex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, intra_sf_hopping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, type2_sb_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, ue_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_capabilities, res_alloc_type1_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, carrier_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, scell_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, use_ccs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, sched_cell_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_scell_config, pdsch_start_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, lcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, lcg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, qos_bearer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, qci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, e_rab_max_bitrate_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, e_rab_max_bitrate_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, e_rab_guaranteed_bitrate_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_config, e_rab_guaranteed_bitrate_dl_),
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_plmn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_plmn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_plmn, mcc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_plmn, mnc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_plmn, mnc_length_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, offset_freq_serving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, offset_freq_neighbouring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, cell_individual_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, filter_coefficient_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, filter_coefficient_rsrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_info, event_),
  1,
  2,
  ~0u,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, periodical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, a1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, a2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, a3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, a4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_measurement_event, a5_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_per_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_per_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_per_event, max_report_cells_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a1_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a1_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a1_event, threshold_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a1_event, hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a1_event, time_to_trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a1_event, max_report_cells_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a2_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a2_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a2_event, threshold_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a2_event, hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a2_event, time_to_trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a2_event, max_report_cells_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, a3_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, report_on_leave_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, time_to_trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a3_event, max_report_cells_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a4_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a4_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a4_event, threshold_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a4_event, hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a4_event, time_to_trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a4_event, max_report_cells_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, threshold_rsrp_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, threshold_rsrp_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, time_to_trigger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_a5_event, max_report_cells_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gummei, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gummei, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gummei, plmn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gummei, mme_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gummei, mme_code_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, s1_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, served_gummeis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, requested_plmns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_mme, rel_capacity_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(flex_si_config)},
  { 13, 20, sizeof(flex_si_message)},
  { 22, 29, sizeof(flex_slice_static)},
  { 31, 41, sizeof(flex_slice)},
  { 45, 53, sizeof(flex_slice_dl_ul_config)},
  { 56, 68, sizeof(flex_drx_config)},
  { 75, 85, sizeof(flex_sps_config)},
  { 90, 98, sizeof(flex_sr_config)},
  { 101, 109, sizeof(flex_cqi_config)},
  { 112, 122, sizeof(flex_ue_capabilities)},
  { 127, 137, sizeof(flex_scell_config)},
  { 142, 156, sizeof(flex_lc_config)},
  { 165, 173, sizeof(flex_plmn)},
  { 176, 187, sizeof(flex_measurement_info)},
  { 193, 204, sizeof(flex_measurement_event)},
  { 210, 216, sizeof(flex_per_event)},
  { 217, 226, sizeof(flex_a1_event)},
  { 230, 239, sizeof(flex_a2_event)},
  { 243, 253, sizeof(flex_a3_event)},
  { 258, 267, sizeof(flex_a4_event)},
  { 271, 281, sizeof(flex_a5_event)},
  { 286, 294, sizeof(flex_gummei)},
  { 297, 308, sizeof(flex_s1ap_mme)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_si_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_si_message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_slice_static_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_slice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_slice_dl_ul_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_drx_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_sps_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_sr_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_cqi_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_capabilities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_scell_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_lc_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_plmn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_measurement_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_measurement_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_per_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_a1_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_a2_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_a3_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_a4_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_a5_event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_gummei_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_s1ap_mme_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "config_common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_si_config_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_si_message_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_slice_static_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_slice_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _flex_slice_dl_ul_config_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _flex_drx_config_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _flex_sps_config_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _flex_sr_config_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _flex_cqi_config_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _flex_ue_capabilities_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _flex_scell_config_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _flex_lc_config_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _flex_plmn_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _flex_measurement_info_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _flex_measurement_event_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _flex_per_event_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _flex_a1_event_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _flex_a2_event_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _flex_a3_event_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _flex_a4_event_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _flex_a5_event_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _flex_gummei_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _flex_s1ap_mme_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _flex_si_config_default_instance_.DefaultConstruct();
  _flex_si_message_default_instance_.DefaultConstruct();
  _flex_slice_static_default_instance_.DefaultConstruct();
  _flex_slice_default_instance_.DefaultConstruct();
  _flex_slice_dl_ul_config_default_instance_.DefaultConstruct();
  _flex_drx_config_default_instance_.DefaultConstruct();
  _flex_sps_config_default_instance_.DefaultConstruct();
  _flex_sr_config_default_instance_.DefaultConstruct();
  _flex_cqi_config_default_instance_.DefaultConstruct();
  _flex_ue_capabilities_default_instance_.DefaultConstruct();
  _flex_scell_config_default_instance_.DefaultConstruct();
  _flex_lc_config_default_instance_.DefaultConstruct();
  _flex_plmn_default_instance_.DefaultConstruct();
  _flex_measurement_info_default_instance_.DefaultConstruct();
  _flex_measurement_event_default_instance_.DefaultConstruct();
  _flex_per_event_default_instance_.DefaultConstruct();
  _flex_a1_event_default_instance_.DefaultConstruct();
  _flex_a2_event_default_instance_.DefaultConstruct();
  _flex_a3_event_default_instance_.DefaultConstruct();
  _flex_a4_event_default_instance_.DefaultConstruct();
  _flex_a5_event_default_instance_.DefaultConstruct();
  _flex_gummei_default_instance_.DefaultConstruct();
  _flex_s1ap_mme_default_instance_.DefaultConstruct();
  _flex_slice_default_instance_.static__ = const_cast< ::protocol::flex_slice_static*>(
      ::protocol::flex_slice_static::internal_default_instance());
  _flex_measurement_info_default_instance_.get_mutable()->event_ = const_cast< ::protocol::flex_measurement_event*>(
      ::protocol::flex_measurement_event::internal_default_instance());
  _flex_measurement_event_default_instance_.get_mutable()->periodical_ = const_cast< ::protocol::flex_per_event*>(
      ::protocol::flex_per_event::internal_default_instance());
  _flex_measurement_event_default_instance_.get_mutable()->a1_ = const_cast< ::protocol::flex_a1_event*>(
      ::protocol::flex_a1_event::internal_default_instance());
  _flex_measurement_event_default_instance_.get_mutable()->a2_ = const_cast< ::protocol::flex_a2_event*>(
      ::protocol::flex_a2_event::internal_default_instance());
  _flex_measurement_event_default_instance_.get_mutable()->a3_ = const_cast< ::protocol::flex_a3_event*>(
      ::protocol::flex_a3_event::internal_default_instance());
  _flex_measurement_event_default_instance_.get_mutable()->a4_ = const_cast< ::protocol::flex_a4_event*>(
      ::protocol::flex_a4_event::internal_default_instance());
  _flex_measurement_event_default_instance_.get_mutable()->a5_ = const_cast< ::protocol::flex_a5_event*>(
      ::protocol::flex_a5_event::internal_default_instance());
  _flex_gummei_default_instance_.get_mutable()->plmn_ = const_cast< ::protocol::flex_plmn*>(
      ::protocol::flex_plmn::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023config_common.proto\022\010protocol\"{\n\016flex_"
      "si_config\022\013\n\003sfn\030\001 \001(\r\022\023\n\013sib1_length\030\002 "
      "\001(\r\022\030\n\020si_window_length\030\003 \001(\r\022-\n\nsi_mess"
      "age\030\004 \003(\0132\031.protocol.flex_si_message\"6\n\017"
      "flex_si_message\022\023\n\013periodicity\030\001 \001(\r\022\016\n\006"
      "length\030\002 \001(\r\"4\n\021flex_slice_static\022\016\n\006pos"
      "Low\030\001 \001(\r\022\017\n\007posHigh\030\002 \001(\r\"s\n\nflex_slice"
      "\022\n\n\002id\030\001 \001(\r\022\r\n\005label\030\002 \001(\t\022\021\n\tscheduler"
      "\030\003 \001(\t\022-\n\006static\030\n \001(\0132\033.protocol.flex_s"
      "lice_staticH\000B\010\n\006params\"\205\001\n\027flex_slice_d"
      "l_ul_config\0221\n\talgorithm\030\001 \001(\0162\036.protoco"
      "l.flex_slice_algorithm\022$\n\006slices\030\002 \003(\0132\024"
      ".protocol.flex_slice\022\021\n\tscheduler\030\003 \001(\t\""
      "\341\001\n\017flex_drx_config\022\031\n\021on_duration_timer"
      "\030\001 \001(\r\022\034\n\024drx_inactivity_timer\030\002 \001(\r\022 \n\030"
      "drx_retransmission_timer\030\003 \001(\r\022\026\n\016long_d"
      "rx_cycle\030\004 \001(\r\022#\n\033long_drx_cycle_start_o"
      "ffset\030\005 \001(\r\022\027\n\017short_drx_cycle\030\006 \001(\r\022\035\n\025"
      "drx_short_cycle_timer\030\007 \001(\r\"\315\001\n\017flex_sps"
      "_config\022)\n!semi_persistent_sched_interva"
      "l_UL\030\001 \001(\r\022)\n!semi_persistent_sched_inte"
      "rval_DL\030\002 \001(\r\022\034\n\024num_of_conf_sps_proc\030\003 "
      "\001(\r\022&\n\036n1_PUCCH_AN_persistent_element\030\004 "
      "\003(\r\022\036\n\026implicit_release_after\030\005 \001(\r\"R\n\016f"
      "lex_sr_config\022\021\n\tsr_action\030\001 \001(\r\022\026\n\016sche"
      "d_interval\030\002 \001(\r\022\025\n\rdsr_trans_max\030\003 \001(\r\""
      "\\\n\017flex_cqi_config\022\022\n\ncqi_action\030\001 \001(\r\022\032"
      "\n\022cqi_sched_interval\030\002 \001(\r\022\031\n\021ri_sched_i"
      "nterval\030\003 \001(\r\"\207\001\n\024flex_ue_capabilities\022\023"
      "\n\013half_duplex\030\001 \001(\r\022\030\n\020intra_SF_hopping\030"
      "\002 \001(\r\022\022\n\ntype2_sb_1\030\003 \001(\r\022\023\n\013ue_category"
      "\030\004 \001(\r\022\027\n\017res_alloc_type1\030\005 \001(\r\"\177\n\021flex_"
      "scell_config\022\025\n\rcarrier_index\030\001 \001(\r\022\023\n\013s"
      "cell_index\030\002 \001(\r\022\017\n\007use_ccs\030\003 \001(\r\022\030\n\020sch"
      "ed_cell_index\030\004 \001(\r\022\023\n\013pdsch_start\030\005 \001(\r"
      "\"\352\001\n\016flex_lc_config\022\014\n\004lcid\030\001 \001(\r\022\013\n\003lcg"
      "\030\002 \001(\r\022\021\n\tdirection\030\003 \001(\r\022\027\n\017qos_bearer_"
      "type\030\004 \001(\r\022\013\n\003qci\030\005 \001(\r\022\034\n\024e_RAB_max_bit"
      "rate_UL\030\006 \001(\004\022\034\n\024e_RAB_max_bitrate_DL\030\007 "
      "\001(\004\022#\n\033e_RAB_guaranteed_bitrate_UL\030\010 \001(\004"
      "\022#\n\033e_RAB_guaranteed_bitrate_DL\030\t \001(\004\"9\n"
      "\tflex_plmn\022\013\n\003mcc\030\001 \001(\r\022\013\n\003mnc\030\002 \001(\r\022\022\n\n"
      "mnc_length\030\003 \001(\r\"\351\001\n\025flex_measurement_in"
      "fo\022\033\n\023offset_freq_serving\030\001 \001(\003\022 \n\030offse"
      "t_freq_neighbouring\030\002 \001(\003\022\036\n\026cell_indivi"
      "dual_offset\030\003 \003(\003\022\037\n\027filter_coefficient_"
      "rsrp\030\004 \001(\003\022\037\n\027filter_coefficient_rsrq\030\005 "
      "\001(\003\022/\n\005event\030\006 \001(\0132 .protocol.flex_measu"
      "rement_event\"\377\001\n\026flex_measurement_event\022"
      ",\n\nperiodical\030\001 \001(\0132\030.protocol.flex_per_"
      "event\022#\n\002a1\030\002 \001(\0132\027.protocol.flex_a1_eve"
      "nt\022#\n\002a2\030\003 \001(\0132\027.protocol.flex_a2_event\022"
      "#\n\002a3\030\004 \001(\0132\027.protocol.flex_a3_event\022#\n\002"
      "a4\030\005 \001(\0132\027.protocol.flex_a4_event\022#\n\002a5\030"
      "\006 \001(\0132\027.protocol.flex_a5_event\"*\n\016flex_p"
      "er_event\022\030\n\020max_report_cells\030\001 \001(\003\"n\n\rfl"
      "ex_a1_event\022\026\n\016threshold_rsrp\030\001 \001(\003\022\022\n\nh"
      "ysteresis\030\002 \001(\003\022\027\n\017time_to_trigger\030\003 \001(\003"
      "\022\030\n\020max_report_cells\030\004 \001(\003\"n\n\rflex_a2_ev"
      "ent\022\026\n\016threshold_rsrp\030\001 \001(\003\022\022\n\nhysteresi"
      "s\030\002 \001(\003\022\027\n\017time_to_trigger\030\003 \001(\003\022\030\n\020max_"
      "report_cells\030\004 \001(\003\"\202\001\n\rflex_a3_event\022\021\n\t"
      "a3_offset\030\001 \001(\003\022\027\n\017report_on_leave\030\002 \001(\005"
      "\022\022\n\nhysteresis\030\003 \001(\003\022\027\n\017time_to_trigger\030"
      "\004 \001(\003\022\030\n\020max_report_cells\030\005 \001(\003\"n\n\rflex_"
      "a4_event\022\026\n\016threshold_rsrp\030\001 \001(\003\022\022\n\nhyst"
      "eresis\030\002 \001(\003\022\027\n\017time_to_trigger\030\003 \001(\003\022\030\n"
      "\020max_report_cells\030\004 \001(\003\"\212\001\n\rflex_a5_even"
      "t\022\030\n\020threshold_rsrp_1\030\001 \001(\003\022\030\n\020threshold"
      "_rsrp_2\030\002 \001(\003\022\022\n\nhysteresis\030\003 \001(\003\022\027\n\017tim"
      "e_to_trigger\030\004 \001(\003\022\030\n\020max_report_cells\030\005"
      " \001(\003\"X\n\013flex_gummei\022!\n\004plmn\030\001 \001(\0132\023.prot"
      "ocol.flex_plmn\022\024\n\014mme_group_id\030\002 \001(\r\022\020\n\010"
      "mme_code\030\003 \001(\r\"\310\001\n\rflex_s1ap_mme\022\r\n\005s1_i"
      "p\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\'\n\005state\030\003 \001(\0162\030.p"
      "rotocol.flex_mme_state\022-\n\016served_gummeis"
      "\030\004 \003(\0132\025.protocol.flex_gummei\022,\n\017request"
      "ed_plmns\030\005 \003(\0132\023.protocol.flex_plmn\022\024\n\014r"
      "el_capacity\030\006 \001(\r*8\n\021flex_hopping_mode\022\016"
      "\n\nFLHM_INTER\020\000\022\023\n\017FLHM_INTERINTRA\020\001*T\n\023f"
      "lex_phich_resource\022\022\n\016FLPR_ONE_SIXTH\020\000\022\r"
      "\n\tFLPR_HALF\020\001\022\014\n\010FLPR_ONE\020\002\022\014\n\010FLPR_TWO\020"
      "\003*9\n\023flex_phich_duration\022\017\n\013FLPD_NORMAL\020"
      "\000\022\021\n\rFLPD_EXTENDED\020\001*F\n\034flex_ul_cyclic_p"
      "refix_length\022\021\n\rFLUCPL_NORMAL\020\000\022\023\n\017FLUCP"
      "L_EXTENDED\020\001*F\n\034flex_dl_cyclic_prefix_le"
      "ngth\022\021\n\rFLDCPL_NORMAL\020\000\022\023\n\017FLDCPL_EXTEND"
      "ED\020\001*.\n\020flex_duplex_mode\022\014\n\010FLDM_TDD\020\000\022\014"
      "\n\010FLDM_FDD\020\001*2\n\010flex_qam\022\022\n\016FLEQ_MOD_16Q"
      "AM\020\000\022\022\n\016FLEQ_MOD_64QAM\020\001*5\n\024flex_slice_a"
      "lgorithm\022\010\n\004None\020\000\022\n\n\006Static\020\001\022\007\n\003NVS\020\002*"
      "N\n\034flex_meas_gap_config_pattern\022\016\n\nFLMGC"
      "P_GP1\020\000\022\016\n\nFLMGCP_GP2\020\001\022\016\n\nFLMGCP_OFF\020\002*"
      "\?\n\031flex_setup_release_action\022\017\n\013FLSRA_SE"
      "TUP\020\000\022\021\n\rFLSRA_RELEASE\020\001*Z\n\034flex_ue_tran"
      "smission_antenna\022\016\n\nFLUTA_NONE\020\000\022\023\n\017FLUT"
      "A_OPEN_LOOP\020\001\022\025\n\021FLUTA_CLOSED_LOOP\020\002*\206\001\n"
      "\036flex_aperiodic_cqi_report_mode\022\017\n\013FLACR"
      "M_RM12\020\000\022\017\n\013FLACRM_RM20\020\001\022\017\n\013FLACRM_RM22"
      "\020\002\022\017\n\013FLACRM_RM30\020\003\022\017\n\013FLACRM_RM31\020\004\022\017\n\013"
      "FLACRM_NONE\020\005*Q\n\037flex_tdd_ack_nack_feedb"
      "ack_mode\022\024\n\020FLTANFM_BUNDLING\020\000\022\030\n\024FLTANF"
      "M_MULTIPLEXING\020\001*\?\n\021flex_lc_direction\022\014\n"
      "\010FLLCD_UL\020\000\022\014\n\010FLLCD_DL\020\001\022\016\n\nFLLCD_BOTH\020"
      "\002*8\n\024flex_qos_bearer_type\022\021\n\rFLQBT_NON_G"
      "BR\020\000\022\r\n\tFLQBT_GBR\020\001*o\n\031flex_ue_state_cha"
      "nge_type\022\022\n\016FLUESC_UPDATED\020\000\022\024\n\020FLUESC_A"
      "CTIVATED\020\001\022\026\n\022FLUESC_DEACTIVATED\020\002\022\020\n\014FL"
      "UESC_MOVED\020\003*h\n\016flex_mme_state\022\027\n\023FLMMES"
      "_DISCONNECTED\020\000\022\022\n\016FLMMES_WAITING\020\001\022\024\n\020F"
      "LMMES_CONNECTED\020\002\022\023\n\017FLMMES_OVERLOAD\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config_common.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_config_5fcommon_2eproto

const ::google::protobuf::EnumDescriptor* flex_hopping_mode_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[0];
}
bool flex_hopping_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_phich_resource_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[1];
}
bool flex_phich_resource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_phich_duration_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[2];
}
bool flex_phich_duration_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_ul_cyclic_prefix_length_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[3];
}
bool flex_ul_cyclic_prefix_length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_dl_cyclic_prefix_length_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[4];
}
bool flex_dl_cyclic_prefix_length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_duplex_mode_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[5];
}
bool flex_duplex_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_qam_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[6];
}
bool flex_qam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_slice_algorithm_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[7];
}
bool flex_slice_algorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_meas_gap_config_pattern_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[8];
}
bool flex_meas_gap_config_pattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_setup_release_action_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[9];
}
bool flex_setup_release_action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_ue_transmission_antenna_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[10];
}
bool flex_ue_transmission_antenna_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_aperiodic_cqi_report_mode_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[11];
}
bool flex_aperiodic_cqi_report_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_tdd_ack_nack_feedback_mode_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[12];
}
bool flex_tdd_ack_nack_feedback_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_lc_direction_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[13];
}
bool flex_lc_direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_qos_bearer_type_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[14];
}
bool flex_qos_bearer_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_ue_state_change_type_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[15];
}
bool flex_ue_state_change_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_mme_state_descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_enum_descriptors[16];
}
bool flex_mme_state_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_si_config::kSfnFieldNumber;
const int flex_si_config::kSib1LengthFieldNumber;
const int flex_si_config::kSiWindowLengthFieldNumber;
const int flex_si_config::kSiMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_si_config::flex_si_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_si_config)
}
flex_si_config::flex_si_config(const flex_si_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      si_message_(from.si_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sfn_, &from.sfn_,
    reinterpret_cast<char*>(&si_window_length_) -
    reinterpret_cast<char*>(&sfn_) + sizeof(si_window_length_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_si_config)
}

void flex_si_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sfn_, 0, reinterpret_cast<char*>(&si_window_length_) -
    reinterpret_cast<char*>(&sfn_) + sizeof(si_window_length_));
}

flex_si_config::~flex_si_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_si_config)
  SharedDtor();
}

void flex_si_config::SharedDtor() {
}

void flex_si_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_si_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_si_config& flex_si_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_si_config* flex_si_config::New(::google::protobuf::Arena* arena) const {
  flex_si_config* n = new flex_si_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_si_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_si_config)
  si_message_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sfn_, 0, reinterpret_cast<char*>(&si_window_length_) -
      reinterpret_cast<char*>(&sfn_) + sizeof(si_window_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_si_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_si_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sfn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sfn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sib1_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sib1_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sib1_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 si_window_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_si_window_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &si_window_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_si_message si_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_si_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_si_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_si_config)
  return false;
#undef DO_
}

void flex_si_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_si_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sfn(), output);
  }

  // optional uint32 sib1_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sib1_length(), output);
  }

  // optional uint32 si_window_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->si_window_length(), output);
  }

  // repeated .protocol.flex_si_message si_message = 4;
  for (unsigned int i = 0, n = this->si_message_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->si_message(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_si_config)
}

::google::protobuf::uint8* flex_si_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_si_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sfn(), target);
  }

  // optional uint32 sib1_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sib1_length(), target);
  }

  // optional uint32 si_window_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->si_window_length(), target);
  }

  // repeated .protocol.flex_si_message si_message = 4;
  for (unsigned int i = 0, n = this->si_message_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->si_message(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_si_config)
  return target;
}

size_t flex_si_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_si_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_si_message si_message = 4;
  {
    unsigned int count = this->si_message_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->si_message(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sfn = 1;
    if (has_sfn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sfn());
    }

    // optional uint32 sib1_length = 2;
    if (has_sib1_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sib1_length());
    }

    // optional uint32 si_window_length = 3;
    if (has_si_window_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->si_window_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_si_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_si_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_si_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_si_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_si_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_si_config)
    MergeFrom(*source);
  }
}

void flex_si_config::MergeFrom(const flex_si_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_si_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  si_message_.MergeFrom(from.si_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sfn_ = from.sfn_;
    }
    if (cached_has_bits & 0x00000002u) {
      sib1_length_ = from.sib1_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      si_window_length_ = from.si_window_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_si_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_si_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_si_config::CopyFrom(const flex_si_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_si_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_si_config::IsInitialized() const {
  return true;
}

void flex_si_config::Swap(flex_si_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_si_config::InternalSwap(flex_si_config* other) {
  si_message_.InternalSwap(&other->si_message_);
  std::swap(sfn_, other->sfn_);
  std::swap(sib1_length_, other->sib1_length_);
  std::swap(si_window_length_, other->si_window_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_si_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_si_config

// optional uint32 sfn = 1;
bool flex_si_config::has_sfn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_si_config::set_has_sfn() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_si_config::clear_has_sfn() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_si_config::clear_sfn() {
  sfn_ = 0u;
  clear_has_sfn();
}
::google::protobuf::uint32 flex_si_config::sfn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.sfn)
  return sfn_;
}
void flex_si_config::set_sfn(::google::protobuf::uint32 value) {
  set_has_sfn();
  sfn_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_si_config.sfn)
}

// optional uint32 sib1_length = 2;
bool flex_si_config::has_sib1_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_si_config::set_has_sib1_length() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_si_config::clear_has_sib1_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_si_config::clear_sib1_length() {
  sib1_length_ = 0u;
  clear_has_sib1_length();
}
::google::protobuf::uint32 flex_si_config::sib1_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.sib1_length)
  return sib1_length_;
}
void flex_si_config::set_sib1_length(::google::protobuf::uint32 value) {
  set_has_sib1_length();
  sib1_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_si_config.sib1_length)
}

// optional uint32 si_window_length = 3;
bool flex_si_config::has_si_window_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_si_config::set_has_si_window_length() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_si_config::clear_has_si_window_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_si_config::clear_si_window_length() {
  si_window_length_ = 0u;
  clear_has_si_window_length();
}
::google::protobuf::uint32 flex_si_config::si_window_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.si_window_length)
  return si_window_length_;
}
void flex_si_config::set_si_window_length(::google::protobuf::uint32 value) {
  set_has_si_window_length();
  si_window_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_si_config.si_window_length)
}

// repeated .protocol.flex_si_message si_message = 4;
int flex_si_config::si_message_size() const {
  return si_message_.size();
}
void flex_si_config::clear_si_message() {
  si_message_.Clear();
}
const ::protocol::flex_si_message& flex_si_config::si_message(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.si_message)
  return si_message_.Get(index);
}
::protocol::flex_si_message* flex_si_config::mutable_si_message(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_si_config.si_message)
  return si_message_.Mutable(index);
}
::protocol::flex_si_message* flex_si_config::add_si_message() {
  // @@protoc_insertion_point(field_add:protocol.flex_si_config.si_message)
  return si_message_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_si_message >*
flex_si_config::mutable_si_message() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_si_config.si_message)
  return &si_message_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_si_message >&
flex_si_config::si_message() const {
  // @@protoc_insertion_point(field_list:protocol.flex_si_config.si_message)
  return si_message_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_si_message::kPeriodicityFieldNumber;
const int flex_si_message::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_si_message::flex_si_message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_si_message)
}
flex_si_message::flex_si_message(const flex_si_message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&periodicity_, &from.periodicity_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&periodicity_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_si_message)
}

void flex_si_message::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&periodicity_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&periodicity_) + sizeof(length_));
}

flex_si_message::~flex_si_message() {
  // @@protoc_insertion_point(destructor:protocol.flex_si_message)
  SharedDtor();
}

void flex_si_message::SharedDtor() {
}

void flex_si_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_si_message::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_si_message& flex_si_message::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_si_message* flex_si_message::New(::google::protobuf::Arena* arena) const {
  flex_si_message* n = new flex_si_message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_si_message::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_si_message)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&periodicity_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&periodicity_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_si_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_si_message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 periodicity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_periodicity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &periodicity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_si_message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_si_message)
  return false;
#undef DO_
}

void flex_si_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_si_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 periodicity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->periodicity(), output);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_si_message)
}

::google::protobuf::uint8* flex_si_message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_si_message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 periodicity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->periodicity(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_si_message)
  return target;
}

size_t flex_si_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_si_message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 periodicity = 1;
    if (has_periodicity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->periodicity());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_si_message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_si_message)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_si_message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_si_message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_si_message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_si_message)
    MergeFrom(*source);
  }
}

void flex_si_message::MergeFrom(const flex_si_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_si_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      periodicity_ = from.periodicity_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_si_message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_si_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_si_message::CopyFrom(const flex_si_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_si_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_si_message::IsInitialized() const {
  return true;
}

void flex_si_message::Swap(flex_si_message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_si_message::InternalSwap(flex_si_message* other) {
  std::swap(periodicity_, other->periodicity_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_si_message::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_si_message

// optional uint32 periodicity = 1;
bool flex_si_message::has_periodicity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_si_message::set_has_periodicity() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_si_message::clear_has_periodicity() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_si_message::clear_periodicity() {
  periodicity_ = 0u;
  clear_has_periodicity();
}
::google::protobuf::uint32 flex_si_message::periodicity() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_message.periodicity)
  return periodicity_;
}
void flex_si_message::set_periodicity(::google::protobuf::uint32 value) {
  set_has_periodicity();
  periodicity_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_si_message.periodicity)
}

// optional uint32 length = 2;
bool flex_si_message::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_si_message::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_si_message::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_si_message::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 flex_si_message::length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_message.length)
  return length_;
}
void flex_si_message::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_si_message.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_slice_static::kPosLowFieldNumber;
const int flex_slice_static::kPosHighFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_slice_static::flex_slice_static()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_slice_static)
}
flex_slice_static::flex_slice_static(const flex_slice_static& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poslow_, &from.poslow_,
    reinterpret_cast<char*>(&poshigh_) -
    reinterpret_cast<char*>(&poslow_) + sizeof(poshigh_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice_static)
}

void flex_slice_static::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&poslow_, 0, reinterpret_cast<char*>(&poshigh_) -
    reinterpret_cast<char*>(&poslow_) + sizeof(poshigh_));
}

flex_slice_static::~flex_slice_static() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice_static)
  SharedDtor();
}

void flex_slice_static::SharedDtor() {
}

void flex_slice_static::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_slice_static::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_slice_static& flex_slice_static::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_slice_static* flex_slice_static::New(::google::protobuf::Arena* arena) const {
  flex_slice_static* n = new flex_slice_static;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_slice_static::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice_static)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&poslow_, 0, reinterpret_cast<char*>(&poshigh_) -
      reinterpret_cast<char*>(&poslow_) + sizeof(poshigh_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_slice_static::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_slice_static)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 posLow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_poslow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poslow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 posHigh = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_poshigh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poshigh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_slice_static)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_slice_static)
  return false;
#undef DO_
}

void flex_slice_static::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_slice_static)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posLow = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poslow(), output);
  }

  // optional uint32 posHigh = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->poshigh(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_slice_static)
}

::google::protobuf::uint8* flex_slice_static::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice_static)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posLow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poslow(), target);
  }

  // optional uint32 posHigh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->poshigh(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice_static)
  return target;
}

size_t flex_slice_static::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice_static)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 posLow = 1;
    if (has_poslow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poslow());
    }

    // optional uint32 posHigh = 2;
    if (has_poshigh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poshigh());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_slice_static::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice_static)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice_static* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_slice_static>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice_static)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice_static)
    MergeFrom(*source);
  }
}

void flex_slice_static::MergeFrom(const flex_slice_static& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice_static)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      poslow_ = from.poslow_;
    }
    if (cached_has_bits & 0x00000002u) {
      poshigh_ = from.poshigh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_slice_static::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice_static)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice_static::CopyFrom(const flex_slice_static& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice_static)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice_static::IsInitialized() const {
  return true;
}

void flex_slice_static::Swap(flex_slice_static* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_slice_static::InternalSwap(flex_slice_static* other) {
  std::swap(poslow_, other->poslow_);
  std::swap(poshigh_, other->poshigh_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_slice_static::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_slice_static

// optional uint32 posLow = 1;
bool flex_slice_static::has_poslow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_slice_static::set_has_poslow() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_slice_static::clear_has_poslow() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_slice_static::clear_poslow() {
  poslow_ = 0u;
  clear_has_poslow();
}
::google::protobuf::uint32 flex_slice_static::poslow() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_static.posLow)
  return poslow_;
}
void flex_slice_static::set_poslow(::google::protobuf::uint32 value) {
  set_has_poslow();
  poslow_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_slice_static.posLow)
}

// optional uint32 posHigh = 2;
bool flex_slice_static::has_poshigh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_slice_static::set_has_poshigh() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_slice_static::clear_has_poshigh() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_slice_static::clear_poshigh() {
  poshigh_ = 0u;
  clear_has_poshigh();
}
::google::protobuf::uint32 flex_slice_static::poshigh() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_static.posHigh)
  return poshigh_;
}
void flex_slice_static::set_poshigh(::google::protobuf::uint32 value) {
  set_has_poshigh();
  poshigh_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_slice_static.posHigh)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_slice::kIdFieldNumber;
const int flex_slice::kLabelFieldNumber;
const int flex_slice::kSchedulerFieldNumber;
const int flex_slice::kStaticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_slice::flex_slice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_slice)
}
flex_slice::flex_slice(const flex_slice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  scheduler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scheduler()) {
    scheduler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduler_);
  }
  id_ = from.id_;
  clear_has_params();
  switch (from.params_case()) {
    case kStatic: {
      mutable_static_()->::protocol::flex_slice_static::MergeFrom(from.static_());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice)
}

void flex_slice::SharedCtor() {
  _cached_size_ = 0;
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  clear_has_params();
}

flex_slice::~flex_slice() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice)
  SharedDtor();
}

void flex_slice::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduler_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_params()) {
    clear_params();
  }
}

void flex_slice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_slice::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_slice& flex_slice::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_slice* flex_slice::New(::google::protobuf::Arena* arena) const {
  flex_slice* n = new flex_slice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_slice::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flex_slice)
  switch (params_case()) {
    case kStatic: {
      delete params_.static__;
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void flex_slice::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_label()) {
      GOOGLE_DCHECK(!label_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*label_.UnsafeRawStringPointer())->clear();
    }
    if (has_scheduler()) {
      GOOGLE_DCHECK(!scheduler_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*scheduler_.UnsafeRawStringPointer())->clear();
    }
  }
  id_ = 0u;
  clear_params();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_slice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_slice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_slice.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scheduler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scheduler().data(), this->scheduler().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_slice.scheduler");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_slice_static static = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_static_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_slice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_slice)
  return false;
#undef DO_
}

void flex_slice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional string scheduler = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduler().data(), this->scheduler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice.scheduler");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->scheduler(), output);
  }

  // optional .protocol.flex_slice_static static = 10;
  if (has_static_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *params_.static__, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_slice)
}

::google::protobuf::uint8* flex_slice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional string scheduler = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduler().data(), this->scheduler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice.scheduler");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scheduler(), target);
  }

  // optional .protocol.flex_slice_static static = 10;
  if (has_static_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *params_.static__, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice)
  return target;
}

size_t flex_slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string scheduler = 3;
    if (has_scheduler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheduler());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  switch (params_case()) {
    // optional .protocol.flex_slice_static static = 10;
    case kStatic: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *params_.static__);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_slice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_slice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice)
    MergeFrom(*source);
  }
}

void flex_slice::MergeFrom(const flex_slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_scheduler();
      scheduler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduler_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.params_case()) {
    case kStatic: {
      mutable_static_()->::protocol::flex_slice_static::MergeFrom(from.static_());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void flex_slice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice::CopyFrom(const flex_slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice::IsInitialized() const {
  return true;
}

void flex_slice::Swap(flex_slice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_slice::InternalSwap(flex_slice* other) {
  label_.Swap(&other->label_);
  scheduler_.Swap(&other->scheduler_);
  std::swap(id_, other->id_);
  std::swap(params_, other->params_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_slice::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_slice

// optional uint32 id = 1;
bool flex_slice::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_slice::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_slice::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_slice::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 flex_slice::id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.id)
  return id_;
}
void flex_slice::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_slice.id)
}

// optional string label = 2;
bool flex_slice::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_slice::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_slice::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_slice::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& flex_slice::label() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.label)
  return label_.GetNoArena();
}
void flex_slice::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice.label)
}
#if LANG_CXX11
void flex_slice::set_label(::std::string&& value) {
  set_has_label();
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_slice.label)
}
#endif
void flex_slice::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_slice.label)
}
void flex_slice::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_slice.label)
}
::std::string* flex_slice::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_slice::release_label() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_slice::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice.label)
}

// optional string scheduler = 3;
bool flex_slice::has_scheduler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_slice::set_has_scheduler() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_slice::clear_has_scheduler() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_slice::clear_scheduler() {
  scheduler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scheduler();
}
const ::std::string& flex_slice::scheduler() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.scheduler)
  return scheduler_.GetNoArena();
}
void flex_slice::set_scheduler(const ::std::string& value) {
  set_has_scheduler();
  scheduler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice.scheduler)
}
#if LANG_CXX11
void flex_slice::set_scheduler(::std::string&& value) {
  set_has_scheduler();
  scheduler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_slice.scheduler)
}
#endif
void flex_slice::set_scheduler(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scheduler();
  scheduler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_slice.scheduler)
}
void flex_slice::set_scheduler(const char* value, size_t size) {
  set_has_scheduler();
  scheduler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_slice.scheduler)
}
::std::string* flex_slice::mutable_scheduler() {
  set_has_scheduler();
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice.scheduler)
  return scheduler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_slice::release_scheduler() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice.scheduler)
  clear_has_scheduler();
  return scheduler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_slice::set_allocated_scheduler(::std::string* scheduler) {
  if (scheduler != NULL) {
    set_has_scheduler();
  } else {
    clear_has_scheduler();
  }
  scheduler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheduler);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice.scheduler)
}

// optional .protocol.flex_slice_static static = 10;
bool flex_slice::has_static_() const {
  return params_case() == kStatic;
}
void flex_slice::set_has_static_() {
  _oneof_case_[0] = kStatic;
}
void flex_slice::clear_static_() {
  if (has_static_()) {
    delete params_.static__;
    clear_has_params();
  }
}
 const ::protocol::flex_slice_static& flex_slice::static_() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.static)
  return has_static_()
      ? *params_.static__
      : ::protocol::flex_slice_static::default_instance();
}
::protocol::flex_slice_static* flex_slice::mutable_static_() {
  if (!has_static_()) {
    clear_params();
    set_has_static_();
    params_.static__ = new ::protocol::flex_slice_static;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice.static)
  return params_.static__;
}
::protocol::flex_slice_static* flex_slice::release_static_() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice.static)
  if (has_static_()) {
    clear_has_params();
    ::protocol::flex_slice_static* temp = params_.static__;
    params_.static__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_slice::set_allocated_static_(::protocol::flex_slice_static* static_) {
  clear_params();
  if (static_) {
    set_has_static_();
    params_.static__ = static_;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice.static)
}

bool flex_slice::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
void flex_slice::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
flex_slice::ParamsCase flex_slice::params_case() const {
  return flex_slice::ParamsCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_slice_dl_ul_config::kAlgorithmFieldNumber;
const int flex_slice_dl_ul_config::kSlicesFieldNumber;
const int flex_slice_dl_ul_config::kSchedulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_slice_dl_ul_config::flex_slice_dl_ul_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_slice_dl_ul_config)
}
flex_slice_dl_ul_config::flex_slice_dl_ul_config(const flex_slice_dl_ul_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slices_(from.slices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scheduler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scheduler()) {
    scheduler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduler_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice_dl_ul_config)
}

void flex_slice_dl_ul_config::SharedCtor() {
  _cached_size_ = 0;
  scheduler_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

flex_slice_dl_ul_config::~flex_slice_dl_ul_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice_dl_ul_config)
  SharedDtor();
}

void flex_slice_dl_ul_config::SharedDtor() {
  scheduler_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void flex_slice_dl_ul_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_slice_dl_ul_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_slice_dl_ul_config& flex_slice_dl_ul_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_slice_dl_ul_config* flex_slice_dl_ul_config::New(::google::protobuf::Arena* arena) const {
  flex_slice_dl_ul_config* n = new flex_slice_dl_ul_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_slice_dl_ul_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice_dl_ul_config)
  slices_.Clear();
  if (has_scheduler()) {
    GOOGLE_DCHECK(!scheduler_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*scheduler_.UnsafeRawStringPointer())->clear();
  }
  algorithm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_slice_dl_ul_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_slice_dl_ul_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_slice_algorithm algorithm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_slice_algorithm_IsValid(value)) {
            set_algorithm(static_cast< ::protocol::flex_slice_algorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_slice slices = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scheduler = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scheduler().data(), this->scheduler().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_slice_dl_ul_config.scheduler");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_slice_dl_ul_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_slice_dl_ul_config)
  return false;
#undef DO_
}

void flex_slice_dl_ul_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_slice_dl_ul_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_algorithm algorithm = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->algorithm(), output);
  }

  // repeated .protocol.flex_slice slices = 2;
  for (unsigned int i = 0, n = this->slices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slices(i), output);
  }

  // optional string scheduler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduler().data(), this->scheduler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice_dl_ul_config.scheduler");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->scheduler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_slice_dl_ul_config)
}

::google::protobuf::uint8* flex_slice_dl_ul_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice_dl_ul_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_algorithm algorithm = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->algorithm(), target);
  }

  // repeated .protocol.flex_slice slices = 2;
  for (unsigned int i = 0, n = this->slices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->slices(i), deterministic, target);
  }

  // optional string scheduler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scheduler().data(), this->scheduler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice_dl_ul_config.scheduler");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scheduler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice_dl_ul_config)
  return target;
}

size_t flex_slice_dl_ul_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice_dl_ul_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_slice slices = 2;
  {
    unsigned int count = this->slices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slices(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string scheduler = 3;
    if (has_scheduler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheduler());
    }

    // optional .protocol.flex_slice_algorithm algorithm = 1;
    if (has_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_slice_dl_ul_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice_dl_ul_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice_dl_ul_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_slice_dl_ul_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice_dl_ul_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice_dl_ul_config)
    MergeFrom(*source);
  }
}

void flex_slice_dl_ul_config::MergeFrom(const flex_slice_dl_ul_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice_dl_ul_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slices_.MergeFrom(from.slices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_scheduler();
      scheduler_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduler_);
    }
    if (cached_has_bits & 0x00000002u) {
      algorithm_ = from.algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_slice_dl_ul_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice_dl_ul_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice_dl_ul_config::CopyFrom(const flex_slice_dl_ul_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice_dl_ul_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice_dl_ul_config::IsInitialized() const {
  return true;
}

void flex_slice_dl_ul_config::Swap(flex_slice_dl_ul_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_slice_dl_ul_config::InternalSwap(flex_slice_dl_ul_config* other) {
  slices_.InternalSwap(&other->slices_);
  scheduler_.Swap(&other->scheduler_);
  std::swap(algorithm_, other->algorithm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_slice_dl_ul_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_slice_dl_ul_config

// optional .protocol.flex_slice_algorithm algorithm = 1;
bool flex_slice_dl_ul_config::has_algorithm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_slice_dl_ul_config::set_has_algorithm() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_slice_dl_ul_config::clear_has_algorithm() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_slice_dl_ul_config::clear_algorithm() {
  algorithm_ = 0;
  clear_has_algorithm();
}
::protocol::flex_slice_algorithm flex_slice_dl_ul_config::algorithm() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_dl_ul_config.algorithm)
  return static_cast< ::protocol::flex_slice_algorithm >(algorithm_);
}
void flex_slice_dl_ul_config::set_algorithm(::protocol::flex_slice_algorithm value) {
  assert(::protocol::flex_slice_algorithm_IsValid(value));
  set_has_algorithm();
  algorithm_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_slice_dl_ul_config.algorithm)
}

// repeated .protocol.flex_slice slices = 2;
int flex_slice_dl_ul_config::slices_size() const {
  return slices_.size();
}
void flex_slice_dl_ul_config::clear_slices() {
  slices_.Clear();
}
const ::protocol::flex_slice& flex_slice_dl_ul_config::slices(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_dl_ul_config.slices)
  return slices_.Get(index);
}
::protocol::flex_slice* flex_slice_dl_ul_config::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_dl_ul_config.slices)
  return slices_.Mutable(index);
}
::protocol::flex_slice* flex_slice_dl_ul_config::add_slices() {
  // @@protoc_insertion_point(field_add:protocol.flex_slice_dl_ul_config.slices)
  return slices_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_slice >*
flex_slice_dl_ul_config::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_slice_dl_ul_config.slices)
  return &slices_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_slice >&
flex_slice_dl_ul_config::slices() const {
  // @@protoc_insertion_point(field_list:protocol.flex_slice_dl_ul_config.slices)
  return slices_;
}

// optional string scheduler = 3;
bool flex_slice_dl_ul_config::has_scheduler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_slice_dl_ul_config::set_has_scheduler() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_slice_dl_ul_config::clear_has_scheduler() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_slice_dl_ul_config::clear_scheduler() {
  scheduler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scheduler();
}
const ::std::string& flex_slice_dl_ul_config::scheduler() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_dl_ul_config.scheduler)
  return scheduler_.GetNoArena();
}
void flex_slice_dl_ul_config::set_scheduler(const ::std::string& value) {
  set_has_scheduler();
  scheduler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice_dl_ul_config.scheduler)
}
#if LANG_CXX11
void flex_slice_dl_ul_config::set_scheduler(::std::string&& value) {
  set_has_scheduler();
  scheduler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_slice_dl_ul_config.scheduler)
}
#endif
void flex_slice_dl_ul_config::set_scheduler(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_scheduler();
  scheduler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_slice_dl_ul_config.scheduler)
}
void flex_slice_dl_ul_config::set_scheduler(const char* value, size_t size) {
  set_has_scheduler();
  scheduler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_slice_dl_ul_config.scheduler)
}
::std::string* flex_slice_dl_ul_config::mutable_scheduler() {
  set_has_scheduler();
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_dl_ul_config.scheduler)
  return scheduler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_slice_dl_ul_config::release_scheduler() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_dl_ul_config.scheduler)
  clear_has_scheduler();
  return scheduler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_slice_dl_ul_config::set_allocated_scheduler(::std::string* scheduler) {
  if (scheduler != NULL) {
    set_has_scheduler();
  } else {
    clear_has_scheduler();
  }
  scheduler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheduler);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_dl_ul_config.scheduler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_drx_config::kOnDurationTimerFieldNumber;
const int flex_drx_config::kDrxInactivityTimerFieldNumber;
const int flex_drx_config::kDrxRetransmissionTimerFieldNumber;
const int flex_drx_config::kLongDrxCycleFieldNumber;
const int flex_drx_config::kLongDrxCycleStartOffsetFieldNumber;
const int flex_drx_config::kShortDrxCycleFieldNumber;
const int flex_drx_config::kDrxShortCycleTimerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_drx_config::flex_drx_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_drx_config)
}
flex_drx_config::flex_drx_config(const flex_drx_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&on_duration_timer_, &from.on_duration_timer_,
    reinterpret_cast<char*>(&drx_short_cycle_timer_) -
    reinterpret_cast<char*>(&on_duration_timer_) + sizeof(drx_short_cycle_timer_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_drx_config)
}

void flex_drx_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&on_duration_timer_, 0, reinterpret_cast<char*>(&drx_short_cycle_timer_) -
    reinterpret_cast<char*>(&on_duration_timer_) + sizeof(drx_short_cycle_timer_));
}

flex_drx_config::~flex_drx_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_drx_config)
  SharedDtor();
}

void flex_drx_config::SharedDtor() {
}

void flex_drx_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_drx_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_drx_config& flex_drx_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_drx_config* flex_drx_config::New(::google::protobuf::Arena* arena) const {
  flex_drx_config* n = new flex_drx_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_drx_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_drx_config)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&on_duration_timer_, 0, reinterpret_cast<char*>(&drx_short_cycle_timer_) -
      reinterpret_cast<char*>(&on_duration_timer_) + sizeof(drx_short_cycle_timer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_drx_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_drx_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 on_duration_timer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_on_duration_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &on_duration_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drx_inactivity_timer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_drx_inactivity_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drx_inactivity_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drx_retransmission_timer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_drx_retransmission_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drx_retransmission_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 long_drx_cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_long_drx_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &long_drx_cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 long_drx_cycle_start_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_long_drx_cycle_start_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &long_drx_cycle_start_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 short_drx_cycle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_short_drx_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &short_drx_cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drx_short_cycle_timer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_drx_short_cycle_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drx_short_cycle_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_drx_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_drx_config)
  return false;
#undef DO_
}

void flex_drx_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_drx_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 on_duration_timer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->on_duration_timer(), output);
  }

  // optional uint32 drx_inactivity_timer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drx_inactivity_timer(), output);
  }

  // optional uint32 drx_retransmission_timer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drx_retransmission_timer(), output);
  }

  // optional uint32 long_drx_cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->long_drx_cycle(), output);
  }

  // optional uint32 long_drx_cycle_start_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->long_drx_cycle_start_offset(), output);
  }

  // optional uint32 short_drx_cycle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->short_drx_cycle(), output);
  }

  // optional uint32 drx_short_cycle_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->drx_short_cycle_timer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_drx_config)
}

::google::protobuf::uint8* flex_drx_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_drx_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 on_duration_timer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->on_duration_timer(), target);
  }

  // optional uint32 drx_inactivity_timer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->drx_inactivity_timer(), target);
  }

  // optional uint32 drx_retransmission_timer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drx_retransmission_timer(), target);
  }

  // optional uint32 long_drx_cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->long_drx_cycle(), target);
  }

  // optional uint32 long_drx_cycle_start_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->long_drx_cycle_start_offset(), target);
  }

  // optional uint32 short_drx_cycle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->short_drx_cycle(), target);
  }

  // optional uint32 drx_short_cycle_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->drx_short_cycle_timer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_drx_config)
  return target;
}

size_t flex_drx_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_drx_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 on_duration_timer = 1;
    if (has_on_duration_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->on_duration_timer());
    }

    // optional uint32 drx_inactivity_timer = 2;
    if (has_drx_inactivity_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drx_inactivity_timer());
    }

    // optional uint32 drx_retransmission_timer = 3;
    if (has_drx_retransmission_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drx_retransmission_timer());
    }

    // optional uint32 long_drx_cycle = 4;
    if (has_long_drx_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->long_drx_cycle());
    }

    // optional uint32 long_drx_cycle_start_offset = 5;
    if (has_long_drx_cycle_start_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->long_drx_cycle_start_offset());
    }

    // optional uint32 short_drx_cycle = 6;
    if (has_short_drx_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->short_drx_cycle());
    }

    // optional uint32 drx_short_cycle_timer = 7;
    if (has_drx_short_cycle_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drx_short_cycle_timer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_drx_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_drx_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_drx_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_drx_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_drx_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_drx_config)
    MergeFrom(*source);
  }
}

void flex_drx_config::MergeFrom(const flex_drx_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_drx_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      on_duration_timer_ = from.on_duration_timer_;
    }
    if (cached_has_bits & 0x00000002u) {
      drx_inactivity_timer_ = from.drx_inactivity_timer_;
    }
    if (cached_has_bits & 0x00000004u) {
      drx_retransmission_timer_ = from.drx_retransmission_timer_;
    }
    if (cached_has_bits & 0x00000008u) {
      long_drx_cycle_ = from.long_drx_cycle_;
    }
    if (cached_has_bits & 0x00000010u) {
      long_drx_cycle_start_offset_ = from.long_drx_cycle_start_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      short_drx_cycle_ = from.short_drx_cycle_;
    }
    if (cached_has_bits & 0x00000040u) {
      drx_short_cycle_timer_ = from.drx_short_cycle_timer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_drx_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_drx_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_drx_config::CopyFrom(const flex_drx_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_drx_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_drx_config::IsInitialized() const {
  return true;
}

void flex_drx_config::Swap(flex_drx_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_drx_config::InternalSwap(flex_drx_config* other) {
  std::swap(on_duration_timer_, other->on_duration_timer_);
  std::swap(drx_inactivity_timer_, other->drx_inactivity_timer_);
  std::swap(drx_retransmission_timer_, other->drx_retransmission_timer_);
  std::swap(long_drx_cycle_, other->long_drx_cycle_);
  std::swap(long_drx_cycle_start_offset_, other->long_drx_cycle_start_offset_);
  std::swap(short_drx_cycle_, other->short_drx_cycle_);
  std::swap(drx_short_cycle_timer_, other->drx_short_cycle_timer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_drx_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_drx_config

// optional uint32 on_duration_timer = 1;
bool flex_drx_config::has_on_duration_timer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_drx_config::set_has_on_duration_timer() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_drx_config::clear_has_on_duration_timer() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_drx_config::clear_on_duration_timer() {
  on_duration_timer_ = 0u;
  clear_has_on_duration_timer();
}
::google::protobuf::uint32 flex_drx_config::on_duration_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.on_duration_timer)
  return on_duration_timer_;
}
void flex_drx_config::set_on_duration_timer(::google::protobuf::uint32 value) {
  set_has_on_duration_timer();
  on_duration_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.on_duration_timer)
}

// optional uint32 drx_inactivity_timer = 2;
bool flex_drx_config::has_drx_inactivity_timer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_drx_config::set_has_drx_inactivity_timer() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_drx_config::clear_has_drx_inactivity_timer() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_drx_config::clear_drx_inactivity_timer() {
  drx_inactivity_timer_ = 0u;
  clear_has_drx_inactivity_timer();
}
::google::protobuf::uint32 flex_drx_config::drx_inactivity_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.drx_inactivity_timer)
  return drx_inactivity_timer_;
}
void flex_drx_config::set_drx_inactivity_timer(::google::protobuf::uint32 value) {
  set_has_drx_inactivity_timer();
  drx_inactivity_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.drx_inactivity_timer)
}

// optional uint32 drx_retransmission_timer = 3;
bool flex_drx_config::has_drx_retransmission_timer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_drx_config::set_has_drx_retransmission_timer() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_drx_config::clear_has_drx_retransmission_timer() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_drx_config::clear_drx_retransmission_timer() {
  drx_retransmission_timer_ = 0u;
  clear_has_drx_retransmission_timer();
}
::google::protobuf::uint32 flex_drx_config::drx_retransmission_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.drx_retransmission_timer)
  return drx_retransmission_timer_;
}
void flex_drx_config::set_drx_retransmission_timer(::google::protobuf::uint32 value) {
  set_has_drx_retransmission_timer();
  drx_retransmission_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.drx_retransmission_timer)
}

// optional uint32 long_drx_cycle = 4;
bool flex_drx_config::has_long_drx_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_drx_config::set_has_long_drx_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_drx_config::clear_has_long_drx_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_drx_config::clear_long_drx_cycle() {
  long_drx_cycle_ = 0u;
  clear_has_long_drx_cycle();
}
::google::protobuf::uint32 flex_drx_config::long_drx_cycle() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.long_drx_cycle)
  return long_drx_cycle_;
}
void flex_drx_config::set_long_drx_cycle(::google::protobuf::uint32 value) {
  set_has_long_drx_cycle();
  long_drx_cycle_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.long_drx_cycle)
}

// optional uint32 long_drx_cycle_start_offset = 5;
bool flex_drx_config::has_long_drx_cycle_start_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_drx_config::set_has_long_drx_cycle_start_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_drx_config::clear_has_long_drx_cycle_start_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_drx_config::clear_long_drx_cycle_start_offset() {
  long_drx_cycle_start_offset_ = 0u;
  clear_has_long_drx_cycle_start_offset();
}
::google::protobuf::uint32 flex_drx_config::long_drx_cycle_start_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.long_drx_cycle_start_offset)
  return long_drx_cycle_start_offset_;
}
void flex_drx_config::set_long_drx_cycle_start_offset(::google::protobuf::uint32 value) {
  set_has_long_drx_cycle_start_offset();
  long_drx_cycle_start_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.long_drx_cycle_start_offset)
}

// optional uint32 short_drx_cycle = 6;
bool flex_drx_config::has_short_drx_cycle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_drx_config::set_has_short_drx_cycle() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_drx_config::clear_has_short_drx_cycle() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_drx_config::clear_short_drx_cycle() {
  short_drx_cycle_ = 0u;
  clear_has_short_drx_cycle();
}
::google::protobuf::uint32 flex_drx_config::short_drx_cycle() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.short_drx_cycle)
  return short_drx_cycle_;
}
void flex_drx_config::set_short_drx_cycle(::google::protobuf::uint32 value) {
  set_has_short_drx_cycle();
  short_drx_cycle_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.short_drx_cycle)
}

// optional uint32 drx_short_cycle_timer = 7;
bool flex_drx_config::has_drx_short_cycle_timer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_drx_config::set_has_drx_short_cycle_timer() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_drx_config::clear_has_drx_short_cycle_timer() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_drx_config::clear_drx_short_cycle_timer() {
  drx_short_cycle_timer_ = 0u;
  clear_has_drx_short_cycle_timer();
}
::google::protobuf::uint32 flex_drx_config::drx_short_cycle_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.drx_short_cycle_timer)
  return drx_short_cycle_timer_;
}
void flex_drx_config::set_drx_short_cycle_timer(::google::protobuf::uint32 value) {
  set_has_drx_short_cycle_timer();
  drx_short_cycle_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.drx_short_cycle_timer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_sps_config::kSemiPersistentSchedIntervalULFieldNumber;
const int flex_sps_config::kSemiPersistentSchedIntervalDLFieldNumber;
const int flex_sps_config::kNumOfConfSpsProcFieldNumber;
const int flex_sps_config::kN1PUCCHANPersistentElementFieldNumber;
const int flex_sps_config::kImplicitReleaseAfterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_sps_config::flex_sps_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_sps_config)
}
flex_sps_config::flex_sps_config(const flex_sps_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      n1_pucch_an_persistent_element_(from.n1_pucch_an_persistent_element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&semi_persistent_sched_interval_ul_, &from.semi_persistent_sched_interval_ul_,
    reinterpret_cast<char*>(&implicit_release_after_) -
    reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_) + sizeof(implicit_release_after_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_sps_config)
}

void flex_sps_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&semi_persistent_sched_interval_ul_, 0, reinterpret_cast<char*>(&implicit_release_after_) -
    reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_) + sizeof(implicit_release_after_));
}

flex_sps_config::~flex_sps_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_sps_config)
  SharedDtor();
}

void flex_sps_config::SharedDtor() {
}

void flex_sps_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_sps_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_sps_config& flex_sps_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_sps_config* flex_sps_config::New(::google::protobuf::Arena* arena) const {
  flex_sps_config* n = new flex_sps_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_sps_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_sps_config)
  n1_pucch_an_persistent_element_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&semi_persistent_sched_interval_ul_, 0, reinterpret_cast<char*>(&implicit_release_after_) -
      reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_) + sizeof(implicit_release_after_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_sps_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_sps_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 semi_persistent_sched_interval_UL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_semi_persistent_sched_interval_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &semi_persistent_sched_interval_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 semi_persistent_sched_interval_DL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_semi_persistent_sched_interval_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &semi_persistent_sched_interval_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_of_conf_sps_proc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_of_conf_sps_proc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_conf_sps_proc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_n1_pucch_an_persistent_element())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_n1_pucch_an_persistent_element())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 implicit_release_after = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_implicit_release_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &implicit_release_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_sps_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_sps_config)
  return false;
#undef DO_
}

void flex_sps_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_sps_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 semi_persistent_sched_interval_UL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->semi_persistent_sched_interval_ul(), output);
  }

  // optional uint32 semi_persistent_sched_interval_DL = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->semi_persistent_sched_interval_dl(), output);
  }

  // optional uint32 num_of_conf_sps_proc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_of_conf_sps_proc(), output);
  }

  // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
  for (int i = 0, n = this->n1_pucch_an_persistent_element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->n1_pucch_an_persistent_element(i), output);
  }

  // optional uint32 implicit_release_after = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->implicit_release_after(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_sps_config)
}

::google::protobuf::uint8* flex_sps_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_sps_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 semi_persistent_sched_interval_UL = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->semi_persistent_sched_interval_ul(), target);
  }

  // optional uint32 semi_persistent_sched_interval_DL = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->semi_persistent_sched_interval_dl(), target);
  }

  // optional uint32 num_of_conf_sps_proc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_of_conf_sps_proc(), target);
  }

  // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->n1_pucch_an_persistent_element_, target);

  // optional uint32 implicit_release_after = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->implicit_release_after(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_sps_config)
  return target;
}

size_t flex_sps_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_sps_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->n1_pucch_an_persistent_element_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->n1_pucch_an_persistent_element_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 semi_persistent_sched_interval_UL = 1;
    if (has_semi_persistent_sched_interval_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->semi_persistent_sched_interval_ul());
    }

    // optional uint32 semi_persistent_sched_interval_DL = 2;
    if (has_semi_persistent_sched_interval_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->semi_persistent_sched_interval_dl());
    }

    // optional uint32 num_of_conf_sps_proc = 3;
    if (has_num_of_conf_sps_proc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_of_conf_sps_proc());
    }

    // optional uint32 implicit_release_after = 5;
    if (has_implicit_release_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->implicit_release_after());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_sps_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_sps_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_sps_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_sps_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_sps_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_sps_config)
    MergeFrom(*source);
  }
}

void flex_sps_config::MergeFrom(const flex_sps_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_sps_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n1_pucch_an_persistent_element_.MergeFrom(from.n1_pucch_an_persistent_element_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      semi_persistent_sched_interval_ul_ = from.semi_persistent_sched_interval_ul_;
    }
    if (cached_has_bits & 0x00000002u) {
      semi_persistent_sched_interval_dl_ = from.semi_persistent_sched_interval_dl_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_of_conf_sps_proc_ = from.num_of_conf_sps_proc_;
    }
    if (cached_has_bits & 0x00000008u) {
      implicit_release_after_ = from.implicit_release_after_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_sps_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_sps_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_sps_config::CopyFrom(const flex_sps_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_sps_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_sps_config::IsInitialized() const {
  return true;
}

void flex_sps_config::Swap(flex_sps_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_sps_config::InternalSwap(flex_sps_config* other) {
  n1_pucch_an_persistent_element_.InternalSwap(&other->n1_pucch_an_persistent_element_);
  std::swap(semi_persistent_sched_interval_ul_, other->semi_persistent_sched_interval_ul_);
  std::swap(semi_persistent_sched_interval_dl_, other->semi_persistent_sched_interval_dl_);
  std::swap(num_of_conf_sps_proc_, other->num_of_conf_sps_proc_);
  std::swap(implicit_release_after_, other->implicit_release_after_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_sps_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_sps_config

// optional uint32 semi_persistent_sched_interval_UL = 1;
bool flex_sps_config::has_semi_persistent_sched_interval_ul() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_sps_config::set_has_semi_persistent_sched_interval_ul() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_sps_config::clear_has_semi_persistent_sched_interval_ul() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_sps_config::clear_semi_persistent_sched_interval_ul() {
  semi_persistent_sched_interval_ul_ = 0u;
  clear_has_semi_persistent_sched_interval_ul();
}
::google::protobuf::uint32 flex_sps_config::semi_persistent_sched_interval_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.semi_persistent_sched_interval_UL)
  return semi_persistent_sched_interval_ul_;
}
void flex_sps_config::set_semi_persistent_sched_interval_ul(::google::protobuf::uint32 value) {
  set_has_semi_persistent_sched_interval_ul();
  semi_persistent_sched_interval_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.semi_persistent_sched_interval_UL)
}

// optional uint32 semi_persistent_sched_interval_DL = 2;
bool flex_sps_config::has_semi_persistent_sched_interval_dl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_sps_config::set_has_semi_persistent_sched_interval_dl() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_sps_config::clear_has_semi_persistent_sched_interval_dl() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_sps_config::clear_semi_persistent_sched_interval_dl() {
  semi_persistent_sched_interval_dl_ = 0u;
  clear_has_semi_persistent_sched_interval_dl();
}
::google::protobuf::uint32 flex_sps_config::semi_persistent_sched_interval_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.semi_persistent_sched_interval_DL)
  return semi_persistent_sched_interval_dl_;
}
void flex_sps_config::set_semi_persistent_sched_interval_dl(::google::protobuf::uint32 value) {
  set_has_semi_persistent_sched_interval_dl();
  semi_persistent_sched_interval_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.semi_persistent_sched_interval_DL)
}

// optional uint32 num_of_conf_sps_proc = 3;
bool flex_sps_config::has_num_of_conf_sps_proc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_sps_config::set_has_num_of_conf_sps_proc() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_sps_config::clear_has_num_of_conf_sps_proc() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_sps_config::clear_num_of_conf_sps_proc() {
  num_of_conf_sps_proc_ = 0u;
  clear_has_num_of_conf_sps_proc();
}
::google::protobuf::uint32 flex_sps_config::num_of_conf_sps_proc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.num_of_conf_sps_proc)
  return num_of_conf_sps_proc_;
}
void flex_sps_config::set_num_of_conf_sps_proc(::google::protobuf::uint32 value) {
  set_has_num_of_conf_sps_proc();
  num_of_conf_sps_proc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.num_of_conf_sps_proc)
}

// repeated uint32 n1_PUCCH_AN_persistent_element = 4;
int flex_sps_config::n1_pucch_an_persistent_element_size() const {
  return n1_pucch_an_persistent_element_.size();
}
void flex_sps_config::clear_n1_pucch_an_persistent_element() {
  n1_pucch_an_persistent_element_.Clear();
}
::google::protobuf::uint32 flex_sps_config::n1_pucch_an_persistent_element(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
  return n1_pucch_an_persistent_element_.Get(index);
}
void flex_sps_config::set_n1_pucch_an_persistent_element(int index, ::google::protobuf::uint32 value) {
  n1_pucch_an_persistent_element_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
}
void flex_sps_config::add_n1_pucch_an_persistent_element(::google::protobuf::uint32 value) {
  n1_pucch_an_persistent_element_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_sps_config::n1_pucch_an_persistent_element() const {
  // @@protoc_insertion_point(field_list:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
  return n1_pucch_an_persistent_element_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_sps_config::mutable_n1_pucch_an_persistent_element() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
  return &n1_pucch_an_persistent_element_;
}

// optional uint32 implicit_release_after = 5;
bool flex_sps_config::has_implicit_release_after() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_sps_config::set_has_implicit_release_after() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_sps_config::clear_has_implicit_release_after() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_sps_config::clear_implicit_release_after() {
  implicit_release_after_ = 0u;
  clear_has_implicit_release_after();
}
::google::protobuf::uint32 flex_sps_config::implicit_release_after() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.implicit_release_after)
  return implicit_release_after_;
}
void flex_sps_config::set_implicit_release_after(::google::protobuf::uint32 value) {
  set_has_implicit_release_after();
  implicit_release_after_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.implicit_release_after)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_sr_config::kSrActionFieldNumber;
const int flex_sr_config::kSchedIntervalFieldNumber;
const int flex_sr_config::kDsrTransMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_sr_config::flex_sr_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_sr_config)
}
flex_sr_config::flex_sr_config(const flex_sr_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sr_action_, &from.sr_action_,
    reinterpret_cast<char*>(&dsr_trans_max_) -
    reinterpret_cast<char*>(&sr_action_) + sizeof(dsr_trans_max_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_sr_config)
}

void flex_sr_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sr_action_, 0, reinterpret_cast<char*>(&dsr_trans_max_) -
    reinterpret_cast<char*>(&sr_action_) + sizeof(dsr_trans_max_));
}

flex_sr_config::~flex_sr_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_sr_config)
  SharedDtor();
}

void flex_sr_config::SharedDtor() {
}

void flex_sr_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_sr_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_sr_config& flex_sr_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_sr_config* flex_sr_config::New(::google::protobuf::Arena* arena) const {
  flex_sr_config* n = new flex_sr_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_sr_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_sr_config)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sr_action_, 0, reinterpret_cast<char*>(&dsr_trans_max_) -
      reinterpret_cast<char*>(&sr_action_) + sizeof(dsr_trans_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_sr_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_sr_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sr_action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sr_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sr_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sched_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sched_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sched_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dsr_trans_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_dsr_trans_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dsr_trans_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_sr_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_sr_config)
  return false;
#undef DO_
}

void flex_sr_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_sr_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sr_action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sr_action(), output);
  }

  // optional uint32 sched_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sched_interval(), output);
  }

  // optional uint32 dsr_trans_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dsr_trans_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_sr_config)
}

::google::protobuf::uint8* flex_sr_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_sr_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sr_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sr_action(), target);
  }

  // optional uint32 sched_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sched_interval(), target);
  }

  // optional uint32 dsr_trans_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dsr_trans_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_sr_config)
  return target;
}

size_t flex_sr_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_sr_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sr_action = 1;
    if (has_sr_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sr_action());
    }

    // optional uint32 sched_interval = 2;
    if (has_sched_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sched_interval());
    }

    // optional uint32 dsr_trans_max = 3;
    if (has_dsr_trans_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dsr_trans_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_sr_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_sr_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_sr_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_sr_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_sr_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_sr_config)
    MergeFrom(*source);
  }
}

void flex_sr_config::MergeFrom(const flex_sr_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_sr_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sr_action_ = from.sr_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      sched_interval_ = from.sched_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      dsr_trans_max_ = from.dsr_trans_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_sr_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_sr_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_sr_config::CopyFrom(const flex_sr_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_sr_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_sr_config::IsInitialized() const {
  return true;
}

void flex_sr_config::Swap(flex_sr_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_sr_config::InternalSwap(flex_sr_config* other) {
  std::swap(sr_action_, other->sr_action_);
  std::swap(sched_interval_, other->sched_interval_);
  std::swap(dsr_trans_max_, other->dsr_trans_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_sr_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_sr_config

// optional uint32 sr_action = 1;
bool flex_sr_config::has_sr_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_sr_config::set_has_sr_action() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_sr_config::clear_has_sr_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_sr_config::clear_sr_action() {
  sr_action_ = 0u;
  clear_has_sr_action();
}
::google::protobuf::uint32 flex_sr_config::sr_action() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sr_config.sr_action)
  return sr_action_;
}
void flex_sr_config::set_sr_action(::google::protobuf::uint32 value) {
  set_has_sr_action();
  sr_action_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sr_config.sr_action)
}

// optional uint32 sched_interval = 2;
bool flex_sr_config::has_sched_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_sr_config::set_has_sched_interval() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_sr_config::clear_has_sched_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_sr_config::clear_sched_interval() {
  sched_interval_ = 0u;
  clear_has_sched_interval();
}
::google::protobuf::uint32 flex_sr_config::sched_interval() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sr_config.sched_interval)
  return sched_interval_;
}
void flex_sr_config::set_sched_interval(::google::protobuf::uint32 value) {
  set_has_sched_interval();
  sched_interval_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sr_config.sched_interval)
}

// optional uint32 dsr_trans_max = 3;
bool flex_sr_config::has_dsr_trans_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_sr_config::set_has_dsr_trans_max() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_sr_config::clear_has_dsr_trans_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_sr_config::clear_dsr_trans_max() {
  dsr_trans_max_ = 0u;
  clear_has_dsr_trans_max();
}
::google::protobuf::uint32 flex_sr_config::dsr_trans_max() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sr_config.dsr_trans_max)
  return dsr_trans_max_;
}
void flex_sr_config::set_dsr_trans_max(::google::protobuf::uint32 value) {
  set_has_dsr_trans_max();
  dsr_trans_max_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_sr_config.dsr_trans_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_cqi_config::kCqiActionFieldNumber;
const int flex_cqi_config::kCqiSchedIntervalFieldNumber;
const int flex_cqi_config::kRiSchedIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_cqi_config::flex_cqi_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_cqi_config)
}
flex_cqi_config::flex_cqi_config(const flex_cqi_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cqi_action_, &from.cqi_action_,
    reinterpret_cast<char*>(&ri_sched_interval_) -
    reinterpret_cast<char*>(&cqi_action_) + sizeof(ri_sched_interval_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cqi_config)
}

void flex_cqi_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cqi_action_, 0, reinterpret_cast<char*>(&ri_sched_interval_) -
    reinterpret_cast<char*>(&cqi_action_) + sizeof(ri_sched_interval_));
}

flex_cqi_config::~flex_cqi_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_cqi_config)
  SharedDtor();
}

void flex_cqi_config::SharedDtor() {
}

void flex_cqi_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_cqi_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_cqi_config& flex_cqi_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_cqi_config* flex_cqi_config::New(::google::protobuf::Arena* arena) const {
  flex_cqi_config* n = new flex_cqi_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_cqi_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cqi_config)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&cqi_action_, 0, reinterpret_cast<char*>(&ri_sched_interval_) -
      reinterpret_cast<char*>(&cqi_action_) + sizeof(ri_sched_interval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_cqi_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_cqi_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cqi_action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cqi_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cqi_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cqi_sched_interval = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cqi_sched_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cqi_sched_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ri_sched_interval = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ri_sched_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ri_sched_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_cqi_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_cqi_config)
  return false;
#undef DO_
}

void flex_cqi_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_cqi_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cqi_action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cqi_action(), output);
  }

  // optional uint32 cqi_sched_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cqi_sched_interval(), output);
  }

  // optional uint32 ri_sched_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ri_sched_interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_cqi_config)
}

::google::protobuf::uint8* flex_cqi_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cqi_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cqi_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cqi_action(), target);
  }

  // optional uint32 cqi_sched_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cqi_sched_interval(), target);
  }

  // optional uint32 ri_sched_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ri_sched_interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cqi_config)
  return target;
}

size_t flex_cqi_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cqi_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 cqi_action = 1;
    if (has_cqi_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cqi_action());
    }

    // optional uint32 cqi_sched_interval = 2;
    if (has_cqi_sched_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cqi_sched_interval());
    }

    // optional uint32 ri_sched_interval = 3;
    if (has_ri_sched_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ri_sched_interval());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_cqi_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cqi_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cqi_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_cqi_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cqi_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cqi_config)
    MergeFrom(*source);
  }
}

void flex_cqi_config::MergeFrom(const flex_cqi_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cqi_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      cqi_action_ = from.cqi_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      cqi_sched_interval_ = from.cqi_sched_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      ri_sched_interval_ = from.ri_sched_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_cqi_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cqi_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cqi_config::CopyFrom(const flex_cqi_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cqi_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cqi_config::IsInitialized() const {
  return true;
}

void flex_cqi_config::Swap(flex_cqi_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_cqi_config::InternalSwap(flex_cqi_config* other) {
  std::swap(cqi_action_, other->cqi_action_);
  std::swap(cqi_sched_interval_, other->cqi_sched_interval_);
  std::swap(ri_sched_interval_, other->ri_sched_interval_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_cqi_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_cqi_config

// optional uint32 cqi_action = 1;
bool flex_cqi_config::has_cqi_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_cqi_config::set_has_cqi_action() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_cqi_config::clear_has_cqi_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_cqi_config::clear_cqi_action() {
  cqi_action_ = 0u;
  clear_has_cqi_action();
}
::google::protobuf::uint32 flex_cqi_config::cqi_action() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cqi_config.cqi_action)
  return cqi_action_;
}
void flex_cqi_config::set_cqi_action(::google::protobuf::uint32 value) {
  set_has_cqi_action();
  cqi_action_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cqi_config.cqi_action)
}

// optional uint32 cqi_sched_interval = 2;
bool flex_cqi_config::has_cqi_sched_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_cqi_config::set_has_cqi_sched_interval() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_cqi_config::clear_has_cqi_sched_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_cqi_config::clear_cqi_sched_interval() {
  cqi_sched_interval_ = 0u;
  clear_has_cqi_sched_interval();
}
::google::protobuf::uint32 flex_cqi_config::cqi_sched_interval() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cqi_config.cqi_sched_interval)
  return cqi_sched_interval_;
}
void flex_cqi_config::set_cqi_sched_interval(::google::protobuf::uint32 value) {
  set_has_cqi_sched_interval();
  cqi_sched_interval_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cqi_config.cqi_sched_interval)
}

// optional uint32 ri_sched_interval = 3;
bool flex_cqi_config::has_ri_sched_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_cqi_config::set_has_ri_sched_interval() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_cqi_config::clear_has_ri_sched_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_cqi_config::clear_ri_sched_interval() {
  ri_sched_interval_ = 0u;
  clear_has_ri_sched_interval();
}
::google::protobuf::uint32 flex_cqi_config::ri_sched_interval() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cqi_config.ri_sched_interval)
  return ri_sched_interval_;
}
void flex_cqi_config::set_ri_sched_interval(::google::protobuf::uint32 value) {
  set_has_ri_sched_interval();
  ri_sched_interval_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cqi_config.ri_sched_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_capabilities::kHalfDuplexFieldNumber;
const int flex_ue_capabilities::kIntraSFHoppingFieldNumber;
const int flex_ue_capabilities::kType2Sb1FieldNumber;
const int flex_ue_capabilities::kUeCategoryFieldNumber;
const int flex_ue_capabilities::kResAllocType1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_capabilities::flex_ue_capabilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_capabilities)
}
flex_ue_capabilities::flex_ue_capabilities(const flex_ue_capabilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&half_duplex_, &from.half_duplex_,
    reinterpret_cast<char*>(&res_alloc_type1_) -
    reinterpret_cast<char*>(&half_duplex_) + sizeof(res_alloc_type1_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_capabilities)
}

void flex_ue_capabilities::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&half_duplex_, 0, reinterpret_cast<char*>(&res_alloc_type1_) -
    reinterpret_cast<char*>(&half_duplex_) + sizeof(res_alloc_type1_));
}

flex_ue_capabilities::~flex_ue_capabilities() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_capabilities)
  SharedDtor();
}

void flex_ue_capabilities::SharedDtor() {
}

void flex_ue_capabilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_capabilities::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_capabilities& flex_ue_capabilities::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_capabilities* flex_ue_capabilities::New(::google::protobuf::Arena* arena) const {
  flex_ue_capabilities* n = new flex_ue_capabilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_capabilities)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&half_duplex_, 0, reinterpret_cast<char*>(&res_alloc_type1_) -
      reinterpret_cast<char*>(&half_duplex_) + sizeof(res_alloc_type1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_capabilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_capabilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 half_duplex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_half_duplex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &half_duplex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intra_SF_hopping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_intra_sf_hopping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intra_sf_hopping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type2_sb_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type2_sb_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type2_sb_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ue_category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ue_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ue_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 res_alloc_type1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_res_alloc_type1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_alloc_type1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_capabilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_capabilities)
  return false;
#undef DO_
}

void flex_ue_capabilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_capabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 half_duplex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->half_duplex(), output);
  }

  // optional uint32 intra_SF_hopping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->intra_sf_hopping(), output);
  }

  // optional uint32 type2_sb_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type2_sb_1(), output);
  }

  // optional uint32 ue_category = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ue_category(), output);
  }

  // optional uint32 res_alloc_type1 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->res_alloc_type1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_capabilities)
}

::google::protobuf::uint8* flex_ue_capabilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_capabilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 half_duplex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->half_duplex(), target);
  }

  // optional uint32 intra_SF_hopping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->intra_sf_hopping(), target);
  }

  // optional uint32 type2_sb_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type2_sb_1(), target);
  }

  // optional uint32 ue_category = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ue_category(), target);
  }

  // optional uint32 res_alloc_type1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->res_alloc_type1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_capabilities)
  return target;
}

size_t flex_ue_capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_capabilities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 half_duplex = 1;
    if (has_half_duplex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->half_duplex());
    }

    // optional uint32 intra_SF_hopping = 2;
    if (has_intra_sf_hopping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intra_sf_hopping());
    }

    // optional uint32 type2_sb_1 = 3;
    if (has_type2_sb_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type2_sb_1());
    }

    // optional uint32 ue_category = 4;
    if (has_ue_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ue_category());
    }

    // optional uint32 res_alloc_type1 = 5;
    if (has_res_alloc_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_alloc_type1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_capabilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_capabilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_capabilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_capabilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_capabilities)
    MergeFrom(*source);
  }
}

void flex_ue_capabilities::MergeFrom(const flex_ue_capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      half_duplex_ = from.half_duplex_;
    }
    if (cached_has_bits & 0x00000002u) {
      intra_sf_hopping_ = from.intra_sf_hopping_;
    }
    if (cached_has_bits & 0x00000004u) {
      type2_sb_1_ = from.type2_sb_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      ue_category_ = from.ue_category_;
    }
    if (cached_has_bits & 0x00000010u) {
      res_alloc_type1_ = from.res_alloc_type1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_capabilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_capabilities::CopyFrom(const flex_ue_capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_capabilities::IsInitialized() const {
  return true;
}

void flex_ue_capabilities::Swap(flex_ue_capabilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_capabilities::InternalSwap(flex_ue_capabilities* other) {
  std::swap(half_duplex_, other->half_duplex_);
  std::swap(intra_sf_hopping_, other->intra_sf_hopping_);
  std::swap(type2_sb_1_, other->type2_sb_1_);
  std::swap(ue_category_, other->ue_category_);
  std::swap(res_alloc_type1_, other->res_alloc_type1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_capabilities::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_capabilities

// optional uint32 half_duplex = 1;
bool flex_ue_capabilities::has_half_duplex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_capabilities::set_has_half_duplex() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_capabilities::clear_has_half_duplex() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_capabilities::clear_half_duplex() {
  half_duplex_ = 0u;
  clear_has_half_duplex();
}
::google::protobuf::uint32 flex_ue_capabilities::half_duplex() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.half_duplex)
  return half_duplex_;
}
void flex_ue_capabilities::set_half_duplex(::google::protobuf::uint32 value) {
  set_has_half_duplex();
  half_duplex_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.half_duplex)
}

// optional uint32 intra_SF_hopping = 2;
bool flex_ue_capabilities::has_intra_sf_hopping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ue_capabilities::set_has_intra_sf_hopping() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ue_capabilities::clear_has_intra_sf_hopping() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ue_capabilities::clear_intra_sf_hopping() {
  intra_sf_hopping_ = 0u;
  clear_has_intra_sf_hopping();
}
::google::protobuf::uint32 flex_ue_capabilities::intra_sf_hopping() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.intra_SF_hopping)
  return intra_sf_hopping_;
}
void flex_ue_capabilities::set_intra_sf_hopping(::google::protobuf::uint32 value) {
  set_has_intra_sf_hopping();
  intra_sf_hopping_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.intra_SF_hopping)
}

// optional uint32 type2_sb_1 = 3;
bool flex_ue_capabilities::has_type2_sb_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ue_capabilities::set_has_type2_sb_1() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ue_capabilities::clear_has_type2_sb_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ue_capabilities::clear_type2_sb_1() {
  type2_sb_1_ = 0u;
  clear_has_type2_sb_1();
}
::google::protobuf::uint32 flex_ue_capabilities::type2_sb_1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.type2_sb_1)
  return type2_sb_1_;
}
void flex_ue_capabilities::set_type2_sb_1(::google::protobuf::uint32 value) {
  set_has_type2_sb_1();
  type2_sb_1_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.type2_sb_1)
}

// optional uint32 ue_category = 4;
bool flex_ue_capabilities::has_ue_category() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_ue_capabilities::set_has_ue_category() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_ue_capabilities::clear_has_ue_category() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ue_capabilities::clear_ue_category() {
  ue_category_ = 0u;
  clear_has_ue_category();
}
::google::protobuf::uint32 flex_ue_capabilities::ue_category() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.ue_category)
  return ue_category_;
}
void flex_ue_capabilities::set_ue_category(::google::protobuf::uint32 value) {
  set_has_ue_category();
  ue_category_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.ue_category)
}

// optional uint32 res_alloc_type1 = 5;
bool flex_ue_capabilities::has_res_alloc_type1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_ue_capabilities::set_has_res_alloc_type1() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_ue_capabilities::clear_has_res_alloc_type1() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ue_capabilities::clear_res_alloc_type1() {
  res_alloc_type1_ = 0u;
  clear_has_res_alloc_type1();
}
::google::protobuf::uint32 flex_ue_capabilities::res_alloc_type1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.res_alloc_type1)
  return res_alloc_type1_;
}
void flex_ue_capabilities::set_res_alloc_type1(::google::protobuf::uint32 value) {
  set_has_res_alloc_type1();
  res_alloc_type1_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.res_alloc_type1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_scell_config::kCarrierIndexFieldNumber;
const int flex_scell_config::kScellIndexFieldNumber;
const int flex_scell_config::kUseCcsFieldNumber;
const int flex_scell_config::kSchedCellIndexFieldNumber;
const int flex_scell_config::kPdschStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_scell_config::flex_scell_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_scell_config)
}
flex_scell_config::flex_scell_config(const flex_scell_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&carrier_index_, &from.carrier_index_,
    reinterpret_cast<char*>(&pdsch_start_) -
    reinterpret_cast<char*>(&carrier_index_) + sizeof(pdsch_start_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_scell_config)
}

void flex_scell_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&carrier_index_, 0, reinterpret_cast<char*>(&pdsch_start_) -
    reinterpret_cast<char*>(&carrier_index_) + sizeof(pdsch_start_));
}

flex_scell_config::~flex_scell_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_scell_config)
  SharedDtor();
}

void flex_scell_config::SharedDtor() {
}

void flex_scell_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_scell_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_scell_config& flex_scell_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_scell_config* flex_scell_config::New(::google::protobuf::Arena* arena) const {
  flex_scell_config* n = new flex_scell_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_scell_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_scell_config)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&carrier_index_, 0, reinterpret_cast<char*>(&pdsch_start_) -
      reinterpret_cast<char*>(&carrier_index_) + sizeof(pdsch_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_scell_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_scell_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 carrier_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scell_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_scell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 use_ccs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_ccs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_ccs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sched_cell_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sched_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sched_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pdsch_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pdsch_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdsch_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_scell_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_scell_config)
  return false;
#undef DO_
}

void flex_scell_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_scell_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->carrier_index(), output);
  }

  // optional uint32 scell_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scell_index(), output);
  }

  // optional uint32 use_ccs = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->use_ccs(), output);
  }

  // optional uint32 sched_cell_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sched_cell_index(), output);
  }

  // optional uint32 pdsch_start = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pdsch_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_scell_config)
}

::google::protobuf::uint8* flex_scell_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_scell_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->carrier_index(), target);
  }

  // optional uint32 scell_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scell_index(), target);
  }

  // optional uint32 use_ccs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->use_ccs(), target);
  }

  // optional uint32 sched_cell_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sched_cell_index(), target);
  }

  // optional uint32 pdsch_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pdsch_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_scell_config)
  return target;
}

size_t flex_scell_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_scell_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 carrier_index = 1;
    if (has_carrier_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

    // optional uint32 scell_index = 2;
    if (has_scell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scell_index());
    }

    // optional uint32 use_ccs = 3;
    if (has_use_ccs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_ccs());
    }

    // optional uint32 sched_cell_index = 4;
    if (has_sched_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sched_cell_index());
    }

    // optional uint32 pdsch_start = 5;
    if (has_pdsch_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdsch_start());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_scell_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_scell_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_scell_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_scell_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_scell_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_scell_config)
    MergeFrom(*source);
  }
}

void flex_scell_config::MergeFrom(const flex_scell_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_scell_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      scell_index_ = from.scell_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_ccs_ = from.use_ccs_;
    }
    if (cached_has_bits & 0x00000008u) {
      sched_cell_index_ = from.sched_cell_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      pdsch_start_ = from.pdsch_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_scell_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_scell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_scell_config::CopyFrom(const flex_scell_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_scell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_scell_config::IsInitialized() const {
  return true;
}

void flex_scell_config::Swap(flex_scell_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_scell_config::InternalSwap(flex_scell_config* other) {
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(scell_index_, other->scell_index_);
  std::swap(use_ccs_, other->use_ccs_);
  std::swap(sched_cell_index_, other->sched_cell_index_);
  std::swap(pdsch_start_, other->pdsch_start_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_scell_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_scell_config

// optional uint32 carrier_index = 1;
bool flex_scell_config::has_carrier_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_scell_config::set_has_carrier_index() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_scell_config::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_scell_config::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_scell_config::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.carrier_index)
  return carrier_index_;
}
void flex_scell_config::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.carrier_index)
}

// optional uint32 scell_index = 2;
bool flex_scell_config::has_scell_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_scell_config::set_has_scell_index() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_scell_config::clear_has_scell_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_scell_config::clear_scell_index() {
  scell_index_ = 0u;
  clear_has_scell_index();
}
::google::protobuf::uint32 flex_scell_config::scell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.scell_index)
  return scell_index_;
}
void flex_scell_config::set_scell_index(::google::protobuf::uint32 value) {
  set_has_scell_index();
  scell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.scell_index)
}

// optional uint32 use_ccs = 3;
bool flex_scell_config::has_use_ccs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_scell_config::set_has_use_ccs() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_scell_config::clear_has_use_ccs() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_scell_config::clear_use_ccs() {
  use_ccs_ = 0u;
  clear_has_use_ccs();
}
::google::protobuf::uint32 flex_scell_config::use_ccs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.use_ccs)
  return use_ccs_;
}
void flex_scell_config::set_use_ccs(::google::protobuf::uint32 value) {
  set_has_use_ccs();
  use_ccs_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.use_ccs)
}

// optional uint32 sched_cell_index = 4;
bool flex_scell_config::has_sched_cell_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_scell_config::set_has_sched_cell_index() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_scell_config::clear_has_sched_cell_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_scell_config::clear_sched_cell_index() {
  sched_cell_index_ = 0u;
  clear_has_sched_cell_index();
}
::google::protobuf::uint32 flex_scell_config::sched_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.sched_cell_index)
  return sched_cell_index_;
}
void flex_scell_config::set_sched_cell_index(::google::protobuf::uint32 value) {
  set_has_sched_cell_index();
  sched_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.sched_cell_index)
}

// optional uint32 pdsch_start = 5;
bool flex_scell_config::has_pdsch_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_scell_config::set_has_pdsch_start() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_scell_config::clear_has_pdsch_start() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_scell_config::clear_pdsch_start() {
  pdsch_start_ = 0u;
  clear_has_pdsch_start();
}
::google::protobuf::uint32 flex_scell_config::pdsch_start() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.pdsch_start)
  return pdsch_start_;
}
void flex_scell_config::set_pdsch_start(::google::protobuf::uint32 value) {
  set_has_pdsch_start();
  pdsch_start_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.pdsch_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_lc_config::kLcidFieldNumber;
const int flex_lc_config::kLcgFieldNumber;
const int flex_lc_config::kDirectionFieldNumber;
const int flex_lc_config::kQosBearerTypeFieldNumber;
const int flex_lc_config::kQciFieldNumber;
const int flex_lc_config::kERABMaxBitrateULFieldNumber;
const int flex_lc_config::kERABMaxBitrateDLFieldNumber;
const int flex_lc_config::kERABGuaranteedBitrateULFieldNumber;
const int flex_lc_config::kERABGuaranteedBitrateDLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_lc_config::flex_lc_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_lc_config)
}
flex_lc_config::flex_lc_config(const flex_lc_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lcid_, &from.lcid_,
    reinterpret_cast<char*>(&qci_) -
    reinterpret_cast<char*>(&lcid_) + sizeof(qci_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_config)
}

void flex_lc_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lcid_, 0, reinterpret_cast<char*>(&qci_) -
    reinterpret_cast<char*>(&lcid_) + sizeof(qci_));
}

flex_lc_config::~flex_lc_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_config)
  SharedDtor();
}

void flex_lc_config::SharedDtor() {
}

void flex_lc_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_lc_config::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_lc_config& flex_lc_config::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_lc_config* flex_lc_config::New(::google::protobuf::Arena* arena) const {
  flex_lc_config* n = new flex_lc_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_lc_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_config)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&lcid_, 0, reinterpret_cast<char*>(&e_rab_guaranteed_bitrate_dl_) -
      reinterpret_cast<char*>(&lcid_) + sizeof(e_rab_guaranteed_bitrate_dl_));
  }
  qci_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_lc_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_lc_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lcid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lcg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lcg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lcg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qos_bearer_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_qos_bearer_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qos_bearer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 qci = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_qci();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qci_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 e_RAB_max_bitrate_UL = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_e_rab_max_bitrate_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &e_rab_max_bitrate_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 e_RAB_max_bitrate_DL = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_e_rab_max_bitrate_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &e_rab_max_bitrate_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_e_rab_guaranteed_bitrate_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &e_rab_guaranteed_bitrate_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_e_rab_guaranteed_bitrate_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &e_rab_guaranteed_bitrate_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_lc_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_lc_config)
  return false;
#undef DO_
}

void flex_lc_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_lc_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lcid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lcid(), output);
  }

  // optional uint32 lcg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lcg(), output);
  }

  // optional uint32 direction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->direction(), output);
  }

  // optional uint32 qos_bearer_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->qos_bearer_type(), output);
  }

  // optional uint32 qci = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->qci(), output);
  }

  // optional uint64 e_RAB_max_bitrate_UL = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->e_rab_max_bitrate_ul(), output);
  }

  // optional uint64 e_RAB_max_bitrate_DL = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->e_rab_max_bitrate_dl(), output);
  }

  // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->e_rab_guaranteed_bitrate_ul(), output);
  }

  // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->e_rab_guaranteed_bitrate_dl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_lc_config)
}

::google::protobuf::uint8* flex_lc_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lcid(), target);
  }

  // optional uint32 lcg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lcg(), target);
  }

  // optional uint32 direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->direction(), target);
  }

  // optional uint32 qos_bearer_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->qos_bearer_type(), target);
  }

  // optional uint32 qci = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->qci(), target);
  }

  // optional uint64 e_RAB_max_bitrate_UL = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->e_rab_max_bitrate_ul(), target);
  }

  // optional uint64 e_RAB_max_bitrate_DL = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->e_rab_max_bitrate_dl(), target);
  }

  // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->e_rab_guaranteed_bitrate_ul(), target);
  }

  // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->e_rab_guaranteed_bitrate_dl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_config)
  return target;
}

size_t flex_lc_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 lcid = 1;
    if (has_lcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lcid());
    }

    // optional uint32 lcg = 2;
    if (has_lcg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lcg());
    }

    // optional uint32 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }

    // optional uint32 qos_bearer_type = 4;
    if (has_qos_bearer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qos_bearer_type());
    }

    // optional uint64 e_RAB_max_bitrate_UL = 6;
    if (has_e_rab_max_bitrate_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->e_rab_max_bitrate_ul());
    }

    // optional uint64 e_RAB_max_bitrate_DL = 7;
    if (has_e_rab_max_bitrate_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->e_rab_max_bitrate_dl());
    }

    // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
    if (has_e_rab_guaranteed_bitrate_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->e_rab_guaranteed_bitrate_ul());
    }

    // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
    if (has_e_rab_guaranteed_bitrate_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->e_rab_guaranteed_bitrate_dl());
    }

  }
  // optional uint32 qci = 5;
  if (has_qci()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->qci());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_lc_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_lc_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_config)
    MergeFrom(*source);
  }
}

void flex_lc_config::MergeFrom(const flex_lc_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lcid_ = from.lcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lcg_ = from.lcg_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000008u) {
      qos_bearer_type_ = from.qos_bearer_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      e_rab_max_bitrate_ul_ = from.e_rab_max_bitrate_ul_;
    }
    if (cached_has_bits & 0x00000020u) {
      e_rab_max_bitrate_dl_ = from.e_rab_max_bitrate_dl_;
    }
    if (cached_has_bits & 0x00000040u) {
      e_rab_guaranteed_bitrate_ul_ = from.e_rab_guaranteed_bitrate_ul_;
    }
    if (cached_has_bits & 0x00000080u) {
      e_rab_guaranteed_bitrate_dl_ = from.e_rab_guaranteed_bitrate_dl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_qci(from.qci());
  }
}

void flex_lc_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_config::CopyFrom(const flex_lc_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_config::IsInitialized() const {
  return true;
}

void flex_lc_config::Swap(flex_lc_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_lc_config::InternalSwap(flex_lc_config* other) {
  std::swap(lcid_, other->lcid_);
  std::swap(lcg_, other->lcg_);
  std::swap(direction_, other->direction_);
  std::swap(qos_bearer_type_, other->qos_bearer_type_);
  std::swap(e_rab_max_bitrate_ul_, other->e_rab_max_bitrate_ul_);
  std::swap(e_rab_max_bitrate_dl_, other->e_rab_max_bitrate_dl_);
  std::swap(e_rab_guaranteed_bitrate_ul_, other->e_rab_guaranteed_bitrate_ul_);
  std::swap(e_rab_guaranteed_bitrate_dl_, other->e_rab_guaranteed_bitrate_dl_);
  std::swap(qci_, other->qci_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_lc_config::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_lc_config

// optional uint32 lcid = 1;
bool flex_lc_config::has_lcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_lc_config::set_has_lcid() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_lc_config::clear_has_lcid() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_lc_config::clear_lcid() {
  lcid_ = 0u;
  clear_has_lcid();
}
::google::protobuf::uint32 flex_lc_config::lcid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.lcid)
  return lcid_;
}
void flex_lc_config::set_lcid(::google::protobuf::uint32 value) {
  set_has_lcid();
  lcid_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.lcid)
}

// optional uint32 lcg = 2;
bool flex_lc_config::has_lcg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_lc_config::set_has_lcg() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_lc_config::clear_has_lcg() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_lc_config::clear_lcg() {
  lcg_ = 0u;
  clear_has_lcg();
}
::google::protobuf::uint32 flex_lc_config::lcg() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.lcg)
  return lcg_;
}
void flex_lc_config::set_lcg(::google::protobuf::uint32 value) {
  set_has_lcg();
  lcg_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.lcg)
}

// optional uint32 direction = 3;
bool flex_lc_config::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_lc_config::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_lc_config::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_lc_config::clear_direction() {
  direction_ = 0u;
  clear_has_direction();
}
::google::protobuf::uint32 flex_lc_config::direction() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.direction)
  return direction_;
}
void flex_lc_config::set_direction(::google::protobuf::uint32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.direction)
}

// optional uint32 qos_bearer_type = 4;
bool flex_lc_config::has_qos_bearer_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_lc_config::set_has_qos_bearer_type() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_lc_config::clear_has_qos_bearer_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_lc_config::clear_qos_bearer_type() {
  qos_bearer_type_ = 0u;
  clear_has_qos_bearer_type();
}
::google::protobuf::uint32 flex_lc_config::qos_bearer_type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.qos_bearer_type)
  return qos_bearer_type_;
}
void flex_lc_config::set_qos_bearer_type(::google::protobuf::uint32 value) {
  set_has_qos_bearer_type();
  qos_bearer_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.qos_bearer_type)
}

// optional uint32 qci = 5;
bool flex_lc_config::has_qci() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_lc_config::set_has_qci() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_lc_config::clear_has_qci() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_lc_config::clear_qci() {
  qci_ = 0u;
  clear_has_qci();
}
::google::protobuf::uint32 flex_lc_config::qci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.qci)
  return qci_;
}
void flex_lc_config::set_qci(::google::protobuf::uint32 value) {
  set_has_qci();
  qci_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.qci)
}

// optional uint64 e_RAB_max_bitrate_UL = 6;
bool flex_lc_config::has_e_rab_max_bitrate_ul() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_lc_config::set_has_e_rab_max_bitrate_ul() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_lc_config::clear_has_e_rab_max_bitrate_ul() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_lc_config::clear_e_rab_max_bitrate_ul() {
  e_rab_max_bitrate_ul_ = GOOGLE_ULONGLONG(0);
  clear_has_e_rab_max_bitrate_ul();
}
::google::protobuf::uint64 flex_lc_config::e_rab_max_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_max_bitrate_UL)
  return e_rab_max_bitrate_ul_;
}
void flex_lc_config::set_e_rab_max_bitrate_ul(::google::protobuf::uint64 value) {
  set_has_e_rab_max_bitrate_ul();
  e_rab_max_bitrate_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_max_bitrate_UL)
}

// optional uint64 e_RAB_max_bitrate_DL = 7;
bool flex_lc_config::has_e_rab_max_bitrate_dl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_lc_config::set_has_e_rab_max_bitrate_dl() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_lc_config::clear_has_e_rab_max_bitrate_dl() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_lc_config::clear_e_rab_max_bitrate_dl() {
  e_rab_max_bitrate_dl_ = GOOGLE_ULONGLONG(0);
  clear_has_e_rab_max_bitrate_dl();
}
::google::protobuf::uint64 flex_lc_config::e_rab_max_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_max_bitrate_DL)
  return e_rab_max_bitrate_dl_;
}
void flex_lc_config::set_e_rab_max_bitrate_dl(::google::protobuf::uint64 value) {
  set_has_e_rab_max_bitrate_dl();
  e_rab_max_bitrate_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_max_bitrate_DL)
}

// optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
bool flex_lc_config::has_e_rab_guaranteed_bitrate_ul() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_lc_config::set_has_e_rab_guaranteed_bitrate_ul() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_lc_config::clear_has_e_rab_guaranteed_bitrate_ul() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_lc_config::clear_e_rab_guaranteed_bitrate_ul() {
  e_rab_guaranteed_bitrate_ul_ = GOOGLE_ULONGLONG(0);
  clear_has_e_rab_guaranteed_bitrate_ul();
}
::google::protobuf::uint64 flex_lc_config::e_rab_guaranteed_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_UL)
  return e_rab_guaranteed_bitrate_ul_;
}
void flex_lc_config::set_e_rab_guaranteed_bitrate_ul(::google::protobuf::uint64 value) {
  set_has_e_rab_guaranteed_bitrate_ul();
  e_rab_guaranteed_bitrate_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_UL)
}

// optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
bool flex_lc_config::has_e_rab_guaranteed_bitrate_dl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_lc_config::set_has_e_rab_guaranteed_bitrate_dl() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_lc_config::clear_has_e_rab_guaranteed_bitrate_dl() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_lc_config::clear_e_rab_guaranteed_bitrate_dl() {
  e_rab_guaranteed_bitrate_dl_ = GOOGLE_ULONGLONG(0);
  clear_has_e_rab_guaranteed_bitrate_dl();
}
::google::protobuf::uint64 flex_lc_config::e_rab_guaranteed_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_DL)
  return e_rab_guaranteed_bitrate_dl_;
}
void flex_lc_config::set_e_rab_guaranteed_bitrate_dl(::google::protobuf::uint64 value) {
  set_has_e_rab_guaranteed_bitrate_dl();
  e_rab_guaranteed_bitrate_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_DL)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_plmn::kMccFieldNumber;
const int flex_plmn::kMncFieldNumber;
const int flex_plmn::kMncLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_plmn::flex_plmn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_plmn)
}
flex_plmn::flex_plmn(const flex_plmn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mcc_, &from.mcc_,
    reinterpret_cast<char*>(&mnc_length_) -
    reinterpret_cast<char*>(&mcc_) + sizeof(mnc_length_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_plmn)
}

void flex_plmn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mcc_, 0, reinterpret_cast<char*>(&mnc_length_) -
    reinterpret_cast<char*>(&mcc_) + sizeof(mnc_length_));
}

flex_plmn::~flex_plmn() {
  // @@protoc_insertion_point(destructor:protocol.flex_plmn)
  SharedDtor();
}

void flex_plmn::SharedDtor() {
}

void flex_plmn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_plmn::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_plmn& flex_plmn::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_plmn* flex_plmn::New(::google::protobuf::Arena* arena) const {
  flex_plmn* n = new flex_plmn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_plmn::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_plmn)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&mcc_, 0, reinterpret_cast<char*>(&mnc_length_) -
      reinterpret_cast<char*>(&mcc_) + sizeof(mnc_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_plmn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_plmn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mcc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_mcc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mnc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mnc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mnc_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_mnc_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnc_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_plmn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_plmn)
  return false;
#undef DO_
}

void flex_plmn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_plmn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mcc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mcc(), output);
  }

  // optional uint32 mnc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mnc(), output);
  }

  // optional uint32 mnc_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mnc_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_plmn)
}

::google::protobuf::uint8* flex_plmn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_plmn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mcc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mcc(), target);
  }

  // optional uint32 mnc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mnc(), target);
  }

  // optional uint32 mnc_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mnc_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_plmn)
  return target;
}

size_t flex_plmn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_plmn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 mcc = 1;
    if (has_mcc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcc());
    }

    // optional uint32 mnc = 2;
    if (has_mnc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mnc());
    }

    // optional uint32 mnc_length = 3;
    if (has_mnc_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mnc_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_plmn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_plmn)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_plmn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_plmn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_plmn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_plmn)
    MergeFrom(*source);
  }
}

void flex_plmn::MergeFrom(const flex_plmn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_plmn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mcc_ = from.mcc_;
    }
    if (cached_has_bits & 0x00000002u) {
      mnc_ = from.mnc_;
    }
    if (cached_has_bits & 0x00000004u) {
      mnc_length_ = from.mnc_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_plmn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_plmn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_plmn::CopyFrom(const flex_plmn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_plmn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_plmn::IsInitialized() const {
  return true;
}

void flex_plmn::Swap(flex_plmn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_plmn::InternalSwap(flex_plmn* other) {
  std::swap(mcc_, other->mcc_);
  std::swap(mnc_, other->mnc_);
  std::swap(mnc_length_, other->mnc_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_plmn::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_plmn

// optional uint32 mcc = 1;
bool flex_plmn::has_mcc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_plmn::set_has_mcc() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_plmn::clear_has_mcc() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_plmn::clear_mcc() {
  mcc_ = 0u;
  clear_has_mcc();
}
::google::protobuf::uint32 flex_plmn::mcc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_plmn.mcc)
  return mcc_;
}
void flex_plmn::set_mcc(::google::protobuf::uint32 value) {
  set_has_mcc();
  mcc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_plmn.mcc)
}

// optional uint32 mnc = 2;
bool flex_plmn::has_mnc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_plmn::set_has_mnc() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_plmn::clear_has_mnc() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_plmn::clear_mnc() {
  mnc_ = 0u;
  clear_has_mnc();
}
::google::protobuf::uint32 flex_plmn::mnc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_plmn.mnc)
  return mnc_;
}
void flex_plmn::set_mnc(::google::protobuf::uint32 value) {
  set_has_mnc();
  mnc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_plmn.mnc)
}

// optional uint32 mnc_length = 3;
bool flex_plmn::has_mnc_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_plmn::set_has_mnc_length() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_plmn::clear_has_mnc_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_plmn::clear_mnc_length() {
  mnc_length_ = 0u;
  clear_has_mnc_length();
}
::google::protobuf::uint32 flex_plmn::mnc_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_plmn.mnc_length)
  return mnc_length_;
}
void flex_plmn::set_mnc_length(::google::protobuf::uint32 value) {
  set_has_mnc_length();
  mnc_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_plmn.mnc_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_measurement_info::kOffsetFreqServingFieldNumber;
const int flex_measurement_info::kOffsetFreqNeighbouringFieldNumber;
const int flex_measurement_info::kCellIndividualOffsetFieldNumber;
const int flex_measurement_info::kFilterCoefficientRsrpFieldNumber;
const int flex_measurement_info::kFilterCoefficientRsrqFieldNumber;
const int flex_measurement_info::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_measurement_info::flex_measurement_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_measurement_info)
}
flex_measurement_info::flex_measurement_info(const flex_measurement_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cell_individual_offset_(from.cell_individual_offset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_event()) {
    event_ = new ::protocol::flex_measurement_event(*from.event_);
  } else {
    event_ = NULL;
  }
  ::memcpy(&offset_freq_serving_, &from.offset_freq_serving_,
    reinterpret_cast<char*>(&filter_coefficient_rsrq_) -
    reinterpret_cast<char*>(&offset_freq_serving_) + sizeof(filter_coefficient_rsrq_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_measurement_info)
}

void flex_measurement_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_, 0, reinterpret_cast<char*>(&filter_coefficient_rsrq_) -
    reinterpret_cast<char*>(&event_) + sizeof(filter_coefficient_rsrq_));
}

flex_measurement_info::~flex_measurement_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_measurement_info)
  SharedDtor();
}

void flex_measurement_info::SharedDtor() {
  if (this != internal_default_instance()) {
    delete event_;
  }
}

void flex_measurement_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_measurement_info::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_measurement_info& flex_measurement_info::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_measurement_info* flex_measurement_info::New(::google::protobuf::Arena* arena) const {
  flex_measurement_info* n = new flex_measurement_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_measurement_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_measurement_info)
  cell_individual_offset_.Clear();
  if (has_event()) {
    GOOGLE_DCHECK(event_ != NULL);
    event_->::protocol::flex_measurement_event::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&offset_freq_serving_, 0, reinterpret_cast<char*>(&filter_coefficient_rsrq_) -
      reinterpret_cast<char*>(&offset_freq_serving_) + sizeof(filter_coefficient_rsrq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_measurement_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_measurement_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 offset_freq_serving = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_offset_freq_serving();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_freq_serving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 offset_freq_neighbouring = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_offset_freq_neighbouring();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_freq_neighbouring_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 cell_individual_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24u, input, this->mutable_cell_individual_offset())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cell_individual_offset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 filter_coefficient_rsrp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filter_coefficient_rsrp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_coefficient_rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 filter_coefficient_rsrq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_filter_coefficient_rsrq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filter_coefficient_rsrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_measurement_event event = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_measurement_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_measurement_info)
  return false;
#undef DO_
}

void flex_measurement_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_measurement_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 offset_freq_serving = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->offset_freq_serving(), output);
  }

  // optional int64 offset_freq_neighbouring = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset_freq_neighbouring(), output);
  }

  // repeated int64 cell_individual_offset = 3;
  for (int i = 0, n = this->cell_individual_offset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->cell_individual_offset(i), output);
  }

  // optional int64 filter_coefficient_rsrp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filter_coefficient_rsrp(), output);
  }

  // optional int64 filter_coefficient_rsrq = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->filter_coefficient_rsrq(), output);
  }

  // optional .protocol.flex_measurement_event event = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->event_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_measurement_info)
}

::google::protobuf::uint8* flex_measurement_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_measurement_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 offset_freq_serving = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->offset_freq_serving(), target);
  }

  // optional int64 offset_freq_neighbouring = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset_freq_neighbouring(), target);
  }

  // repeated int64 cell_individual_offset = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt64ToArray(3, this->cell_individual_offset_, target);

  // optional int64 filter_coefficient_rsrp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filter_coefficient_rsrp(), target);
  }

  // optional int64 filter_coefficient_rsrq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->filter_coefficient_rsrq(), target);
  }

  // optional .protocol.flex_measurement_event event = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->event_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_measurement_info)
  return target;
}

size_t flex_measurement_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_measurement_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int64 cell_individual_offset = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->cell_individual_offset_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cell_individual_offset_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .protocol.flex_measurement_event event = 6;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->event_);
    }

    // optional int64 offset_freq_serving = 1;
    if (has_offset_freq_serving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_freq_serving());
    }

    // optional int64 offset_freq_neighbouring = 2;
    if (has_offset_freq_neighbouring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offset_freq_neighbouring());
    }

    // optional int64 filter_coefficient_rsrp = 4;
    if (has_filter_coefficient_rsrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filter_coefficient_rsrp());
    }

    // optional int64 filter_coefficient_rsrq = 5;
    if (has_filter_coefficient_rsrq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filter_coefficient_rsrq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_measurement_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_measurement_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_measurement_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_measurement_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_measurement_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_measurement_info)
    MergeFrom(*source);
  }
}

void flex_measurement_info::MergeFrom(const flex_measurement_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_measurement_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_individual_offset_.MergeFrom(from.cell_individual_offset_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_event()->::protocol::flex_measurement_event::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_freq_serving_ = from.offset_freq_serving_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_freq_neighbouring_ = from.offset_freq_neighbouring_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_coefficient_rsrp_ = from.filter_coefficient_rsrp_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_coefficient_rsrq_ = from.filter_coefficient_rsrq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_measurement_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_measurement_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_measurement_info::CopyFrom(const flex_measurement_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_measurement_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_measurement_info::IsInitialized() const {
  return true;
}

void flex_measurement_info::Swap(flex_measurement_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_measurement_info::InternalSwap(flex_measurement_info* other) {
  cell_individual_offset_.InternalSwap(&other->cell_individual_offset_);
  std::swap(event_, other->event_);
  std::swap(offset_freq_serving_, other->offset_freq_serving_);
  std::swap(offset_freq_neighbouring_, other->offset_freq_neighbouring_);
  std::swap(filter_coefficient_rsrp_, other->filter_coefficient_rsrp_);
  std::swap(filter_coefficient_rsrq_, other->filter_coefficient_rsrq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_measurement_info::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_measurement_info

// optional int64 offset_freq_serving = 1;
bool flex_measurement_info::has_offset_freq_serving() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_measurement_info::set_has_offset_freq_serving() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_measurement_info::clear_has_offset_freq_serving() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_measurement_info::clear_offset_freq_serving() {
  offset_freq_serving_ = GOOGLE_LONGLONG(0);
  clear_has_offset_freq_serving();
}
::google::protobuf::int64 flex_measurement_info::offset_freq_serving() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.offset_freq_serving)
  return offset_freq_serving_;
}
void flex_measurement_info::set_offset_freq_serving(::google::protobuf::int64 value) {
  set_has_offset_freq_serving();
  offset_freq_serving_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.offset_freq_serving)
}

// optional int64 offset_freq_neighbouring = 2;
bool flex_measurement_info::has_offset_freq_neighbouring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_measurement_info::set_has_offset_freq_neighbouring() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_measurement_info::clear_has_offset_freq_neighbouring() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_measurement_info::clear_offset_freq_neighbouring() {
  offset_freq_neighbouring_ = GOOGLE_LONGLONG(0);
  clear_has_offset_freq_neighbouring();
}
::google::protobuf::int64 flex_measurement_info::offset_freq_neighbouring() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.offset_freq_neighbouring)
  return offset_freq_neighbouring_;
}
void flex_measurement_info::set_offset_freq_neighbouring(::google::protobuf::int64 value) {
  set_has_offset_freq_neighbouring();
  offset_freq_neighbouring_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.offset_freq_neighbouring)
}

// repeated int64 cell_individual_offset = 3;
int flex_measurement_info::cell_individual_offset_size() const {
  return cell_individual_offset_.size();
}
void flex_measurement_info::clear_cell_individual_offset() {
  cell_individual_offset_.Clear();
}
::google::protobuf::int64 flex_measurement_info::cell_individual_offset(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.cell_individual_offset)
  return cell_individual_offset_.Get(index);
}
void flex_measurement_info::set_cell_individual_offset(int index, ::google::protobuf::int64 value) {
  cell_individual_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.cell_individual_offset)
}
void flex_measurement_info::add_cell_individual_offset(::google::protobuf::int64 value) {
  cell_individual_offset_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_measurement_info.cell_individual_offset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
flex_measurement_info::cell_individual_offset() const {
  // @@protoc_insertion_point(field_list:protocol.flex_measurement_info.cell_individual_offset)
  return cell_individual_offset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
flex_measurement_info::mutable_cell_individual_offset() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_measurement_info.cell_individual_offset)
  return &cell_individual_offset_;
}

// optional int64 filter_coefficient_rsrp = 4;
bool flex_measurement_info::has_filter_coefficient_rsrp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_measurement_info::set_has_filter_coefficient_rsrp() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_measurement_info::clear_has_filter_coefficient_rsrp() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_measurement_info::clear_filter_coefficient_rsrp() {
  filter_coefficient_rsrp_ = GOOGLE_LONGLONG(0);
  clear_has_filter_coefficient_rsrp();
}
::google::protobuf::int64 flex_measurement_info::filter_coefficient_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.filter_coefficient_rsrp)
  return filter_coefficient_rsrp_;
}
void flex_measurement_info::set_filter_coefficient_rsrp(::google::protobuf::int64 value) {
  set_has_filter_coefficient_rsrp();
  filter_coefficient_rsrp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.filter_coefficient_rsrp)
}

// optional int64 filter_coefficient_rsrq = 5;
bool flex_measurement_info::has_filter_coefficient_rsrq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_measurement_info::set_has_filter_coefficient_rsrq() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_measurement_info::clear_has_filter_coefficient_rsrq() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_measurement_info::clear_filter_coefficient_rsrq() {
  filter_coefficient_rsrq_ = GOOGLE_LONGLONG(0);
  clear_has_filter_coefficient_rsrq();
}
::google::protobuf::int64 flex_measurement_info::filter_coefficient_rsrq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.filter_coefficient_rsrq)
  return filter_coefficient_rsrq_;
}
void flex_measurement_info::set_filter_coefficient_rsrq(::google::protobuf::int64 value) {
  set_has_filter_coefficient_rsrq();
  filter_coefficient_rsrq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.filter_coefficient_rsrq)
}

// optional .protocol.flex_measurement_event event = 6;
bool flex_measurement_info::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_measurement_info::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_measurement_info::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_measurement_info::clear_event() {
  if (event_ != NULL) event_->::protocol::flex_measurement_event::Clear();
  clear_has_event();
}
const ::protocol::flex_measurement_event& flex_measurement_info::event() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.event)
  return event_ != NULL ? *event_
                         : *::protocol::flex_measurement_event::internal_default_instance();
}
::protocol::flex_measurement_event* flex_measurement_info::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::protocol::flex_measurement_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_info.event)
  return event_;
}
::protocol::flex_measurement_event* flex_measurement_info::release_event() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_info.event)
  clear_has_event();
  ::protocol::flex_measurement_event* temp = event_;
  event_ = NULL;
  return temp;
}
void flex_measurement_info::set_allocated_event(::protocol::flex_measurement_event* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_info.event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_measurement_event::kPeriodicalFieldNumber;
const int flex_measurement_event::kA1FieldNumber;
const int flex_measurement_event::kA2FieldNumber;
const int flex_measurement_event::kA3FieldNumber;
const int flex_measurement_event::kA4FieldNumber;
const int flex_measurement_event::kA5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_measurement_event::flex_measurement_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_measurement_event)
}
flex_measurement_event::flex_measurement_event(const flex_measurement_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_periodical()) {
    periodical_ = new ::protocol::flex_per_event(*from.periodical_);
  } else {
    periodical_ = NULL;
  }
  if (from.has_a1()) {
    a1_ = new ::protocol::flex_a1_event(*from.a1_);
  } else {
    a1_ = NULL;
  }
  if (from.has_a2()) {
    a2_ = new ::protocol::flex_a2_event(*from.a2_);
  } else {
    a2_ = NULL;
  }
  if (from.has_a3()) {
    a3_ = new ::protocol::flex_a3_event(*from.a3_);
  } else {
    a3_ = NULL;
  }
  if (from.has_a4()) {
    a4_ = new ::protocol::flex_a4_event(*from.a4_);
  } else {
    a4_ = NULL;
  }
  if (from.has_a5()) {
    a5_ = new ::protocol::flex_a5_event(*from.a5_);
  } else {
    a5_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_measurement_event)
}

void flex_measurement_event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&periodical_, 0, reinterpret_cast<char*>(&a5_) -
    reinterpret_cast<char*>(&periodical_) + sizeof(a5_));
}

flex_measurement_event::~flex_measurement_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_measurement_event)
  SharedDtor();
}

void flex_measurement_event::SharedDtor() {
  if (this != internal_default_instance()) {
    delete periodical_;
  }
  if (this != internal_default_instance()) {
    delete a1_;
  }
  if (this != internal_default_instance()) {
    delete a2_;
  }
  if (this != internal_default_instance()) {
    delete a3_;
  }
  if (this != internal_default_instance()) {
    delete a4_;
  }
  if (this != internal_default_instance()) {
    delete a5_;
  }
}

void flex_measurement_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_measurement_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_measurement_event& flex_measurement_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_measurement_event* flex_measurement_event::New(::google::protobuf::Arena* arena) const {
  flex_measurement_event* n = new flex_measurement_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_measurement_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_measurement_event)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_periodical()) {
      GOOGLE_DCHECK(periodical_ != NULL);
      periodical_->::protocol::flex_per_event::Clear();
    }
    if (has_a1()) {
      GOOGLE_DCHECK(a1_ != NULL);
      a1_->::protocol::flex_a1_event::Clear();
    }
    if (has_a2()) {
      GOOGLE_DCHECK(a2_ != NULL);
      a2_->::protocol::flex_a2_event::Clear();
    }
    if (has_a3()) {
      GOOGLE_DCHECK(a3_ != NULL);
      a3_->::protocol::flex_a3_event::Clear();
    }
    if (has_a4()) {
      GOOGLE_DCHECK(a4_ != NULL);
      a4_->::protocol::flex_a4_event::Clear();
    }
    if (has_a5()) {
      GOOGLE_DCHECK(a5_ != NULL);
      a5_->::protocol::flex_a5_event::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_measurement_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_measurement_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_per_event periodical = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_periodical()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_a1_event a1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_a2_event a2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_a3_event a3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_a4_event a4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a4()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_a5_event a5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_measurement_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_measurement_event)
  return false;
#undef DO_
}

void flex_measurement_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_measurement_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_per_event periodical = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->periodical_, output);
  }

  // optional .protocol.flex_a1_event a1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->a1_, output);
  }

  // optional .protocol.flex_a2_event a2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->a2_, output);
  }

  // optional .protocol.flex_a3_event a3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->a3_, output);
  }

  // optional .protocol.flex_a4_event a4 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->a4_, output);
  }

  // optional .protocol.flex_a5_event a5 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->a5_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_measurement_event)
}

::google::protobuf::uint8* flex_measurement_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_measurement_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_per_event periodical = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->periodical_, deterministic, target);
  }

  // optional .protocol.flex_a1_event a1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->a1_, deterministic, target);
  }

  // optional .protocol.flex_a2_event a2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->a2_, deterministic, target);
  }

  // optional .protocol.flex_a3_event a3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->a3_, deterministic, target);
  }

  // optional .protocol.flex_a4_event a4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->a4_, deterministic, target);
  }

  // optional .protocol.flex_a5_event a5 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->a5_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_measurement_event)
  return target;
}

size_t flex_measurement_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_measurement_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .protocol.flex_per_event periodical = 1;
    if (has_periodical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->periodical_);
    }

    // optional .protocol.flex_a1_event a1 = 2;
    if (has_a1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a1_);
    }

    // optional .protocol.flex_a2_event a2 = 3;
    if (has_a2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a2_);
    }

    // optional .protocol.flex_a3_event a3 = 4;
    if (has_a3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a3_);
    }

    // optional .protocol.flex_a4_event a4 = 5;
    if (has_a4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a4_);
    }

    // optional .protocol.flex_a5_event a5 = 6;
    if (has_a5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->a5_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_measurement_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_measurement_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_measurement_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_measurement_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_measurement_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_measurement_event)
    MergeFrom(*source);
  }
}

void flex_measurement_event::MergeFrom(const flex_measurement_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_measurement_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_periodical()->::protocol::flex_per_event::MergeFrom(from.periodical());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_a1()->::protocol::flex_a1_event::MergeFrom(from.a1());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_a2()->::protocol::flex_a2_event::MergeFrom(from.a2());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_a3()->::protocol::flex_a3_event::MergeFrom(from.a3());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_a4()->::protocol::flex_a4_event::MergeFrom(from.a4());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_a5()->::protocol::flex_a5_event::MergeFrom(from.a5());
    }
  }
}

void flex_measurement_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_measurement_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_measurement_event::CopyFrom(const flex_measurement_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_measurement_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_measurement_event::IsInitialized() const {
  return true;
}

void flex_measurement_event::Swap(flex_measurement_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_measurement_event::InternalSwap(flex_measurement_event* other) {
  std::swap(periodical_, other->periodical_);
  std::swap(a1_, other->a1_);
  std::swap(a2_, other->a2_);
  std::swap(a3_, other->a3_);
  std::swap(a4_, other->a4_);
  std::swap(a5_, other->a5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_measurement_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_measurement_event

// optional .protocol.flex_per_event periodical = 1;
bool flex_measurement_event::has_periodical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_measurement_event::set_has_periodical() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_measurement_event::clear_has_periodical() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_measurement_event::clear_periodical() {
  if (periodical_ != NULL) periodical_->::protocol::flex_per_event::Clear();
  clear_has_periodical();
}
const ::protocol::flex_per_event& flex_measurement_event::periodical() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.periodical)
  return periodical_ != NULL ? *periodical_
                         : *::protocol::flex_per_event::internal_default_instance();
}
::protocol::flex_per_event* flex_measurement_event::mutable_periodical() {
  set_has_periodical();
  if (periodical_ == NULL) {
    periodical_ = new ::protocol::flex_per_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.periodical)
  return periodical_;
}
::protocol::flex_per_event* flex_measurement_event::release_periodical() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.periodical)
  clear_has_periodical();
  ::protocol::flex_per_event* temp = periodical_;
  periodical_ = NULL;
  return temp;
}
void flex_measurement_event::set_allocated_periodical(::protocol::flex_per_event* periodical) {
  delete periodical_;
  periodical_ = periodical;
  if (periodical) {
    set_has_periodical();
  } else {
    clear_has_periodical();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.periodical)
}

// optional .protocol.flex_a1_event a1 = 2;
bool flex_measurement_event::has_a1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_measurement_event::set_has_a1() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_measurement_event::clear_has_a1() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_measurement_event::clear_a1() {
  if (a1_ != NULL) a1_->::protocol::flex_a1_event::Clear();
  clear_has_a1();
}
const ::protocol::flex_a1_event& flex_measurement_event::a1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a1)
  return a1_ != NULL ? *a1_
                         : *::protocol::flex_a1_event::internal_default_instance();
}
::protocol::flex_a1_event* flex_measurement_event::mutable_a1() {
  set_has_a1();
  if (a1_ == NULL) {
    a1_ = new ::protocol::flex_a1_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a1)
  return a1_;
}
::protocol::flex_a1_event* flex_measurement_event::release_a1() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a1)
  clear_has_a1();
  ::protocol::flex_a1_event* temp = a1_;
  a1_ = NULL;
  return temp;
}
void flex_measurement_event::set_allocated_a1(::protocol::flex_a1_event* a1) {
  delete a1_;
  a1_ = a1;
  if (a1) {
    set_has_a1();
  } else {
    clear_has_a1();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a1)
}

// optional .protocol.flex_a2_event a2 = 3;
bool flex_measurement_event::has_a2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_measurement_event::set_has_a2() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_measurement_event::clear_has_a2() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_measurement_event::clear_a2() {
  if (a2_ != NULL) a2_->::protocol::flex_a2_event::Clear();
  clear_has_a2();
}
const ::protocol::flex_a2_event& flex_measurement_event::a2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a2)
  return a2_ != NULL ? *a2_
                         : *::protocol::flex_a2_event::internal_default_instance();
}
::protocol::flex_a2_event* flex_measurement_event::mutable_a2() {
  set_has_a2();
  if (a2_ == NULL) {
    a2_ = new ::protocol::flex_a2_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a2)
  return a2_;
}
::protocol::flex_a2_event* flex_measurement_event::release_a2() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a2)
  clear_has_a2();
  ::protocol::flex_a2_event* temp = a2_;
  a2_ = NULL;
  return temp;
}
void flex_measurement_event::set_allocated_a2(::protocol::flex_a2_event* a2) {
  delete a2_;
  a2_ = a2;
  if (a2) {
    set_has_a2();
  } else {
    clear_has_a2();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a2)
}

// optional .protocol.flex_a3_event a3 = 4;
bool flex_measurement_event::has_a3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_measurement_event::set_has_a3() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_measurement_event::clear_has_a3() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_measurement_event::clear_a3() {
  if (a3_ != NULL) a3_->::protocol::flex_a3_event::Clear();
  clear_has_a3();
}
const ::protocol::flex_a3_event& flex_measurement_event::a3() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a3)
  return a3_ != NULL ? *a3_
                         : *::protocol::flex_a3_event::internal_default_instance();
}
::protocol::flex_a3_event* flex_measurement_event::mutable_a3() {
  set_has_a3();
  if (a3_ == NULL) {
    a3_ = new ::protocol::flex_a3_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a3)
  return a3_;
}
::protocol::flex_a3_event* flex_measurement_event::release_a3() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a3)
  clear_has_a3();
  ::protocol::flex_a3_event* temp = a3_;
  a3_ = NULL;
  return temp;
}
void flex_measurement_event::set_allocated_a3(::protocol::flex_a3_event* a3) {
  delete a3_;
  a3_ = a3;
  if (a3) {
    set_has_a3();
  } else {
    clear_has_a3();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a3)
}

// optional .protocol.flex_a4_event a4 = 5;
bool flex_measurement_event::has_a4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_measurement_event::set_has_a4() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_measurement_event::clear_has_a4() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_measurement_event::clear_a4() {
  if (a4_ != NULL) a4_->::protocol::flex_a4_event::Clear();
  clear_has_a4();
}
const ::protocol::flex_a4_event& flex_measurement_event::a4() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a4)
  return a4_ != NULL ? *a4_
                         : *::protocol::flex_a4_event::internal_default_instance();
}
::protocol::flex_a4_event* flex_measurement_event::mutable_a4() {
  set_has_a4();
  if (a4_ == NULL) {
    a4_ = new ::protocol::flex_a4_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a4)
  return a4_;
}
::protocol::flex_a4_event* flex_measurement_event::release_a4() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a4)
  clear_has_a4();
  ::protocol::flex_a4_event* temp = a4_;
  a4_ = NULL;
  return temp;
}
void flex_measurement_event::set_allocated_a4(::protocol::flex_a4_event* a4) {
  delete a4_;
  a4_ = a4;
  if (a4) {
    set_has_a4();
  } else {
    clear_has_a4();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a4)
}

// optional .protocol.flex_a5_event a5 = 6;
bool flex_measurement_event::has_a5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_measurement_event::set_has_a5() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_measurement_event::clear_has_a5() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_measurement_event::clear_a5() {
  if (a5_ != NULL) a5_->::protocol::flex_a5_event::Clear();
  clear_has_a5();
}
const ::protocol::flex_a5_event& flex_measurement_event::a5() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a5)
  return a5_ != NULL ? *a5_
                         : *::protocol::flex_a5_event::internal_default_instance();
}
::protocol::flex_a5_event* flex_measurement_event::mutable_a5() {
  set_has_a5();
  if (a5_ == NULL) {
    a5_ = new ::protocol::flex_a5_event;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a5)
  return a5_;
}
::protocol::flex_a5_event* flex_measurement_event::release_a5() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a5)
  clear_has_a5();
  ::protocol::flex_a5_event* temp = a5_;
  a5_ = NULL;
  return temp;
}
void flex_measurement_event::set_allocated_a5(::protocol::flex_a5_event* a5) {
  delete a5_;
  a5_ = a5;
  if (a5) {
    set_has_a5();
  } else {
    clear_has_a5();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_per_event::kMaxReportCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_per_event::flex_per_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_per_event)
}
flex_per_event::flex_per_event(const flex_per_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_report_cells_ = from.max_report_cells_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_per_event)
}

void flex_per_event::SharedCtor() {
  _cached_size_ = 0;
  max_report_cells_ = GOOGLE_LONGLONG(0);
}

flex_per_event::~flex_per_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_per_event)
  SharedDtor();
}

void flex_per_event::SharedDtor() {
}

void flex_per_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_per_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_per_event& flex_per_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_per_event* flex_per_event::New(::google::protobuf::Arena* arena) const {
  flex_per_event* n = new flex_per_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_per_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_per_event)
  max_report_cells_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_per_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_per_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 max_report_cells = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_max_report_cells();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_per_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_per_event)
  return false;
#undef DO_
}

void flex_per_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_per_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 max_report_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->max_report_cells(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_per_event)
}

::google::protobuf::uint8* flex_per_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_per_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 max_report_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->max_report_cells(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_per_event)
  return target;
}

size_t flex_per_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_per_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int64 max_report_cells = 1;
  if (has_max_report_cells()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_report_cells());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_per_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_per_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_per_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_per_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_per_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_per_event)
    MergeFrom(*source);
  }
}

void flex_per_event::MergeFrom(const flex_per_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_per_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_report_cells()) {
    set_max_report_cells(from.max_report_cells());
  }
}

void flex_per_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_per_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_per_event::CopyFrom(const flex_per_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_per_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_per_event::IsInitialized() const {
  return true;
}

void flex_per_event::Swap(flex_per_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_per_event::InternalSwap(flex_per_event* other) {
  std::swap(max_report_cells_, other->max_report_cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_per_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_per_event

// optional int64 max_report_cells = 1;
bool flex_per_event::has_max_report_cells() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_per_event::set_has_max_report_cells() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_per_event::clear_has_max_report_cells() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_per_event::clear_max_report_cells() {
  max_report_cells_ = GOOGLE_LONGLONG(0);
  clear_has_max_report_cells();
}
::google::protobuf::int64 flex_per_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_per_event.max_report_cells)
  return max_report_cells_;
}
void flex_per_event::set_max_report_cells(::google::protobuf::int64 value) {
  set_has_max_report_cells();
  max_report_cells_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_per_event.max_report_cells)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_a1_event::kThresholdRsrpFieldNumber;
const int flex_a1_event::kHysteresisFieldNumber;
const int flex_a1_event::kTimeToTriggerFieldNumber;
const int flex_a1_event::kMaxReportCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_a1_event::flex_a1_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_a1_event)
}
flex_a1_event::flex_a1_event(const flex_a1_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_, &from.threshold_rsrp_,
    reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a1_event)
}

void flex_a1_event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&threshold_rsrp_, 0, reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
}

flex_a1_event::~flex_a1_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a1_event)
  SharedDtor();
}

void flex_a1_event::SharedDtor() {
}

void flex_a1_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_a1_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_a1_event& flex_a1_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_a1_event* flex_a1_event::New(::google::protobuf::Arena* arena) const {
  flex_a1_event* n = new flex_a1_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_a1_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a1_event)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&threshold_rsrp_, 0, reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_a1_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_a1_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 threshold_rsrp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_threshold_rsrp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hysteresis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_to_trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_to_trigger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_report_cells = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_report_cells();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_a1_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_a1_event)
  return false;
#undef DO_
}

void flex_a1_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_a1_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->threshold_rsrp(), output);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hysteresis(), output);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_to_trigger(), output);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_report_cells(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_a1_event)
}

::google::protobuf::uint8* flex_a1_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a1_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->threshold_rsrp(), target);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hysteresis(), target);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_report_cells(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a1_event)
  return target;
}

size_t flex_a1_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a1_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 threshold_rsrp = 1;
    if (has_threshold_rsrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threshold_rsrp());
    }

    // optional int64 hysteresis = 2;
    if (has_hysteresis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hysteresis());
    }

    // optional int64 time_to_trigger = 3;
    if (has_time_to_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_trigger());
    }

    // optional int64 max_report_cells = 4;
    if (has_max_report_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_report_cells());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_a1_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a1_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a1_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_a1_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a1_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a1_event)
    MergeFrom(*source);
  }
}

void flex_a1_event::MergeFrom(const flex_a1_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a1_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_ = from.threshold_rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a1_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a1_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a1_event::CopyFrom(const flex_a1_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a1_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a1_event::IsInitialized() const {
  return true;
}

void flex_a1_event::Swap(flex_a1_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_a1_event::InternalSwap(flex_a1_event* other) {
  std::swap(threshold_rsrp_, other->threshold_rsrp_);
  std::swap(hysteresis_, other->hysteresis_);
  std::swap(time_to_trigger_, other->time_to_trigger_);
  std::swap(max_report_cells_, other->max_report_cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_a1_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_a1_event

// optional int64 threshold_rsrp = 1;
bool flex_a1_event::has_threshold_rsrp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_a1_event::set_has_threshold_rsrp() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_a1_event::clear_has_threshold_rsrp() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_a1_event::clear_threshold_rsrp() {
  threshold_rsrp_ = GOOGLE_LONGLONG(0);
  clear_has_threshold_rsrp();
}
::google::protobuf::int64 flex_a1_event::threshold_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.threshold_rsrp)
  return threshold_rsrp_;
}
void flex_a1_event::set_threshold_rsrp(::google::protobuf::int64 value) {
  set_has_threshold_rsrp();
  threshold_rsrp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.threshold_rsrp)
}

// optional int64 hysteresis = 2;
bool flex_a1_event::has_hysteresis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_a1_event::set_has_hysteresis() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_a1_event::clear_has_hysteresis() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_a1_event::clear_hysteresis() {
  hysteresis_ = GOOGLE_LONGLONG(0);
  clear_has_hysteresis();
}
::google::protobuf::int64 flex_a1_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.hysteresis)
  return hysteresis_;
}
void flex_a1_event::set_hysteresis(::google::protobuf::int64 value) {
  set_has_hysteresis();
  hysteresis_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.hysteresis)
}

// optional int64 time_to_trigger = 3;
bool flex_a1_event::has_time_to_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_a1_event::set_has_time_to_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_a1_event::clear_has_time_to_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_a1_event::clear_time_to_trigger() {
  time_to_trigger_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_trigger();
}
::google::protobuf::int64 flex_a1_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.time_to_trigger)
  return time_to_trigger_;
}
void flex_a1_event::set_time_to_trigger(::google::protobuf::int64 value) {
  set_has_time_to_trigger();
  time_to_trigger_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.time_to_trigger)
}

// optional int64 max_report_cells = 4;
bool flex_a1_event::has_max_report_cells() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_a1_event::set_has_max_report_cells() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_a1_event::clear_has_max_report_cells() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_a1_event::clear_max_report_cells() {
  max_report_cells_ = GOOGLE_LONGLONG(0);
  clear_has_max_report_cells();
}
::google::protobuf::int64 flex_a1_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.max_report_cells)
  return max_report_cells_;
}
void flex_a1_event::set_max_report_cells(::google::protobuf::int64 value) {
  set_has_max_report_cells();
  max_report_cells_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.max_report_cells)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_a2_event::kThresholdRsrpFieldNumber;
const int flex_a2_event::kHysteresisFieldNumber;
const int flex_a2_event::kTimeToTriggerFieldNumber;
const int flex_a2_event::kMaxReportCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_a2_event::flex_a2_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_a2_event)
}
flex_a2_event::flex_a2_event(const flex_a2_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_, &from.threshold_rsrp_,
    reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a2_event)
}

void flex_a2_event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&threshold_rsrp_, 0, reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
}

flex_a2_event::~flex_a2_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a2_event)
  SharedDtor();
}

void flex_a2_event::SharedDtor() {
}

void flex_a2_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_a2_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_a2_event& flex_a2_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_a2_event* flex_a2_event::New(::google::protobuf::Arena* arena) const {
  flex_a2_event* n = new flex_a2_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_a2_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a2_event)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&threshold_rsrp_, 0, reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_a2_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_a2_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 threshold_rsrp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_threshold_rsrp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hysteresis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_to_trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_to_trigger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_report_cells = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_report_cells();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_a2_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_a2_event)
  return false;
#undef DO_
}

void flex_a2_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_a2_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->threshold_rsrp(), output);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hysteresis(), output);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_to_trigger(), output);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_report_cells(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_a2_event)
}

::google::protobuf::uint8* flex_a2_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a2_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->threshold_rsrp(), target);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hysteresis(), target);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_report_cells(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a2_event)
  return target;
}

size_t flex_a2_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a2_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 threshold_rsrp = 1;
    if (has_threshold_rsrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threshold_rsrp());
    }

    // optional int64 hysteresis = 2;
    if (has_hysteresis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hysteresis());
    }

    // optional int64 time_to_trigger = 3;
    if (has_time_to_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_trigger());
    }

    // optional int64 max_report_cells = 4;
    if (has_max_report_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_report_cells());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_a2_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a2_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a2_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_a2_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a2_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a2_event)
    MergeFrom(*source);
  }
}

void flex_a2_event::MergeFrom(const flex_a2_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a2_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_ = from.threshold_rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a2_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a2_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a2_event::CopyFrom(const flex_a2_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a2_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a2_event::IsInitialized() const {
  return true;
}

void flex_a2_event::Swap(flex_a2_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_a2_event::InternalSwap(flex_a2_event* other) {
  std::swap(threshold_rsrp_, other->threshold_rsrp_);
  std::swap(hysteresis_, other->hysteresis_);
  std::swap(time_to_trigger_, other->time_to_trigger_);
  std::swap(max_report_cells_, other->max_report_cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_a2_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_a2_event

// optional int64 threshold_rsrp = 1;
bool flex_a2_event::has_threshold_rsrp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_a2_event::set_has_threshold_rsrp() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_a2_event::clear_has_threshold_rsrp() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_a2_event::clear_threshold_rsrp() {
  threshold_rsrp_ = GOOGLE_LONGLONG(0);
  clear_has_threshold_rsrp();
}
::google::protobuf::int64 flex_a2_event::threshold_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.threshold_rsrp)
  return threshold_rsrp_;
}
void flex_a2_event::set_threshold_rsrp(::google::protobuf::int64 value) {
  set_has_threshold_rsrp();
  threshold_rsrp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.threshold_rsrp)
}

// optional int64 hysteresis = 2;
bool flex_a2_event::has_hysteresis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_a2_event::set_has_hysteresis() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_a2_event::clear_has_hysteresis() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_a2_event::clear_hysteresis() {
  hysteresis_ = GOOGLE_LONGLONG(0);
  clear_has_hysteresis();
}
::google::protobuf::int64 flex_a2_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.hysteresis)
  return hysteresis_;
}
void flex_a2_event::set_hysteresis(::google::protobuf::int64 value) {
  set_has_hysteresis();
  hysteresis_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.hysteresis)
}

// optional int64 time_to_trigger = 3;
bool flex_a2_event::has_time_to_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_a2_event::set_has_time_to_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_a2_event::clear_has_time_to_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_a2_event::clear_time_to_trigger() {
  time_to_trigger_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_trigger();
}
::google::protobuf::int64 flex_a2_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.time_to_trigger)
  return time_to_trigger_;
}
void flex_a2_event::set_time_to_trigger(::google::protobuf::int64 value) {
  set_has_time_to_trigger();
  time_to_trigger_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.time_to_trigger)
}

// optional int64 max_report_cells = 4;
bool flex_a2_event::has_max_report_cells() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_a2_event::set_has_max_report_cells() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_a2_event::clear_has_max_report_cells() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_a2_event::clear_max_report_cells() {
  max_report_cells_ = GOOGLE_LONGLONG(0);
  clear_has_max_report_cells();
}
::google::protobuf::int64 flex_a2_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.max_report_cells)
  return max_report_cells_;
}
void flex_a2_event::set_max_report_cells(::google::protobuf::int64 value) {
  set_has_max_report_cells();
  max_report_cells_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.max_report_cells)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_a3_event::kA3OffsetFieldNumber;
const int flex_a3_event::kReportOnLeaveFieldNumber;
const int flex_a3_event::kHysteresisFieldNumber;
const int flex_a3_event::kTimeToTriggerFieldNumber;
const int flex_a3_event::kMaxReportCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_a3_event::flex_a3_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_a3_event)
}
flex_a3_event::flex_a3_event(const flex_a3_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a3_offset_, &from.a3_offset_,
    reinterpret_cast<char*>(&report_on_leave_) -
    reinterpret_cast<char*>(&a3_offset_) + sizeof(report_on_leave_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a3_event)
}

void flex_a3_event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&a3_offset_, 0, reinterpret_cast<char*>(&report_on_leave_) -
    reinterpret_cast<char*>(&a3_offset_) + sizeof(report_on_leave_));
}

flex_a3_event::~flex_a3_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a3_event)
  SharedDtor();
}

void flex_a3_event::SharedDtor() {
}

void flex_a3_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_a3_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_a3_event& flex_a3_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_a3_event* flex_a3_event::New(::google::protobuf::Arena* arena) const {
  flex_a3_event* n = new flex_a3_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_a3_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a3_event)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&a3_offset_, 0, reinterpret_cast<char*>(&report_on_leave_) -
      reinterpret_cast<char*>(&a3_offset_) + sizeof(report_on_leave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_a3_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_a3_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 a3_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_a3_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &a3_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 report_on_leave = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_report_on_leave();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_on_leave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hysteresis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_to_trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_to_trigger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_report_cells = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_report_cells();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_a3_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_a3_event)
  return false;
#undef DO_
}

void flex_a3_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_a3_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 a3_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->a3_offset(), output);
  }

  // optional int32 report_on_leave = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->report_on_leave(), output);
  }

  // optional int64 hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hysteresis(), output);
  }

  // optional int64 time_to_trigger = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_to_trigger(), output);
  }

  // optional int64 max_report_cells = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_report_cells(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_a3_event)
}

::google::protobuf::uint8* flex_a3_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a3_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 a3_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->a3_offset(), target);
  }

  // optional int32 report_on_leave = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->report_on_leave(), target);
  }

  // optional int64 hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hysteresis(), target);
  }

  // optional int64 time_to_trigger = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_report_cells(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a3_event)
  return target;
}

size_t flex_a3_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a3_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 a3_offset = 1;
    if (has_a3_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->a3_offset());
    }

    // optional int64 hysteresis = 3;
    if (has_hysteresis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hysteresis());
    }

    // optional int64 time_to_trigger = 4;
    if (has_time_to_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_trigger());
    }

    // optional int64 max_report_cells = 5;
    if (has_max_report_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_report_cells());
    }

    // optional int32 report_on_leave = 2;
    if (has_report_on_leave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_on_leave());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_a3_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a3_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a3_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_a3_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a3_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a3_event)
    MergeFrom(*source);
  }
}

void flex_a3_event::MergeFrom(const flex_a3_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a3_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      a3_offset_ = from.a3_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_on_leave_ = from.report_on_leave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a3_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a3_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a3_event::CopyFrom(const flex_a3_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a3_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a3_event::IsInitialized() const {
  return true;
}

void flex_a3_event::Swap(flex_a3_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_a3_event::InternalSwap(flex_a3_event* other) {
  std::swap(a3_offset_, other->a3_offset_);
  std::swap(hysteresis_, other->hysteresis_);
  std::swap(time_to_trigger_, other->time_to_trigger_);
  std::swap(max_report_cells_, other->max_report_cells_);
  std::swap(report_on_leave_, other->report_on_leave_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_a3_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_a3_event

// optional int64 a3_offset = 1;
bool flex_a3_event::has_a3_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_a3_event::set_has_a3_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_a3_event::clear_has_a3_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_a3_event::clear_a3_offset() {
  a3_offset_ = GOOGLE_LONGLONG(0);
  clear_has_a3_offset();
}
::google::protobuf::int64 flex_a3_event::a3_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.a3_offset)
  return a3_offset_;
}
void flex_a3_event::set_a3_offset(::google::protobuf::int64 value) {
  set_has_a3_offset();
  a3_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.a3_offset)
}

// optional int32 report_on_leave = 2;
bool flex_a3_event::has_report_on_leave() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_a3_event::set_has_report_on_leave() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_a3_event::clear_has_report_on_leave() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_a3_event::clear_report_on_leave() {
  report_on_leave_ = 0;
  clear_has_report_on_leave();
}
::google::protobuf::int32 flex_a3_event::report_on_leave() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.report_on_leave)
  return report_on_leave_;
}
void flex_a3_event::set_report_on_leave(::google::protobuf::int32 value) {
  set_has_report_on_leave();
  report_on_leave_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.report_on_leave)
}

// optional int64 hysteresis = 3;
bool flex_a3_event::has_hysteresis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_a3_event::set_has_hysteresis() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_a3_event::clear_has_hysteresis() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_a3_event::clear_hysteresis() {
  hysteresis_ = GOOGLE_LONGLONG(0);
  clear_has_hysteresis();
}
::google::protobuf::int64 flex_a3_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.hysteresis)
  return hysteresis_;
}
void flex_a3_event::set_hysteresis(::google::protobuf::int64 value) {
  set_has_hysteresis();
  hysteresis_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.hysteresis)
}

// optional int64 time_to_trigger = 4;
bool flex_a3_event::has_time_to_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_a3_event::set_has_time_to_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_a3_event::clear_has_time_to_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_a3_event::clear_time_to_trigger() {
  time_to_trigger_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_trigger();
}
::google::protobuf::int64 flex_a3_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.time_to_trigger)
  return time_to_trigger_;
}
void flex_a3_event::set_time_to_trigger(::google::protobuf::int64 value) {
  set_has_time_to_trigger();
  time_to_trigger_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.time_to_trigger)
}

// optional int64 max_report_cells = 5;
bool flex_a3_event::has_max_report_cells() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_a3_event::set_has_max_report_cells() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_a3_event::clear_has_max_report_cells() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_a3_event::clear_max_report_cells() {
  max_report_cells_ = GOOGLE_LONGLONG(0);
  clear_has_max_report_cells();
}
::google::protobuf::int64 flex_a3_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.max_report_cells)
  return max_report_cells_;
}
void flex_a3_event::set_max_report_cells(::google::protobuf::int64 value) {
  set_has_max_report_cells();
  max_report_cells_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.max_report_cells)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_a4_event::kThresholdRsrpFieldNumber;
const int flex_a4_event::kHysteresisFieldNumber;
const int flex_a4_event::kTimeToTriggerFieldNumber;
const int flex_a4_event::kMaxReportCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_a4_event::flex_a4_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_a4_event)
}
flex_a4_event::flex_a4_event(const flex_a4_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_, &from.threshold_rsrp_,
    reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a4_event)
}

void flex_a4_event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&threshold_rsrp_, 0, reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
}

flex_a4_event::~flex_a4_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a4_event)
  SharedDtor();
}

void flex_a4_event::SharedDtor() {
}

void flex_a4_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_a4_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_a4_event& flex_a4_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_a4_event* flex_a4_event::New(::google::protobuf::Arena* arena) const {
  flex_a4_event* n = new flex_a4_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_a4_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a4_event)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&threshold_rsrp_, 0, reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_a4_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_a4_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 threshold_rsrp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_threshold_rsrp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hysteresis = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_to_trigger = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_to_trigger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_report_cells = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_report_cells();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_a4_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_a4_event)
  return false;
#undef DO_
}

void flex_a4_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_a4_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->threshold_rsrp(), output);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hysteresis(), output);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_to_trigger(), output);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->max_report_cells(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_a4_event)
}

::google::protobuf::uint8* flex_a4_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a4_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->threshold_rsrp(), target);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hysteresis(), target);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->max_report_cells(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a4_event)
  return target;
}

size_t flex_a4_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a4_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 threshold_rsrp = 1;
    if (has_threshold_rsrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threshold_rsrp());
    }

    // optional int64 hysteresis = 2;
    if (has_hysteresis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hysteresis());
    }

    // optional int64 time_to_trigger = 3;
    if (has_time_to_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_trigger());
    }

    // optional int64 max_report_cells = 4;
    if (has_max_report_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_report_cells());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_a4_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a4_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a4_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_a4_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a4_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a4_event)
    MergeFrom(*source);
  }
}

void flex_a4_event::MergeFrom(const flex_a4_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a4_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_ = from.threshold_rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a4_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a4_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a4_event::CopyFrom(const flex_a4_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a4_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a4_event::IsInitialized() const {
  return true;
}

void flex_a4_event::Swap(flex_a4_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_a4_event::InternalSwap(flex_a4_event* other) {
  std::swap(threshold_rsrp_, other->threshold_rsrp_);
  std::swap(hysteresis_, other->hysteresis_);
  std::swap(time_to_trigger_, other->time_to_trigger_);
  std::swap(max_report_cells_, other->max_report_cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_a4_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_a4_event

// optional int64 threshold_rsrp = 1;
bool flex_a4_event::has_threshold_rsrp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_a4_event::set_has_threshold_rsrp() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_a4_event::clear_has_threshold_rsrp() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_a4_event::clear_threshold_rsrp() {
  threshold_rsrp_ = GOOGLE_LONGLONG(0);
  clear_has_threshold_rsrp();
}
::google::protobuf::int64 flex_a4_event::threshold_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.threshold_rsrp)
  return threshold_rsrp_;
}
void flex_a4_event::set_threshold_rsrp(::google::protobuf::int64 value) {
  set_has_threshold_rsrp();
  threshold_rsrp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.threshold_rsrp)
}

// optional int64 hysteresis = 2;
bool flex_a4_event::has_hysteresis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_a4_event::set_has_hysteresis() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_a4_event::clear_has_hysteresis() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_a4_event::clear_hysteresis() {
  hysteresis_ = GOOGLE_LONGLONG(0);
  clear_has_hysteresis();
}
::google::protobuf::int64 flex_a4_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.hysteresis)
  return hysteresis_;
}
void flex_a4_event::set_hysteresis(::google::protobuf::int64 value) {
  set_has_hysteresis();
  hysteresis_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.hysteresis)
}

// optional int64 time_to_trigger = 3;
bool flex_a4_event::has_time_to_trigger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_a4_event::set_has_time_to_trigger() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_a4_event::clear_has_time_to_trigger() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_a4_event::clear_time_to_trigger() {
  time_to_trigger_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_trigger();
}
::google::protobuf::int64 flex_a4_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.time_to_trigger)
  return time_to_trigger_;
}
void flex_a4_event::set_time_to_trigger(::google::protobuf::int64 value) {
  set_has_time_to_trigger();
  time_to_trigger_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.time_to_trigger)
}

// optional int64 max_report_cells = 4;
bool flex_a4_event::has_max_report_cells() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_a4_event::set_has_max_report_cells() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_a4_event::clear_has_max_report_cells() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_a4_event::clear_max_report_cells() {
  max_report_cells_ = GOOGLE_LONGLONG(0);
  clear_has_max_report_cells();
}
::google::protobuf::int64 flex_a4_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.max_report_cells)
  return max_report_cells_;
}
void flex_a4_event::set_max_report_cells(::google::protobuf::int64 value) {
  set_has_max_report_cells();
  max_report_cells_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.max_report_cells)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_a5_event::kThresholdRsrp1FieldNumber;
const int flex_a5_event::kThresholdRsrp2FieldNumber;
const int flex_a5_event::kHysteresisFieldNumber;
const int flex_a5_event::kTimeToTriggerFieldNumber;
const int flex_a5_event::kMaxReportCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_a5_event::flex_a5_event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_a5_event)
}
flex_a5_event::flex_a5_event(const flex_a5_event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_1_, &from.threshold_rsrp_1_,
    reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_1_) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a5_event)
}

void flex_a5_event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&threshold_rsrp_1_, 0, reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_1_) + sizeof(max_report_cells_));
}

flex_a5_event::~flex_a5_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a5_event)
  SharedDtor();
}

void flex_a5_event::SharedDtor() {
}

void flex_a5_event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_a5_event::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_a5_event& flex_a5_event::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_a5_event* flex_a5_event::New(::google::protobuf::Arena* arena) const {
  flex_a5_event* n = new flex_a5_event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_a5_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a5_event)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&threshold_rsrp_1_, 0, reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_1_) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_a5_event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_a5_event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 threshold_rsrp_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_threshold_rsrp_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_rsrp_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 threshold_rsrp_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_threshold_rsrp_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_rsrp_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 hysteresis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_to_trigger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_to_trigger();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_to_trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_report_cells = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_report_cells();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_report_cells_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_a5_event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_a5_event)
  return false;
#undef DO_
}

void flex_a5_event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_a5_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->threshold_rsrp_1(), output);
  }

  // optional int64 threshold_rsrp_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->threshold_rsrp_2(), output);
  }

  // optional int64 hysteresis = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hysteresis(), output);
  }

  // optional int64 time_to_trigger = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time_to_trigger(), output);
  }

  // optional int64 max_report_cells = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->max_report_cells(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_a5_event)
}

::google::protobuf::uint8* flex_a5_event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a5_event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->threshold_rsrp_1(), target);
  }

  // optional int64 threshold_rsrp_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->threshold_rsrp_2(), target);
  }

  // optional int64 hysteresis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hysteresis(), target);
  }

  // optional int64 time_to_trigger = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->max_report_cells(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a5_event)
  return target;
}

size_t flex_a5_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a5_event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 threshold_rsrp_1 = 1;
    if (has_threshold_rsrp_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threshold_rsrp_1());
    }

    // optional int64 threshold_rsrp_2 = 2;
    if (has_threshold_rsrp_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->threshold_rsrp_2());
    }

    // optional int64 hysteresis = 3;
    if (has_hysteresis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hysteresis());
    }

    // optional int64 time_to_trigger = 4;
    if (has_time_to_trigger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_to_trigger());
    }

    // optional int64 max_report_cells = 5;
    if (has_max_report_cells()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_report_cells());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_a5_event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a5_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a5_event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_a5_event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a5_event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a5_event)
    MergeFrom(*source);
  }
}

void flex_a5_event::MergeFrom(const flex_a5_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a5_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_1_ = from.threshold_rsrp_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_rsrp_2_ = from.threshold_rsrp_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a5_event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a5_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a5_event::CopyFrom(const flex_a5_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a5_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a5_event::IsInitialized() const {
  return true;
}

void flex_a5_event::Swap(flex_a5_event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_a5_event::InternalSwap(flex_a5_event* other) {
  std::swap(threshold_rsrp_1_, other->threshold_rsrp_1_);
  std::swap(threshold_rsrp_2_, other->threshold_rsrp_2_);
  std::swap(hysteresis_, other->hysteresis_);
  std::swap(time_to_trigger_, other->time_to_trigger_);
  std::swap(max_report_cells_, other->max_report_cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_a5_event::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_a5_event

// optional int64 threshold_rsrp_1 = 1;
bool flex_a5_event::has_threshold_rsrp_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_a5_event::set_has_threshold_rsrp_1() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_a5_event::clear_has_threshold_rsrp_1() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_a5_event::clear_threshold_rsrp_1() {
  threshold_rsrp_1_ = GOOGLE_LONGLONG(0);
  clear_has_threshold_rsrp_1();
}
::google::protobuf::int64 flex_a5_event::threshold_rsrp_1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.threshold_rsrp_1)
  return threshold_rsrp_1_;
}
void flex_a5_event::set_threshold_rsrp_1(::google::protobuf::int64 value) {
  set_has_threshold_rsrp_1();
  threshold_rsrp_1_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.threshold_rsrp_1)
}

// optional int64 threshold_rsrp_2 = 2;
bool flex_a5_event::has_threshold_rsrp_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_a5_event::set_has_threshold_rsrp_2() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_a5_event::clear_has_threshold_rsrp_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_a5_event::clear_threshold_rsrp_2() {
  threshold_rsrp_2_ = GOOGLE_LONGLONG(0);
  clear_has_threshold_rsrp_2();
}
::google::protobuf::int64 flex_a5_event::threshold_rsrp_2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.threshold_rsrp_2)
  return threshold_rsrp_2_;
}
void flex_a5_event::set_threshold_rsrp_2(::google::protobuf::int64 value) {
  set_has_threshold_rsrp_2();
  threshold_rsrp_2_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.threshold_rsrp_2)
}

// optional int64 hysteresis = 3;
bool flex_a5_event::has_hysteresis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_a5_event::set_has_hysteresis() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_a5_event::clear_has_hysteresis() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_a5_event::clear_hysteresis() {
  hysteresis_ = GOOGLE_LONGLONG(0);
  clear_has_hysteresis();
}
::google::protobuf::int64 flex_a5_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.hysteresis)
  return hysteresis_;
}
void flex_a5_event::set_hysteresis(::google::protobuf::int64 value) {
  set_has_hysteresis();
  hysteresis_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.hysteresis)
}

// optional int64 time_to_trigger = 4;
bool flex_a5_event::has_time_to_trigger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_a5_event::set_has_time_to_trigger() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_a5_event::clear_has_time_to_trigger() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_a5_event::clear_time_to_trigger() {
  time_to_trigger_ = GOOGLE_LONGLONG(0);
  clear_has_time_to_trigger();
}
::google::protobuf::int64 flex_a5_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.time_to_trigger)
  return time_to_trigger_;
}
void flex_a5_event::set_time_to_trigger(::google::protobuf::int64 value) {
  set_has_time_to_trigger();
  time_to_trigger_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.time_to_trigger)
}

// optional int64 max_report_cells = 5;
bool flex_a5_event::has_max_report_cells() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_a5_event::set_has_max_report_cells() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_a5_event::clear_has_max_report_cells() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_a5_event::clear_max_report_cells() {
  max_report_cells_ = GOOGLE_LONGLONG(0);
  clear_has_max_report_cells();
}
::google::protobuf::int64 flex_a5_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.max_report_cells)
  return max_report_cells_;
}
void flex_a5_event::set_max_report_cells(::google::protobuf::int64 value) {
  set_has_max_report_cells();
  max_report_cells_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.max_report_cells)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_gummei::kPlmnFieldNumber;
const int flex_gummei::kMmeGroupIdFieldNumber;
const int flex_gummei::kMmeCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_gummei::flex_gummei()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_gummei)
}
flex_gummei::flex_gummei(const flex_gummei& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plmn()) {
    plmn_ = new ::protocol::flex_plmn(*from.plmn_);
  } else {
    plmn_ = NULL;
  }
  ::memcpy(&mme_group_id_, &from.mme_group_id_,
    reinterpret_cast<char*>(&mme_code_) -
    reinterpret_cast<char*>(&mme_group_id_) + sizeof(mme_code_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_gummei)
}

void flex_gummei::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&plmn_, 0, reinterpret_cast<char*>(&mme_code_) -
    reinterpret_cast<char*>(&plmn_) + sizeof(mme_code_));
}

flex_gummei::~flex_gummei() {
  // @@protoc_insertion_point(destructor:protocol.flex_gummei)
  SharedDtor();
}

void flex_gummei::SharedDtor() {
  if (this != internal_default_instance()) {
    delete plmn_;
  }
}

void flex_gummei::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_gummei::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_gummei& flex_gummei::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_gummei* flex_gummei::New(::google::protobuf::Arena* arena) const {
  flex_gummei* n = new flex_gummei;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_gummei::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_gummei)
  if (has_plmn()) {
    GOOGLE_DCHECK(plmn_ != NULL);
    plmn_->::protocol::flex_plmn::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&mme_group_id_, 0, reinterpret_cast<char*>(&mme_code_) -
      reinterpret_cast<char*>(&mme_group_id_) + sizeof(mme_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_gummei::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_gummei)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_plmn plmn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plmn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mme_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_mme_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mme_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mme_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_mme_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mme_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_gummei)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_gummei)
  return false;
#undef DO_
}

void flex_gummei::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_gummei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_plmn plmn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->plmn_, output);
  }

  // optional uint32 mme_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mme_group_id(), output);
  }

  // optional uint32 mme_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mme_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_gummei)
}

::google::protobuf::uint8* flex_gummei::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_gummei)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_plmn plmn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->plmn_, deterministic, target);
  }

  // optional uint32 mme_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mme_group_id(), target);
  }

  // optional uint32 mme_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mme_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_gummei)
  return target;
}

size_t flex_gummei::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_gummei)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .protocol.flex_plmn plmn = 1;
    if (has_plmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->plmn_);
    }

    // optional uint32 mme_group_id = 2;
    if (has_mme_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mme_group_id());
    }

    // optional uint32 mme_code = 3;
    if (has_mme_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mme_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_gummei::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_gummei)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_gummei* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_gummei>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_gummei)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_gummei)
    MergeFrom(*source);
  }
}

void flex_gummei::MergeFrom(const flex_gummei& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_gummei)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_plmn()->::protocol::flex_plmn::MergeFrom(from.plmn());
    }
    if (cached_has_bits & 0x00000002u) {
      mme_group_id_ = from.mme_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      mme_code_ = from.mme_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_gummei::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_gummei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_gummei::CopyFrom(const flex_gummei& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_gummei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_gummei::IsInitialized() const {
  return true;
}

void flex_gummei::Swap(flex_gummei* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_gummei::InternalSwap(flex_gummei* other) {
  std::swap(plmn_, other->plmn_);
  std::swap(mme_group_id_, other->mme_group_id_);
  std::swap(mme_code_, other->mme_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_gummei::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_gummei

// optional .protocol.flex_plmn plmn = 1;
bool flex_gummei::has_plmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_gummei::set_has_plmn() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_gummei::clear_has_plmn() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_gummei::clear_plmn() {
  if (plmn_ != NULL) plmn_->::protocol::flex_plmn::Clear();
  clear_has_plmn();
}
const ::protocol::flex_plmn& flex_gummei::plmn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gummei.plmn)
  return plmn_ != NULL ? *plmn_
                         : *::protocol::flex_plmn::internal_default_instance();
}
::protocol::flex_plmn* flex_gummei::mutable_plmn() {
  set_has_plmn();
  if (plmn_ == NULL) {
    plmn_ = new ::protocol::flex_plmn;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_gummei.plmn)
  return plmn_;
}
::protocol::flex_plmn* flex_gummei::release_plmn() {
  // @@protoc_insertion_point(field_release:protocol.flex_gummei.plmn)
  clear_has_plmn();
  ::protocol::flex_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
void flex_gummei::set_allocated_plmn(::protocol::flex_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    set_has_plmn();
  } else {
    clear_has_plmn();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_gummei.plmn)
}

// optional uint32 mme_group_id = 2;
bool flex_gummei::has_mme_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_gummei::set_has_mme_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_gummei::clear_has_mme_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_gummei::clear_mme_group_id() {
  mme_group_id_ = 0u;
  clear_has_mme_group_id();
}
::google::protobuf::uint32 flex_gummei::mme_group_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gummei.mme_group_id)
  return mme_group_id_;
}
void flex_gummei::set_mme_group_id(::google::protobuf::uint32 value) {
  set_has_mme_group_id();
  mme_group_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_gummei.mme_group_id)
}

// optional uint32 mme_code = 3;
bool flex_gummei::has_mme_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_gummei::set_has_mme_code() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_gummei::clear_has_mme_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_gummei::clear_mme_code() {
  mme_code_ = 0u;
  clear_has_mme_code();
}
::google::protobuf::uint32 flex_gummei::mme_code() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gummei.mme_code)
  return mme_code_;
}
void flex_gummei::set_mme_code(::google::protobuf::uint32 value) {
  set_has_mme_code();
  mme_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_gummei.mme_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_s1ap_mme::kS1IpFieldNumber;
const int flex_s1ap_mme::kNameFieldNumber;
const int flex_s1ap_mme::kStateFieldNumber;
const int flex_s1ap_mme::kServedGummeisFieldNumber;
const int flex_s1ap_mme::kRequestedPlmnsFieldNumber;
const int flex_s1ap_mme::kRelCapacityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_s1ap_mme::flex_s1ap_mme()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_s1ap_mme)
}
flex_s1ap_mme::flex_s1ap_mme(const flex_s1ap_mme& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      served_gummeis_(from.served_gummeis_),
      requested_plmns_(from.requested_plmns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s1_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s1_ip()) {
    s1_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s1_ip_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&state_, &from.state_,
    reinterpret_cast<char*>(&rel_capacity_) -
    reinterpret_cast<char*>(&state_) + sizeof(rel_capacity_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_s1ap_mme)
}

void flex_s1ap_mme::SharedCtor() {
  _cached_size_ = 0;
  s1_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, reinterpret_cast<char*>(&rel_capacity_) -
    reinterpret_cast<char*>(&state_) + sizeof(rel_capacity_));
}

flex_s1ap_mme::~flex_s1ap_mme() {
  // @@protoc_insertion_point(destructor:protocol.flex_s1ap_mme)
  SharedDtor();
}

void flex_s1ap_mme::SharedDtor() {
  s1_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void flex_s1ap_mme::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_s1ap_mme::descriptor() {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_s1ap_mme& flex_s1ap_mme::default_instance() {
  protobuf_config_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_s1ap_mme* flex_s1ap_mme::New(::google::protobuf::Arena* arena) const {
  flex_s1ap_mme* n = new flex_s1ap_mme;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_s1ap_mme::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_s1ap_mme)
  served_gummeis_.Clear();
  requested_plmns_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_s1_ip()) {
      GOOGLE_DCHECK(!s1_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s1_ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&state_, 0, reinterpret_cast<char*>(&rel_capacity_) -
      reinterpret_cast<char*>(&state_) + sizeof(rel_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_s1ap_mme::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_s1ap_mme)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string s1_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s1_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s1_ip().data(), this->s1_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_s1ap_mme.s1_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_s1ap_mme.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_mme_state state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_mme_state_IsValid(value)) {
            set_state(static_cast< ::protocol::flex_mme_state >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_gummei served_gummeis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_served_gummeis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_plmn requested_plmns = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requested_plmns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rel_capacity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_rel_capacity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rel_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_s1ap_mme)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_s1ap_mme)
  return false;
#undef DO_
}

void flex_s1ap_mme::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_s1ap_mme)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string s1_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s1_ip().data(), this->s1_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_mme.s1_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->s1_ip(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_mme.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .protocol.flex_mme_state state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // repeated .protocol.flex_gummei served_gummeis = 4;
  for (unsigned int i = 0, n = this->served_gummeis_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->served_gummeis(i), output);
  }

  // repeated .protocol.flex_plmn requested_plmns = 5;
  for (unsigned int i = 0, n = this->requested_plmns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->requested_plmns(i), output);
  }

  // optional uint32 rel_capacity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rel_capacity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_s1ap_mme)
}

::google::protobuf::uint8* flex_s1ap_mme::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_s1ap_mme)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string s1_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s1_ip().data(), this->s1_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_mme.s1_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->s1_ip(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_mme.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .protocol.flex_mme_state state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // repeated .protocol.flex_gummei served_gummeis = 4;
  for (unsigned int i = 0, n = this->served_gummeis_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->served_gummeis(i), deterministic, target);
  }

  // repeated .protocol.flex_plmn requested_plmns = 5;
  for (unsigned int i = 0, n = this->requested_plmns_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->requested_plmns(i), deterministic, target);
  }

  // optional uint32 rel_capacity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rel_capacity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_s1ap_mme)
  return target;
}

size_t flex_s1ap_mme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_s1ap_mme)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_gummei served_gummeis = 4;
  {
    unsigned int count = this->served_gummeis_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->served_gummeis(i));
    }
  }

  // repeated .protocol.flex_plmn requested_plmns = 5;
  {
    unsigned int count = this->requested_plmns_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requested_plmns(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string s1_ip = 1;
    if (has_s1_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s1_ip());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .protocol.flex_mme_state state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 rel_capacity = 6;
    if (has_rel_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rel_capacity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_s1ap_mme::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_s1ap_mme)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_s1ap_mme* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_s1ap_mme>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_s1ap_mme)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_s1ap_mme)
    MergeFrom(*source);
  }
}

void flex_s1ap_mme::MergeFrom(const flex_s1ap_mme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_s1ap_mme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  served_gummeis_.MergeFrom(from.served_gummeis_);
  requested_plmns_.MergeFrom(from.requested_plmns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_s1_ip();
      s1_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s1_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      rel_capacity_ = from.rel_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_s1ap_mme::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_s1ap_mme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_s1ap_mme::CopyFrom(const flex_s1ap_mme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_s1ap_mme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_s1ap_mme::IsInitialized() const {
  return true;
}

void flex_s1ap_mme::Swap(flex_s1ap_mme* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_s1ap_mme::InternalSwap(flex_s1ap_mme* other) {
  served_gummeis_.InternalSwap(&other->served_gummeis_);
  requested_plmns_.InternalSwap(&other->requested_plmns_);
  s1_ip_.Swap(&other->s1_ip_);
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  std::swap(rel_capacity_, other->rel_capacity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_s1ap_mme::GetMetadata() const {
  protobuf_config_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_s1ap_mme

// optional string s1_ip = 1;
bool flex_s1ap_mme::has_s1_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_s1ap_mme::set_has_s1_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_s1ap_mme::clear_has_s1_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_s1ap_mme::clear_s1_ip() {
  s1_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s1_ip();
}
const ::std::string& flex_s1ap_mme::s1_ip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.s1_ip)
  return s1_ip_.GetNoArena();
}
void flex_s1ap_mme::set_s1_ip(const ::std::string& value) {
  set_has_s1_ip();
  s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.s1_ip)
}
#if LANG_CXX11
void flex_s1ap_mme::set_s1_ip(::std::string&& value) {
  set_has_s1_ip();
  s1_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_mme.s1_ip)
}
#endif
void flex_s1ap_mme::set_s1_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s1_ip();
  s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_mme.s1_ip)
}
void flex_s1ap_mme::set_s1_ip(const char* value, size_t size) {
  set_has_s1_ip();
  s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_mme.s1_ip)
}
::std::string* flex_s1ap_mme::mutable_s1_ip() {
  set_has_s1_ip();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.s1_ip)
  return s1_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_s1ap_mme::release_s1_ip() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_mme.s1_ip)
  clear_has_s1_ip();
  return s1_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_s1ap_mme::set_allocated_s1_ip(::std::string* s1_ip) {
  if (s1_ip != NULL) {
    set_has_s1_ip();
  } else {
    clear_has_s1_ip();
  }
  s1_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s1_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_mme.s1_ip)
}

// optional string name = 2;
bool flex_s1ap_mme::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_s1ap_mme::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_s1ap_mme::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_s1ap_mme::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& flex_s1ap_mme::name() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.name)
  return name_.GetNoArena();
}
void flex_s1ap_mme::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.name)
}
#if LANG_CXX11
void flex_s1ap_mme::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_mme.name)
}
#endif
void flex_s1ap_mme::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_mme.name)
}
void flex_s1ap_mme::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_mme.name)
}
::std::string* flex_s1ap_mme::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_s1ap_mme::release_name() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_mme.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_s1ap_mme::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_mme.name)
}

// optional .protocol.flex_mme_state state = 3;
bool flex_s1ap_mme::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_s1ap_mme::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_s1ap_mme::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_s1ap_mme::clear_state() {
  state_ = 0;
  clear_has_state();
}
::protocol::flex_mme_state flex_s1ap_mme::state() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.state)
  return static_cast< ::protocol::flex_mme_state >(state_);
}
void flex_s1ap_mme::set_state(::protocol::flex_mme_state value) {
  assert(::protocol::flex_mme_state_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.state)
}

// repeated .protocol.flex_gummei served_gummeis = 4;
int flex_s1ap_mme::served_gummeis_size() const {
  return served_gummeis_.size();
}
void flex_s1ap_mme::clear_served_gummeis() {
  served_gummeis_.Clear();
}
const ::protocol::flex_gummei& flex_s1ap_mme::served_gummeis(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.served_gummeis)
  return served_gummeis_.Get(index);
}
::protocol::flex_gummei* flex_s1ap_mme::mutable_served_gummeis(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.served_gummeis)
  return served_gummeis_.Mutable(index);
}
::protocol::flex_gummei* flex_s1ap_mme::add_served_gummeis() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_mme.served_gummeis)
  return served_gummeis_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_gummei >*
flex_s1ap_mme::mutable_served_gummeis() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_mme.served_gummeis)
  return &served_gummeis_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_gummei >&
flex_s1ap_mme::served_gummeis() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_mme.served_gummeis)
  return served_gummeis_;
}

// repeated .protocol.flex_plmn requested_plmns = 5;
int flex_s1ap_mme::requested_plmns_size() const {
  return requested_plmns_.size();
}
void flex_s1ap_mme::clear_requested_plmns() {
  requested_plmns_.Clear();
}
const ::protocol::flex_plmn& flex_s1ap_mme::requested_plmns(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.requested_plmns)
  return requested_plmns_.Get(index);
}
::protocol::flex_plmn* flex_s1ap_mme::mutable_requested_plmns(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.requested_plmns)
  return requested_plmns_.Mutable(index);
}
::protocol::flex_plmn* flex_s1ap_mme::add_requested_plmns() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_mme.requested_plmns)
  return requested_plmns_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >*
flex_s1ap_mme::mutable_requested_plmns() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_mme.requested_plmns)
  return &requested_plmns_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >&
flex_s1ap_mme::requested_plmns() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_mme.requested_plmns)
  return requested_plmns_;
}

// optional uint32 rel_capacity = 6;
bool flex_s1ap_mme::has_rel_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_s1ap_mme::set_has_rel_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_s1ap_mme::clear_has_rel_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_s1ap_mme::clear_rel_capacity() {
  rel_capacity_ = 0u;
  clear_has_rel_capacity();
}
::google::protobuf::uint32 flex_s1ap_mme::rel_capacity() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.rel_capacity)
  return rel_capacity_;
}
void flex_s1ap_mme::set_rel_capacity(::google::protobuf::uint32 value) {
  set_has_rel_capacity();
  rel_capacity_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.rel_capacity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
