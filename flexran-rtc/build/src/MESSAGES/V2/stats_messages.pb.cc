// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stats_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_complete_stats_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_complete_stats_request> {
} _flex_complete_stats_request_default_instance_;
class flex_cell_stats_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_cell_stats_request> {
} _flex_cell_stats_request_default_instance_;
class flex_ue_stats_requestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_stats_request> {
} _flex_ue_stats_request_default_instance_;
class flex_cell_stats_reportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_cell_stats_report> {
} _flex_cell_stats_report_default_instance_;
class flex_ue_stats_reportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_stats_report> {
} _flex_ue_stats_report_default_instance_;
class flex_complete_stats_request_repeatedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_complete_stats_request_repeated> {
} _flex_complete_stats_request_repeated_default_instance_;

namespace protobuf_stats_5fmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, report_frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, cell_report_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, ue_report_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, cell_reports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request, ue_reports_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_request, cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_request, flags_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_request, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_request, flags_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_report, carrier_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_report, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_stats_report, noise_inter_report_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, bsr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, phr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, rlc_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, pending_mac_ces_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, dl_cqi_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, pbr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, ul_cqi_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, rrc_measurements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, pdcp_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, mac_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, gtp_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_stats_report, s1ap_stats_),
  7,
  8,
  ~0u,
  9,
  ~0u,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request_repeated, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request_repeated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_complete_stats_request_repeated, reports_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(flex_complete_stats_request)},
  { 17, 24, sizeof(flex_cell_stats_request)},
  { 26, 33, sizeof(flex_ue_stats_request)},
  { 35, 43, sizeof(flex_cell_stats_report)},
  { 46, 65, sizeof(flex_ue_stats_report)},
  { 79, 85, sizeof(flex_complete_stats_request_repeated)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_complete_stats_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_cell_stats_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_stats_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_cell_stats_report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_stats_report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_complete_stats_request_repeated_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stats_messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_complete_stats_request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_cell_stats_request_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_ue_stats_request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_cell_stats_report_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _flex_ue_stats_report_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _flex_complete_stats_request_repeated_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protocol::protobuf_stats_5fcommon_2eproto::InitDefaults();
  _flex_complete_stats_request_default_instance_.DefaultConstruct();
  _flex_cell_stats_request_default_instance_.DefaultConstruct();
  _flex_ue_stats_request_default_instance_.DefaultConstruct();
  _flex_cell_stats_report_default_instance_.DefaultConstruct();
  _flex_ue_stats_report_default_instance_.DefaultConstruct();
  _flex_complete_stats_request_repeated_default_instance_.DefaultConstruct();
  _flex_cell_stats_report_default_instance_.get_mutable()->noise_inter_report_ = const_cast< ::protocol::flex_noise_interference_report*>(
      ::protocol::flex_noise_interference_report::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->dl_cqi_report_ = const_cast< ::protocol::flex_dl_cqi_report*>(
      ::protocol::flex_dl_cqi_report::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->pbr_ = const_cast< ::protocol::flex_paging_buffer_report*>(
      ::protocol::flex_paging_buffer_report::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->ul_cqi_report_ = const_cast< ::protocol::flex_ul_cqi_report*>(
      ::protocol::flex_ul_cqi_report::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->rrc_measurements_ = const_cast< ::protocol::flex_rrc_measurements*>(
      ::protocol::flex_rrc_measurements::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->pdcp_stats_ = const_cast< ::protocol::flex_pdcp_stats*>(
      ::protocol::flex_pdcp_stats::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->mac_stats_ = const_cast< ::protocol::flex_mac_stats*>(
      ::protocol::flex_mac_stats::internal_default_instance());
  _flex_ue_stats_report_default_instance_.get_mutable()->s1ap_stats_ = const_cast< ::protocol::flex_s1ap_ue*>(
      ::protocol::flex_s1ap_ue::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024stats_messages.proto\022\010protocol\032\022stats_"
      "common.proto\"\201\002\n\033flex_complete_stats_req"
      "uest\022:\n\020report_frequency\030\001 \001(\0162 .protoco"
      "l.flex_stats_report_freq\022\n\n\002sf\030\002 \001(\r\022\031\n\021"
      "cell_report_flags\030\003 \001(\r\022\027\n\017ue_report_fla"
      "gs\030\004 \001(\r\0224\n\014cell_reports\030\005 \003(\0162\036.protoco"
      "l.flex_cell_stats_type\0220\n\nue_reports\030\006 \003"
      "(\0162\034.protocol.flex_ue_stats_type\"6\n\027flex"
      "_cell_stats_request\022\014\n\004cell\030\001 \003(\r\022\r\n\005fla"
      "gs\030\002 \001(\r\"4\n\025flex_ue_stats_request\022\014\n\004rnt"
      "i\030\001 \003(\r\022\r\n\005flags\030\002 \001(\r\"\204\001\n\026flex_cell_sta"
      "ts_report\022\025\n\rcarrier_index\030\001 \001(\r\022\r\n\005flag"
      "s\030\002 \001(\r\022D\n\022noise_inter_report\030\003 \001(\0132(.pr"
      "otocol.flex_noise_interference_report\"\236\004"
      "\n\024flex_ue_stats_report\022\014\n\004rnti\030\001 \001(\r\022\r\n\005"
      "flags\030\002 \001(\r\022\013\n\003bsr\030\003 \003(\r\022\013\n\003phr\030\004 \001(\r\022*\n"
      "\nrlc_report\030\005 \003(\0132\026.protocol.flex_rlc_bs"
      "r\022\027\n\017pending_mac_ces\030\006 \001(\r\0223\n\rdl_cqi_rep"
      "ort\030\007 \001(\0132\034.protocol.flex_dl_cqi_report\022"
      "0\n\003pbr\030\010 \001(\0132#.protocol.flex_paging_buff"
      "er_report\0223\n\rul_cqi_report\030\t \001(\0132\034.proto"
      "col.flex_ul_cqi_report\0229\n\020rrc_measuremen"
      "ts\030\n \001(\0132\037.protocol.flex_rrc_measurement"
      "s\022-\n\npdcp_stats\030\013 \001(\0132\031.protocol.flex_pd"
      "cp_stats\022+\n\tmac_stats\030\014 \001(\0132\030.protocol.f"
      "lex_mac_stats\022+\n\tgtp_stats\030\r \003(\0132\030.proto"
      "col.flex_gtp_stats\022*\n\ns1ap_stats\030\016 \001(\0132\026"
      ".protocol.flex_s1ap_ue\"^\n$flex_complete_"
      "stats_request_repeated\0226\n\007reports\030\001 \003(\0132"
      "%.protocol.flex_complete_stats_request*R"
      "\n\017flex_stats_type\022\027\n\023FLST_COMPLETE_STATS"
      "\020\000\022\023\n\017FLST_CELL_STATS\020\001\022\021\n\rFLST_UE_STATS"
      "\020\002*c\n\026flex_stats_report_freq\022\016\n\nFLSRF_ON"
      "CE\020\000\022\024\n\020FLSRF_PERIODICAL\020\001\022\024\n\020FLSRF_CONT"
      "INUOUS\020\002\022\r\n\tFLSRF_OFF\020\003*4\n\024flex_cell_sta"
      "ts_type\022\034\n\030FLCST_NOISE_INTERFERENCE\020\001*\204\002"
      "\n\022flex_ue_stats_type\022\r\n\tFLUST_BSR\020\001\022\r\n\tF"
      "LUST_PHR\020\002\022\020\n\014FLUST_RLC_BS\020\004\022\023\n\017FLUST_MA"
      "C_CE_BS\020\010\022\020\n\014FLUST_DL_CQI\020\020\022\r\n\tFLUST_PBS"
      "\020 \022\020\n\014FLUST_UL_CQI\020@\022\024\n\017FLUST_MAC_STATS\020"
      "\200\001\022\025\n\020FLUST_PDCP_STATS\020\200\010\022\024\n\017FLUST_GTP_S"
      "TATS\020\200\020\022\025\n\020FLUST_S1AP_STATS\020\200 \022\034\n\026FLUST_"
      "RRC_MEASUREMENTS\020\200\200\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stats_messages.proto", &protobuf_RegisterTypes);
  ::protocol::protobuf_stats_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_stats_5fmessages_2eproto

const ::google::protobuf::EnumDescriptor* flex_stats_type_descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_enum_descriptors[0];
}
bool flex_stats_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_stats_report_freq_descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_enum_descriptors[1];
}
bool flex_stats_report_freq_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_cell_stats_type_descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_enum_descriptors[2];
}
bool flex_cell_stats_type_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_ue_stats_type_descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_enum_descriptors[3];
}
bool flex_ue_stats_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 1024:
    case 2048:
    case 4096:
    case 65536:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_complete_stats_request::kReportFrequencyFieldNumber;
const int flex_complete_stats_request::kSfFieldNumber;
const int flex_complete_stats_request::kCellReportFlagsFieldNumber;
const int flex_complete_stats_request::kUeReportFlagsFieldNumber;
const int flex_complete_stats_request::kCellReportsFieldNumber;
const int flex_complete_stats_request::kUeReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_complete_stats_request::flex_complete_stats_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_complete_stats_request)
}
flex_complete_stats_request::flex_complete_stats_request(const flex_complete_stats_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cell_reports_(from.cell_reports_),
      ue_reports_(from.ue_reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&report_frequency_, &from.report_frequency_,
    reinterpret_cast<char*>(&ue_report_flags_) -
    reinterpret_cast<char*>(&report_frequency_) + sizeof(ue_report_flags_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_complete_stats_request)
}

void flex_complete_stats_request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&report_frequency_, 0, reinterpret_cast<char*>(&ue_report_flags_) -
    reinterpret_cast<char*>(&report_frequency_) + sizeof(ue_report_flags_));
}

flex_complete_stats_request::~flex_complete_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_complete_stats_request)
  SharedDtor();
}

void flex_complete_stats_request::SharedDtor() {
}

void flex_complete_stats_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_complete_stats_request::descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_complete_stats_request& flex_complete_stats_request::default_instance() {
  protobuf_stats_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_complete_stats_request* flex_complete_stats_request::New(::google::protobuf::Arena* arena) const {
  flex_complete_stats_request* n = new flex_complete_stats_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_complete_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_complete_stats_request)
  cell_reports_.Clear();
  ue_reports_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&report_frequency_, 0, reinterpret_cast<char*>(&ue_report_flags_) -
      reinterpret_cast<char*>(&report_frequency_) + sizeof(ue_report_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_complete_stats_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_complete_stats_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_stats_report_freq report_frequency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_stats_report_freq_IsValid(value)) {
            set_report_frequency(static_cast< ::protocol::flex_stats_report_freq >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_report_flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_cell_report_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_report_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ue_report_flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ue_report_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ue_report_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_cell_stats_type cell_reports = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_cell_stats_type_IsValid(value)) {
            add_cell_reports(static_cast< ::protocol::flex_cell_stats_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 5,
                 ::protocol::flex_cell_stats_type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_cell_reports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_ue_stats_type ue_reports = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_ue_stats_type_IsValid(value)) {
            add_ue_reports(static_cast< ::protocol::flex_ue_stats_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 6,
                 ::protocol::flex_ue_stats_type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_ue_reports())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_complete_stats_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_complete_stats_request)
  return false;
#undef DO_
}

void flex_complete_stats_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_complete_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_stats_report_freq report_frequency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->report_frequency(), output);
  }

  // optional uint32 sf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sf(), output);
  }

  // optional uint32 cell_report_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_report_flags(), output);
  }

  // optional uint32 ue_report_flags = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ue_report_flags(), output);
  }

  // repeated .protocol.flex_cell_stats_type cell_reports = 5;
  for (int i = 0, n = this->cell_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->cell_reports(i), output);
  }

  // repeated .protocol.flex_ue_stats_type ue_reports = 6;
  for (int i = 0, n = this->ue_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ue_reports(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_complete_stats_request)
}

::google::protobuf::uint8* flex_complete_stats_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_complete_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_stats_report_freq report_frequency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->report_frequency(), target);
  }

  // optional uint32 sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sf(), target);
  }

  // optional uint32 cell_report_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_report_flags(), target);
  }

  // optional uint32 ue_report_flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ue_report_flags(), target);
  }

  // repeated .protocol.flex_cell_stats_type cell_reports = 5;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    5, this->cell_reports_, target);

  // repeated .protocol.flex_ue_stats_type ue_reports = 6;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    6, this->ue_reports_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_complete_stats_request)
  return target;
}

size_t flex_complete_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_complete_stats_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_cell_stats_type cell_reports = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->cell_reports_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cell_reports(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .protocol.flex_ue_stats_type ue_reports = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->ue_reports_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ue_reports(i));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .protocol.flex_stats_report_freq report_frequency = 1;
    if (has_report_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->report_frequency());
    }

    // optional uint32 sf = 2;
    if (has_sf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sf());
    }

    // optional uint32 cell_report_flags = 3;
    if (has_cell_report_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_report_flags());
    }

    // optional uint32 ue_report_flags = 4;
    if (has_ue_report_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ue_report_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_complete_stats_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_complete_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_complete_stats_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_complete_stats_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_complete_stats_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_complete_stats_request)
    MergeFrom(*source);
  }
}

void flex_complete_stats_request::MergeFrom(const flex_complete_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_complete_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_reports_.MergeFrom(from.cell_reports_);
  ue_reports_.MergeFrom(from.ue_reports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      report_frequency_ = from.report_frequency_;
    }
    if (cached_has_bits & 0x00000002u) {
      sf_ = from.sf_;
    }
    if (cached_has_bits & 0x00000004u) {
      cell_report_flags_ = from.cell_report_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      ue_report_flags_ = from.ue_report_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_complete_stats_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_complete_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_complete_stats_request::CopyFrom(const flex_complete_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_complete_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_complete_stats_request::IsInitialized() const {
  return true;
}

void flex_complete_stats_request::Swap(flex_complete_stats_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_complete_stats_request::InternalSwap(flex_complete_stats_request* other) {
  cell_reports_.InternalSwap(&other->cell_reports_);
  ue_reports_.InternalSwap(&other->ue_reports_);
  std::swap(report_frequency_, other->report_frequency_);
  std::swap(sf_, other->sf_);
  std::swap(cell_report_flags_, other->cell_report_flags_);
  std::swap(ue_report_flags_, other->ue_report_flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_complete_stats_request::GetMetadata() const {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_complete_stats_request

// optional .protocol.flex_stats_report_freq report_frequency = 1;
bool flex_complete_stats_request::has_report_frequency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_complete_stats_request::set_has_report_frequency() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_complete_stats_request::clear_has_report_frequency() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_complete_stats_request::clear_report_frequency() {
  report_frequency_ = 0;
  clear_has_report_frequency();
}
::protocol::flex_stats_report_freq flex_complete_stats_request::report_frequency() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.report_frequency)
  return static_cast< ::protocol::flex_stats_report_freq >(report_frequency_);
}
void flex_complete_stats_request::set_report_frequency(::protocol::flex_stats_report_freq value) {
  assert(::protocol::flex_stats_report_freq_IsValid(value));
  set_has_report_frequency();
  report_frequency_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.report_frequency)
}

// optional uint32 sf = 2;
bool flex_complete_stats_request::has_sf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_complete_stats_request::set_has_sf() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_complete_stats_request::clear_has_sf() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_complete_stats_request::clear_sf() {
  sf_ = 0u;
  clear_has_sf();
}
::google::protobuf::uint32 flex_complete_stats_request::sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.sf)
  return sf_;
}
void flex_complete_stats_request::set_sf(::google::protobuf::uint32 value) {
  set_has_sf();
  sf_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.sf)
}

// optional uint32 cell_report_flags = 3;
bool flex_complete_stats_request::has_cell_report_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_complete_stats_request::set_has_cell_report_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_complete_stats_request::clear_has_cell_report_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_complete_stats_request::clear_cell_report_flags() {
  cell_report_flags_ = 0u;
  clear_has_cell_report_flags();
}
::google::protobuf::uint32 flex_complete_stats_request::cell_report_flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.cell_report_flags)
  return cell_report_flags_;
}
void flex_complete_stats_request::set_cell_report_flags(::google::protobuf::uint32 value) {
  set_has_cell_report_flags();
  cell_report_flags_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.cell_report_flags)
}

// optional uint32 ue_report_flags = 4;
bool flex_complete_stats_request::has_ue_report_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_complete_stats_request::set_has_ue_report_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_complete_stats_request::clear_has_ue_report_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_complete_stats_request::clear_ue_report_flags() {
  ue_report_flags_ = 0u;
  clear_has_ue_report_flags();
}
::google::protobuf::uint32 flex_complete_stats_request::ue_report_flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.ue_report_flags)
  return ue_report_flags_;
}
void flex_complete_stats_request::set_ue_report_flags(::google::protobuf::uint32 value) {
  set_has_ue_report_flags();
  ue_report_flags_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.ue_report_flags)
}

// repeated .protocol.flex_cell_stats_type cell_reports = 5;
int flex_complete_stats_request::cell_reports_size() const {
  return cell_reports_.size();
}
void flex_complete_stats_request::clear_cell_reports() {
  cell_reports_.Clear();
}
::protocol::flex_cell_stats_type flex_complete_stats_request::cell_reports(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.cell_reports)
  return static_cast< ::protocol::flex_cell_stats_type >(cell_reports_.Get(index));
}
void flex_complete_stats_request::set_cell_reports(int index, ::protocol::flex_cell_stats_type value) {
  assert(::protocol::flex_cell_stats_type_IsValid(value));
  cell_reports_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.cell_reports)
}
void flex_complete_stats_request::add_cell_reports(::protocol::flex_cell_stats_type value) {
  assert(::protocol::flex_cell_stats_type_IsValid(value));
  cell_reports_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_complete_stats_request.cell_reports)
}
const ::google::protobuf::RepeatedField<int>&
flex_complete_stats_request::cell_reports() const {
  // @@protoc_insertion_point(field_list:protocol.flex_complete_stats_request.cell_reports)
  return cell_reports_;
}
::google::protobuf::RepeatedField<int>*
flex_complete_stats_request::mutable_cell_reports() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_complete_stats_request.cell_reports)
  return &cell_reports_;
}

// repeated .protocol.flex_ue_stats_type ue_reports = 6;
int flex_complete_stats_request::ue_reports_size() const {
  return ue_reports_.size();
}
void flex_complete_stats_request::clear_ue_reports() {
  ue_reports_.Clear();
}
::protocol::flex_ue_stats_type flex_complete_stats_request::ue_reports(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.ue_reports)
  return static_cast< ::protocol::flex_ue_stats_type >(ue_reports_.Get(index));
}
void flex_complete_stats_request::set_ue_reports(int index, ::protocol::flex_ue_stats_type value) {
  assert(::protocol::flex_ue_stats_type_IsValid(value));
  ue_reports_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.ue_reports)
}
void flex_complete_stats_request::add_ue_reports(::protocol::flex_ue_stats_type value) {
  assert(::protocol::flex_ue_stats_type_IsValid(value));
  ue_reports_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_complete_stats_request.ue_reports)
}
const ::google::protobuf::RepeatedField<int>&
flex_complete_stats_request::ue_reports() const {
  // @@protoc_insertion_point(field_list:protocol.flex_complete_stats_request.ue_reports)
  return ue_reports_;
}
::google::protobuf::RepeatedField<int>*
flex_complete_stats_request::mutable_ue_reports() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_complete_stats_request.ue_reports)
  return &ue_reports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_cell_stats_request::kCellFieldNumber;
const int flex_cell_stats_request::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_cell_stats_request::flex_cell_stats_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_cell_stats_request)
}
flex_cell_stats_request::flex_cell_stats_request(const flex_cell_stats_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cell_(from.cell_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_stats_request)
}

void flex_cell_stats_request::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0u;
}

flex_cell_stats_request::~flex_cell_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_stats_request)
  SharedDtor();
}

void flex_cell_stats_request::SharedDtor() {
}

void flex_cell_stats_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_cell_stats_request::descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_cell_stats_request& flex_cell_stats_request::default_instance() {
  protobuf_stats_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_cell_stats_request* flex_cell_stats_request::New(::google::protobuf::Arena* arena) const {
  flex_cell_stats_request* n = new flex_cell_stats_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_cell_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_stats_request)
  cell_.Clear();
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_cell_stats_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_cell_stats_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cell = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_cell())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cell())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_cell_stats_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_cell_stats_request)
  return false;
#undef DO_
}

void flex_cell_stats_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_cell_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cell = 1;
  for (int i = 0, n = this->cell_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->cell(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_cell_stats_request)
}

::google::protobuf::uint8* flex_cell_stats_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cell = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->cell_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_stats_request)
  return target;
}

size_t flex_cell_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_stats_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 cell = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cell_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cell_size());
    total_size += data_size;
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_cell_stats_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_stats_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_cell_stats_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_stats_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_stats_request)
    MergeFrom(*source);
  }
}

void flex_cell_stats_request::MergeFrom(const flex_cell_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_.MergeFrom(from.cell_);
  if (from.has_flags()) {
    set_flags(from.flags());
  }
}

void flex_cell_stats_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_stats_request::CopyFrom(const flex_cell_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_stats_request::IsInitialized() const {
  return true;
}

void flex_cell_stats_request::Swap(flex_cell_stats_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_cell_stats_request::InternalSwap(flex_cell_stats_request* other) {
  cell_.InternalSwap(&other->cell_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_cell_stats_request::GetMetadata() const {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_cell_stats_request

// repeated uint32 cell = 1;
int flex_cell_stats_request::cell_size() const {
  return cell_.size();
}
void flex_cell_stats_request::clear_cell() {
  cell_.Clear();
}
::google::protobuf::uint32 flex_cell_stats_request::cell(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_request.cell)
  return cell_.Get(index);
}
void flex_cell_stats_request::set_cell(int index, ::google::protobuf::uint32 value) {
  cell_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_request.cell)
}
void flex_cell_stats_request::add_cell(::google::protobuf::uint32 value) {
  cell_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_stats_request.cell)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_stats_request::cell() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_stats_request.cell)
  return cell_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_stats_request::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_stats_request.cell)
  return &cell_;
}

// optional uint32 flags = 2;
bool flex_cell_stats_request::has_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_cell_stats_request::set_has_flags() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_cell_stats_request::clear_has_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_cell_stats_request::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 flex_cell_stats_request::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_request.flags)
  return flags_;
}
void flex_cell_stats_request::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_request.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_stats_request::kRntiFieldNumber;
const int flex_ue_stats_request::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_stats_request::flex_ue_stats_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_stats_request)
}
flex_ue_stats_request::flex_ue_stats_request(const flex_ue_stats_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rnti_(from.rnti_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_stats_request)
}

void flex_ue_stats_request::SharedCtor() {
  _cached_size_ = 0;
  flags_ = 0u;
}

flex_ue_stats_request::~flex_ue_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_stats_request)
  SharedDtor();
}

void flex_ue_stats_request::SharedDtor() {
}

void flex_ue_stats_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_stats_request::descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_stats_request& flex_ue_stats_request::default_instance() {
  protobuf_stats_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_stats_request* flex_ue_stats_request::New(::google::protobuf::Arena* arena) const {
  flex_ue_stats_request* n = new flex_ue_stats_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_stats_request)
  rnti_.Clear();
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_stats_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_stats_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_rnti())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rnti())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_stats_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_stats_request)
  return false;
#undef DO_
}

void flex_ue_stats_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 rnti = 1;
  for (int i = 0, n = this->rnti_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rnti(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_stats_request)
}

::google::protobuf::uint8* flex_ue_stats_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_stats_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 rnti = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->rnti_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_stats_request)
  return target;
}

size_t flex_ue_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_stats_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 rnti = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rnti_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rnti_size());
    total_size += data_size;
  }

  // optional uint32 flags = 2;
  if (has_flags()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_stats_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_stats_request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_stats_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_stats_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_stats_request)
    MergeFrom(*source);
  }
}

void flex_ue_stats_request::MergeFrom(const flex_ue_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rnti_.MergeFrom(from.rnti_);
  if (from.has_flags()) {
    set_flags(from.flags());
  }
}

void flex_ue_stats_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_stats_request::CopyFrom(const flex_ue_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_stats_request::IsInitialized() const {
  return true;
}

void flex_ue_stats_request::Swap(flex_ue_stats_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_stats_request::InternalSwap(flex_ue_stats_request* other) {
  rnti_.InternalSwap(&other->rnti_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_stats_request::GetMetadata() const {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_stats_request

// repeated uint32 rnti = 1;
int flex_ue_stats_request::rnti_size() const {
  return rnti_.size();
}
void flex_ue_stats_request::clear_rnti() {
  rnti_.Clear();
}
::google::protobuf::uint32 flex_ue_stats_request::rnti(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_request.rnti)
  return rnti_.Get(index);
}
void flex_ue_stats_request::set_rnti(int index, ::google::protobuf::uint32 value) {
  rnti_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_request.rnti)
}
void flex_ue_stats_request::add_rnti(::google::protobuf::uint32 value) {
  rnti_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_request.rnti)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_ue_stats_request::rnti() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_request.rnti)
  return rnti_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_ue_stats_request::mutable_rnti() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_request.rnti)
  return &rnti_;
}

// optional uint32 flags = 2;
bool flex_ue_stats_request::has_flags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_stats_request::set_has_flags() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_stats_request::clear_has_flags() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_stats_request::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 flex_ue_stats_request::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_request.flags)
  return flags_;
}
void flex_ue_stats_request::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_request.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_cell_stats_report::kCarrierIndexFieldNumber;
const int flex_cell_stats_report::kFlagsFieldNumber;
const int flex_cell_stats_report::kNoiseInterReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_cell_stats_report::flex_cell_stats_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_cell_stats_report)
}
flex_cell_stats_report::flex_cell_stats_report(const flex_cell_stats_report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_noise_inter_report()) {
    noise_inter_report_ = new ::protocol::flex_noise_interference_report(*from.noise_inter_report_);
  } else {
    noise_inter_report_ = NULL;
  }
  ::memcpy(&carrier_index_, &from.carrier_index_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&carrier_index_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_stats_report)
}

void flex_cell_stats_report::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&noise_inter_report_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&noise_inter_report_) + sizeof(flags_));
}

flex_cell_stats_report::~flex_cell_stats_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_stats_report)
  SharedDtor();
}

void flex_cell_stats_report::SharedDtor() {
  if (this != internal_default_instance()) {
    delete noise_inter_report_;
  }
}

void flex_cell_stats_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_cell_stats_report::descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_cell_stats_report& flex_cell_stats_report::default_instance() {
  protobuf_stats_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_cell_stats_report* flex_cell_stats_report::New(::google::protobuf::Arena* arena) const {
  flex_cell_stats_report* n = new flex_cell_stats_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_cell_stats_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_stats_report)
  if (has_noise_inter_report()) {
    GOOGLE_DCHECK(noise_inter_report_ != NULL);
    noise_inter_report_->::protocol::flex_noise_interference_report::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&carrier_index_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&carrier_index_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_cell_stats_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_cell_stats_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 carrier_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noise_inter_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_cell_stats_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_cell_stats_report)
  return false;
#undef DO_
}

void flex_cell_stats_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_cell_stats_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->carrier_index(), output);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->noise_inter_report_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_cell_stats_report)
}

::google::protobuf::uint8* flex_cell_stats_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_stats_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->carrier_index(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->noise_inter_report_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_stats_report)
  return target;
}

size_t flex_cell_stats_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_stats_report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
    if (has_noise_inter_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->noise_inter_report_);
    }

    // optional uint32 carrier_index = 1;
    if (has_carrier_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_cell_stats_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_stats_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_cell_stats_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_stats_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_stats_report)
    MergeFrom(*source);
  }
}

void flex_cell_stats_report::MergeFrom(const flex_cell_stats_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_noise_inter_report()->::protocol::flex_noise_interference_report::MergeFrom(from.noise_inter_report());
    }
    if (cached_has_bits & 0x00000002u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_cell_stats_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_stats_report::CopyFrom(const flex_cell_stats_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_stats_report::IsInitialized() const {
  return true;
}

void flex_cell_stats_report::Swap(flex_cell_stats_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_cell_stats_report::InternalSwap(flex_cell_stats_report* other) {
  std::swap(noise_inter_report_, other->noise_inter_report_);
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_cell_stats_report::GetMetadata() const {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_cell_stats_report

// optional uint32 carrier_index = 1;
bool flex_cell_stats_report::has_carrier_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_cell_stats_report::set_has_carrier_index() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_cell_stats_report::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_cell_stats_report::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_cell_stats_report::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_report.carrier_index)
  return carrier_index_;
}
void flex_cell_stats_report::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_report.carrier_index)
}

// optional uint32 flags = 2;
bool flex_cell_stats_report::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_cell_stats_report::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_cell_stats_report::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_cell_stats_report::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 flex_cell_stats_report::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_report.flags)
  return flags_;
}
void flex_cell_stats_report::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_report.flags)
}

// optional .protocol.flex_noise_interference_report noise_inter_report = 3;
bool flex_cell_stats_report::has_noise_inter_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_cell_stats_report::set_has_noise_inter_report() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_cell_stats_report::clear_has_noise_inter_report() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_cell_stats_report::clear_noise_inter_report() {
  if (noise_inter_report_ != NULL) noise_inter_report_->::protocol::flex_noise_interference_report::Clear();
  clear_has_noise_inter_report();
}
const ::protocol::flex_noise_interference_report& flex_cell_stats_report::noise_inter_report() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_report.noise_inter_report)
  return noise_inter_report_ != NULL ? *noise_inter_report_
                         : *::protocol::flex_noise_interference_report::internal_default_instance();
}
::protocol::flex_noise_interference_report* flex_cell_stats_report::mutable_noise_inter_report() {
  set_has_noise_inter_report();
  if (noise_inter_report_ == NULL) {
    noise_inter_report_ = new ::protocol::flex_noise_interference_report;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_stats_report.noise_inter_report)
  return noise_inter_report_;
}
::protocol::flex_noise_interference_report* flex_cell_stats_report::release_noise_inter_report() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_stats_report.noise_inter_report)
  clear_has_noise_inter_report();
  ::protocol::flex_noise_interference_report* temp = noise_inter_report_;
  noise_inter_report_ = NULL;
  return temp;
}
void flex_cell_stats_report::set_allocated_noise_inter_report(::protocol::flex_noise_interference_report* noise_inter_report) {
  delete noise_inter_report_;
  noise_inter_report_ = noise_inter_report;
  if (noise_inter_report) {
    set_has_noise_inter_report();
  } else {
    clear_has_noise_inter_report();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_stats_report.noise_inter_report)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_stats_report::kRntiFieldNumber;
const int flex_ue_stats_report::kFlagsFieldNumber;
const int flex_ue_stats_report::kBsrFieldNumber;
const int flex_ue_stats_report::kPhrFieldNumber;
const int flex_ue_stats_report::kRlcReportFieldNumber;
const int flex_ue_stats_report::kPendingMacCesFieldNumber;
const int flex_ue_stats_report::kDlCqiReportFieldNumber;
const int flex_ue_stats_report::kPbrFieldNumber;
const int flex_ue_stats_report::kUlCqiReportFieldNumber;
const int flex_ue_stats_report::kRrcMeasurementsFieldNumber;
const int flex_ue_stats_report::kPdcpStatsFieldNumber;
const int flex_ue_stats_report::kMacStatsFieldNumber;
const int flex_ue_stats_report::kGtpStatsFieldNumber;
const int flex_ue_stats_report::kS1ApStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_stats_report::flex_ue_stats_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_stats_report)
}
flex_ue_stats_report::flex_ue_stats_report(const flex_ue_stats_report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bsr_(from.bsr_),
      rlc_report_(from.rlc_report_),
      gtp_stats_(from.gtp_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dl_cqi_report()) {
    dl_cqi_report_ = new ::protocol::flex_dl_cqi_report(*from.dl_cqi_report_);
  } else {
    dl_cqi_report_ = NULL;
  }
  if (from.has_pbr()) {
    pbr_ = new ::protocol::flex_paging_buffer_report(*from.pbr_);
  } else {
    pbr_ = NULL;
  }
  if (from.has_ul_cqi_report()) {
    ul_cqi_report_ = new ::protocol::flex_ul_cqi_report(*from.ul_cqi_report_);
  } else {
    ul_cqi_report_ = NULL;
  }
  if (from.has_rrc_measurements()) {
    rrc_measurements_ = new ::protocol::flex_rrc_measurements(*from.rrc_measurements_);
  } else {
    rrc_measurements_ = NULL;
  }
  if (from.has_pdcp_stats()) {
    pdcp_stats_ = new ::protocol::flex_pdcp_stats(*from.pdcp_stats_);
  } else {
    pdcp_stats_ = NULL;
  }
  if (from.has_mac_stats()) {
    mac_stats_ = new ::protocol::flex_mac_stats(*from.mac_stats_);
  } else {
    mac_stats_ = NULL;
  }
  if (from.has_s1ap_stats()) {
    s1ap_stats_ = new ::protocol::flex_s1ap_ue(*from.s1ap_stats_);
  } else {
    s1ap_stats_ = NULL;
  }
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&pending_mac_ces_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(pending_mac_ces_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_stats_report)
}

void flex_ue_stats_report::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dl_cqi_report_, 0, reinterpret_cast<char*>(&pending_mac_ces_) -
    reinterpret_cast<char*>(&dl_cqi_report_) + sizeof(pending_mac_ces_));
}

flex_ue_stats_report::~flex_ue_stats_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_stats_report)
  SharedDtor();
}

void flex_ue_stats_report::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dl_cqi_report_;
  }
  if (this != internal_default_instance()) {
    delete pbr_;
  }
  if (this != internal_default_instance()) {
    delete ul_cqi_report_;
  }
  if (this != internal_default_instance()) {
    delete rrc_measurements_;
  }
  if (this != internal_default_instance()) {
    delete pdcp_stats_;
  }
  if (this != internal_default_instance()) {
    delete mac_stats_;
  }
  if (this != internal_default_instance()) {
    delete s1ap_stats_;
  }
}

void flex_ue_stats_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_stats_report::descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_stats_report& flex_ue_stats_report::default_instance() {
  protobuf_stats_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_stats_report* flex_ue_stats_report::New(::google::protobuf::Arena* arena) const {
  flex_ue_stats_report* n = new flex_ue_stats_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_stats_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_stats_report)
  bsr_.Clear();
  rlc_report_.Clear();
  gtp_stats_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_dl_cqi_report()) {
      GOOGLE_DCHECK(dl_cqi_report_ != NULL);
      dl_cqi_report_->::protocol::flex_dl_cqi_report::Clear();
    }
    if (has_pbr()) {
      GOOGLE_DCHECK(pbr_ != NULL);
      pbr_->::protocol::flex_paging_buffer_report::Clear();
    }
    if (has_ul_cqi_report()) {
      GOOGLE_DCHECK(ul_cqi_report_ != NULL);
      ul_cqi_report_->::protocol::flex_ul_cqi_report::Clear();
    }
    if (has_rrc_measurements()) {
      GOOGLE_DCHECK(rrc_measurements_ != NULL);
      rrc_measurements_->::protocol::flex_rrc_measurements::Clear();
    }
    if (has_pdcp_stats()) {
      GOOGLE_DCHECK(pdcp_stats_ != NULL);
      pdcp_stats_->::protocol::flex_pdcp_stats::Clear();
    }
    if (has_mac_stats()) {
      GOOGLE_DCHECK(mac_stats_ != NULL);
      mac_stats_->::protocol::flex_mac_stats::Clear();
    }
    if (has_s1ap_stats()) {
      GOOGLE_DCHECK(s1ap_stats_ != NULL);
      s1ap_stats_->::protocol::flex_s1ap_ue::Clear();
    }
  }
  rnti_ = 0u;
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&flags_, 0, reinterpret_cast<char*>(&pending_mac_ces_) -
      reinterpret_cast<char*>(&flags_) + sizeof(pending_mac_ces_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_stats_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_stats_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 bsr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_bsr())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bsr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_phr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_rlc_bsr rlc_report = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rlc_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pending_mac_ces = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_pending_mac_ces();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_mac_ces_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dl_cqi_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_paging_buffer_report pbr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ul_cqi_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rrc_measurements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pdcp_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_mac_stats mac_stats = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mac_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_gtp_stats gtp_stats = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gtp_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s1ap_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_stats_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_stats_report)
  return false;
#undef DO_
}

void flex_ue_stats_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_stats_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // repeated uint32 bsr = 3;
  for (int i = 0, n = this->bsr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->bsr(i), output);
  }

  // optional uint32 phr = 4;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->phr(), output);
  }

  // repeated .protocol.flex_rlc_bsr rlc_report = 5;
  for (unsigned int i = 0, n = this->rlc_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rlc_report(i), output);
  }

  // optional uint32 pending_mac_ces = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pending_mac_ces(), output);
  }

  // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->dl_cqi_report_, output);
  }

  // optional .protocol.flex_paging_buffer_report pbr = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pbr_, output);
  }

  // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ul_cqi_report_, output);
  }

  // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->rrc_measurements_, output);
  }

  // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->pdcp_stats_, output);
  }

  // optional .protocol.flex_mac_stats mac_stats = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->mac_stats_, output);
  }

  // repeated .protocol.flex_gtp_stats gtp_stats = 13;
  for (unsigned int i = 0, n = this->gtp_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gtp_stats(i), output);
  }

  // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->s1ap_stats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_stats_report)
}

::google::protobuf::uint8* flex_ue_stats_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_stats_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flags(), target);
  }

  // repeated uint32 bsr = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->bsr_, target);

  // optional uint32 phr = 4;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->phr(), target);
  }

  // repeated .protocol.flex_rlc_bsr rlc_report = 5;
  for (unsigned int i = 0, n = this->rlc_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->rlc_report(i), deterministic, target);
  }

  // optional uint32 pending_mac_ces = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pending_mac_ces(), target);
  }

  // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->dl_cqi_report_, deterministic, target);
  }

  // optional .protocol.flex_paging_buffer_report pbr = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->pbr_, deterministic, target);
  }

  // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ul_cqi_report_, deterministic, target);
  }

  // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->rrc_measurements_, deterministic, target);
  }

  // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->pdcp_stats_, deterministic, target);
  }

  // optional .protocol.flex_mac_stats mac_stats = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->mac_stats_, deterministic, target);
  }

  // repeated .protocol.flex_gtp_stats gtp_stats = 13;
  for (unsigned int i = 0, n = this->gtp_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->gtp_stats(i), deterministic, target);
  }

  // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->s1ap_stats_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_stats_report)
  return target;
}

size_t flex_ue_stats_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_stats_report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 bsr = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bsr_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bsr_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_rlc_bsr rlc_report = 5;
  {
    unsigned int count = this->rlc_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rlc_report(i));
    }
  }

  // repeated .protocol.flex_gtp_stats gtp_stats = 13;
  {
    unsigned int count = this->gtp_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gtp_stats(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
    if (has_dl_cqi_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dl_cqi_report_);
    }

    // optional .protocol.flex_paging_buffer_report pbr = 8;
    if (has_pbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pbr_);
    }

    // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
    if (has_ul_cqi_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ul_cqi_report_);
    }

    // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
    if (has_rrc_measurements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rrc_measurements_);
    }

    // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
    if (has_pdcp_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pdcp_stats_);
    }

    // optional .protocol.flex_mac_stats mac_stats = 12;
    if (has_mac_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mac_stats_);
    }

    // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
    if (has_s1ap_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->s1ap_stats_);
    }

    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 phr = 4;
    if (has_phr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phr());
    }

    // optional uint32 pending_mac_ces = 6;
    if (has_pending_mac_ces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending_mac_ces());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_stats_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_stats_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_stats_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_stats_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_stats_report)
    MergeFrom(*source);
  }
}

void flex_ue_stats_report::MergeFrom(const flex_ue_stats_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bsr_.MergeFrom(from.bsr_);
  rlc_report_.MergeFrom(from.rlc_report_);
  gtp_stats_.MergeFrom(from.gtp_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dl_cqi_report()->::protocol::flex_dl_cqi_report::MergeFrom(from.dl_cqi_report());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pbr()->::protocol::flex_paging_buffer_report::MergeFrom(from.pbr());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ul_cqi_report()->::protocol::flex_ul_cqi_report::MergeFrom(from.ul_cqi_report());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rrc_measurements()->::protocol::flex_rrc_measurements::MergeFrom(from.rrc_measurements());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pdcp_stats()->::protocol::flex_pdcp_stats::MergeFrom(from.pdcp_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_mac_stats()->::protocol::flex_mac_stats::MergeFrom(from.mac_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_s1ap_stats()->::protocol::flex_s1ap_ue::MergeFrom(from.s1ap_stats());
    }
    if (cached_has_bits & 0x00000080u) {
      rnti_ = from.rnti_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      phr_ = from.phr_;
    }
    if (cached_has_bits & 0x00000400u) {
      pending_mac_ces_ = from.pending_mac_ces_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_stats_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_stats_report::CopyFrom(const flex_ue_stats_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_stats_report::IsInitialized() const {
  return true;
}

void flex_ue_stats_report::Swap(flex_ue_stats_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_stats_report::InternalSwap(flex_ue_stats_report* other) {
  bsr_.InternalSwap(&other->bsr_);
  rlc_report_.InternalSwap(&other->rlc_report_);
  gtp_stats_.InternalSwap(&other->gtp_stats_);
  std::swap(dl_cqi_report_, other->dl_cqi_report_);
  std::swap(pbr_, other->pbr_);
  std::swap(ul_cqi_report_, other->ul_cqi_report_);
  std::swap(rrc_measurements_, other->rrc_measurements_);
  std::swap(pdcp_stats_, other->pdcp_stats_);
  std::swap(mac_stats_, other->mac_stats_);
  std::swap(s1ap_stats_, other->s1ap_stats_);
  std::swap(rnti_, other->rnti_);
  std::swap(flags_, other->flags_);
  std::swap(phr_, other->phr_);
  std::swap(pending_mac_ces_, other->pending_mac_ces_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_stats_report::GetMetadata() const {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_stats_report

// optional uint32 rnti = 1;
bool flex_ue_stats_report::has_rnti() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_ue_stats_report::set_has_rnti() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_ue_stats_report::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_ue_stats_report::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_ue_stats_report::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.rnti)
  return rnti_;
}
void flex_ue_stats_report::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.rnti)
}

// optional uint32 flags = 2;
bool flex_ue_stats_report::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_ue_stats_report::set_has_flags() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_ue_stats_report::clear_has_flags() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_ue_stats_report::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 flex_ue_stats_report::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.flags)
  return flags_;
}
void flex_ue_stats_report::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.flags)
}

// repeated uint32 bsr = 3;
int flex_ue_stats_report::bsr_size() const {
  return bsr_.size();
}
void flex_ue_stats_report::clear_bsr() {
  bsr_.Clear();
}
::google::protobuf::uint32 flex_ue_stats_report::bsr(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.bsr)
  return bsr_.Get(index);
}
void flex_ue_stats_report::set_bsr(int index, ::google::protobuf::uint32 value) {
  bsr_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.bsr)
}
void flex_ue_stats_report::add_bsr(::google::protobuf::uint32 value) {
  bsr_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_report.bsr)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_ue_stats_report::bsr() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_report.bsr)
  return bsr_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_ue_stats_report::mutable_bsr() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_report.bsr)
  return &bsr_;
}

// optional uint32 phr = 4;
bool flex_ue_stats_report::has_phr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_ue_stats_report::set_has_phr() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_ue_stats_report::clear_has_phr() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_ue_stats_report::clear_phr() {
  phr_ = 0u;
  clear_has_phr();
}
::google::protobuf::uint32 flex_ue_stats_report::phr() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.phr)
  return phr_;
}
void flex_ue_stats_report::set_phr(::google::protobuf::uint32 value) {
  set_has_phr();
  phr_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.phr)
}

// repeated .protocol.flex_rlc_bsr rlc_report = 5;
int flex_ue_stats_report::rlc_report_size() const {
  return rlc_report_.size();
}
void flex_ue_stats_report::clear_rlc_report() {
  rlc_report_.Clear();
}
const ::protocol::flex_rlc_bsr& flex_ue_stats_report::rlc_report(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.rlc_report)
  return rlc_report_.Get(index);
}
::protocol::flex_rlc_bsr* flex_ue_stats_report::mutable_rlc_report(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.rlc_report)
  return rlc_report_.Mutable(index);
}
::protocol::flex_rlc_bsr* flex_ue_stats_report::add_rlc_report() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_report.rlc_report)
  return rlc_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_bsr >*
flex_ue_stats_report::mutable_rlc_report() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_report.rlc_report)
  return &rlc_report_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_bsr >&
flex_ue_stats_report::rlc_report() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_report.rlc_report)
  return rlc_report_;
}

// optional uint32 pending_mac_ces = 6;
bool flex_ue_stats_report::has_pending_mac_ces() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_ue_stats_report::set_has_pending_mac_ces() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_ue_stats_report::clear_has_pending_mac_ces() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_ue_stats_report::clear_pending_mac_ces() {
  pending_mac_ces_ = 0u;
  clear_has_pending_mac_ces();
}
::google::protobuf::uint32 flex_ue_stats_report::pending_mac_ces() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.pending_mac_ces)
  return pending_mac_ces_;
}
void flex_ue_stats_report::set_pending_mac_ces(::google::protobuf::uint32 value) {
  set_has_pending_mac_ces();
  pending_mac_ces_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.pending_mac_ces)
}

// optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
bool flex_ue_stats_report::has_dl_cqi_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_stats_report::set_has_dl_cqi_report() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_stats_report::clear_has_dl_cqi_report() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_stats_report::clear_dl_cqi_report() {
  if (dl_cqi_report_ != NULL) dl_cqi_report_->::protocol::flex_dl_cqi_report::Clear();
  clear_has_dl_cqi_report();
}
const ::protocol::flex_dl_cqi_report& flex_ue_stats_report::dl_cqi_report() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.dl_cqi_report)
  return dl_cqi_report_ != NULL ? *dl_cqi_report_
                         : *::protocol::flex_dl_cqi_report::internal_default_instance();
}
::protocol::flex_dl_cqi_report* flex_ue_stats_report::mutable_dl_cqi_report() {
  set_has_dl_cqi_report();
  if (dl_cqi_report_ == NULL) {
    dl_cqi_report_ = new ::protocol::flex_dl_cqi_report;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.dl_cqi_report)
  return dl_cqi_report_;
}
::protocol::flex_dl_cqi_report* flex_ue_stats_report::release_dl_cqi_report() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.dl_cqi_report)
  clear_has_dl_cqi_report();
  ::protocol::flex_dl_cqi_report* temp = dl_cqi_report_;
  dl_cqi_report_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_dl_cqi_report(::protocol::flex_dl_cqi_report* dl_cqi_report) {
  delete dl_cqi_report_;
  dl_cqi_report_ = dl_cqi_report;
  if (dl_cqi_report) {
    set_has_dl_cqi_report();
  } else {
    clear_has_dl_cqi_report();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.dl_cqi_report)
}

// optional .protocol.flex_paging_buffer_report pbr = 8;
bool flex_ue_stats_report::has_pbr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ue_stats_report::set_has_pbr() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ue_stats_report::clear_has_pbr() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ue_stats_report::clear_pbr() {
  if (pbr_ != NULL) pbr_->::protocol::flex_paging_buffer_report::Clear();
  clear_has_pbr();
}
const ::protocol::flex_paging_buffer_report& flex_ue_stats_report::pbr() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.pbr)
  return pbr_ != NULL ? *pbr_
                         : *::protocol::flex_paging_buffer_report::internal_default_instance();
}
::protocol::flex_paging_buffer_report* flex_ue_stats_report::mutable_pbr() {
  set_has_pbr();
  if (pbr_ == NULL) {
    pbr_ = new ::protocol::flex_paging_buffer_report;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.pbr)
  return pbr_;
}
::protocol::flex_paging_buffer_report* flex_ue_stats_report::release_pbr() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.pbr)
  clear_has_pbr();
  ::protocol::flex_paging_buffer_report* temp = pbr_;
  pbr_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_pbr(::protocol::flex_paging_buffer_report* pbr) {
  delete pbr_;
  pbr_ = pbr;
  if (pbr) {
    set_has_pbr();
  } else {
    clear_has_pbr();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.pbr)
}

// optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
bool flex_ue_stats_report::has_ul_cqi_report() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ue_stats_report::set_has_ul_cqi_report() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ue_stats_report::clear_has_ul_cqi_report() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ue_stats_report::clear_ul_cqi_report() {
  if (ul_cqi_report_ != NULL) ul_cqi_report_->::protocol::flex_ul_cqi_report::Clear();
  clear_has_ul_cqi_report();
}
const ::protocol::flex_ul_cqi_report& flex_ue_stats_report::ul_cqi_report() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.ul_cqi_report)
  return ul_cqi_report_ != NULL ? *ul_cqi_report_
                         : *::protocol::flex_ul_cqi_report::internal_default_instance();
}
::protocol::flex_ul_cqi_report* flex_ue_stats_report::mutable_ul_cqi_report() {
  set_has_ul_cqi_report();
  if (ul_cqi_report_ == NULL) {
    ul_cqi_report_ = new ::protocol::flex_ul_cqi_report;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.ul_cqi_report)
  return ul_cqi_report_;
}
::protocol::flex_ul_cqi_report* flex_ue_stats_report::release_ul_cqi_report() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.ul_cqi_report)
  clear_has_ul_cqi_report();
  ::protocol::flex_ul_cqi_report* temp = ul_cqi_report_;
  ul_cqi_report_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_ul_cqi_report(::protocol::flex_ul_cqi_report* ul_cqi_report) {
  delete ul_cqi_report_;
  ul_cqi_report_ = ul_cqi_report;
  if (ul_cqi_report) {
    set_has_ul_cqi_report();
  } else {
    clear_has_ul_cqi_report();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.ul_cqi_report)
}

// optional .protocol.flex_rrc_measurements rrc_measurements = 10;
bool flex_ue_stats_report::has_rrc_measurements() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_ue_stats_report::set_has_rrc_measurements() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_ue_stats_report::clear_has_rrc_measurements() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ue_stats_report::clear_rrc_measurements() {
  if (rrc_measurements_ != NULL) rrc_measurements_->::protocol::flex_rrc_measurements::Clear();
  clear_has_rrc_measurements();
}
const ::protocol::flex_rrc_measurements& flex_ue_stats_report::rrc_measurements() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.rrc_measurements)
  return rrc_measurements_ != NULL ? *rrc_measurements_
                         : *::protocol::flex_rrc_measurements::internal_default_instance();
}
::protocol::flex_rrc_measurements* flex_ue_stats_report::mutable_rrc_measurements() {
  set_has_rrc_measurements();
  if (rrc_measurements_ == NULL) {
    rrc_measurements_ = new ::protocol::flex_rrc_measurements;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.rrc_measurements)
  return rrc_measurements_;
}
::protocol::flex_rrc_measurements* flex_ue_stats_report::release_rrc_measurements() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.rrc_measurements)
  clear_has_rrc_measurements();
  ::protocol::flex_rrc_measurements* temp = rrc_measurements_;
  rrc_measurements_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_rrc_measurements(::protocol::flex_rrc_measurements* rrc_measurements) {
  delete rrc_measurements_;
  rrc_measurements_ = rrc_measurements;
  if (rrc_measurements) {
    set_has_rrc_measurements();
  } else {
    clear_has_rrc_measurements();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.rrc_measurements)
}

// optional .protocol.flex_pdcp_stats pdcp_stats = 11;
bool flex_ue_stats_report::has_pdcp_stats() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_ue_stats_report::set_has_pdcp_stats() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_ue_stats_report::clear_has_pdcp_stats() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ue_stats_report::clear_pdcp_stats() {
  if (pdcp_stats_ != NULL) pdcp_stats_->::protocol::flex_pdcp_stats::Clear();
  clear_has_pdcp_stats();
}
const ::protocol::flex_pdcp_stats& flex_ue_stats_report::pdcp_stats() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.pdcp_stats)
  return pdcp_stats_ != NULL ? *pdcp_stats_
                         : *::protocol::flex_pdcp_stats::internal_default_instance();
}
::protocol::flex_pdcp_stats* flex_ue_stats_report::mutable_pdcp_stats() {
  set_has_pdcp_stats();
  if (pdcp_stats_ == NULL) {
    pdcp_stats_ = new ::protocol::flex_pdcp_stats;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.pdcp_stats)
  return pdcp_stats_;
}
::protocol::flex_pdcp_stats* flex_ue_stats_report::release_pdcp_stats() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.pdcp_stats)
  clear_has_pdcp_stats();
  ::protocol::flex_pdcp_stats* temp = pdcp_stats_;
  pdcp_stats_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_pdcp_stats(::protocol::flex_pdcp_stats* pdcp_stats) {
  delete pdcp_stats_;
  pdcp_stats_ = pdcp_stats;
  if (pdcp_stats) {
    set_has_pdcp_stats();
  } else {
    clear_has_pdcp_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.pdcp_stats)
}

// optional .protocol.flex_mac_stats mac_stats = 12;
bool flex_ue_stats_report::has_mac_stats() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_ue_stats_report::set_has_mac_stats() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_ue_stats_report::clear_has_mac_stats() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_ue_stats_report::clear_mac_stats() {
  if (mac_stats_ != NULL) mac_stats_->::protocol::flex_mac_stats::Clear();
  clear_has_mac_stats();
}
const ::protocol::flex_mac_stats& flex_ue_stats_report::mac_stats() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.mac_stats)
  return mac_stats_ != NULL ? *mac_stats_
                         : *::protocol::flex_mac_stats::internal_default_instance();
}
::protocol::flex_mac_stats* flex_ue_stats_report::mutable_mac_stats() {
  set_has_mac_stats();
  if (mac_stats_ == NULL) {
    mac_stats_ = new ::protocol::flex_mac_stats;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.mac_stats)
  return mac_stats_;
}
::protocol::flex_mac_stats* flex_ue_stats_report::release_mac_stats() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.mac_stats)
  clear_has_mac_stats();
  ::protocol::flex_mac_stats* temp = mac_stats_;
  mac_stats_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_mac_stats(::protocol::flex_mac_stats* mac_stats) {
  delete mac_stats_;
  mac_stats_ = mac_stats;
  if (mac_stats) {
    set_has_mac_stats();
  } else {
    clear_has_mac_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.mac_stats)
}

// repeated .protocol.flex_gtp_stats gtp_stats = 13;
int flex_ue_stats_report::gtp_stats_size() const {
  return gtp_stats_.size();
}
void flex_ue_stats_report::clear_gtp_stats() {
  gtp_stats_.Clear();
}
const ::protocol::flex_gtp_stats& flex_ue_stats_report::gtp_stats(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.gtp_stats)
  return gtp_stats_.Get(index);
}
::protocol::flex_gtp_stats* flex_ue_stats_report::mutable_gtp_stats(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.gtp_stats)
  return gtp_stats_.Mutable(index);
}
::protocol::flex_gtp_stats* flex_ue_stats_report::add_gtp_stats() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_report.gtp_stats)
  return gtp_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_gtp_stats >*
flex_ue_stats_report::mutable_gtp_stats() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_report.gtp_stats)
  return &gtp_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_gtp_stats >&
flex_ue_stats_report::gtp_stats() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_report.gtp_stats)
  return gtp_stats_;
}

// optional .protocol.flex_s1ap_ue s1ap_stats = 14;
bool flex_ue_stats_report::has_s1ap_stats() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_ue_stats_report::set_has_s1ap_stats() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_ue_stats_report::clear_has_s1ap_stats() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_ue_stats_report::clear_s1ap_stats() {
  if (s1ap_stats_ != NULL) s1ap_stats_->::protocol::flex_s1ap_ue::Clear();
  clear_has_s1ap_stats();
}
const ::protocol::flex_s1ap_ue& flex_ue_stats_report::s1ap_stats() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.s1ap_stats)
  return s1ap_stats_ != NULL ? *s1ap_stats_
                         : *::protocol::flex_s1ap_ue::internal_default_instance();
}
::protocol::flex_s1ap_ue* flex_ue_stats_report::mutable_s1ap_stats() {
  set_has_s1ap_stats();
  if (s1ap_stats_ == NULL) {
    s1ap_stats_ = new ::protocol::flex_s1ap_ue;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.s1ap_stats)
  return s1ap_stats_;
}
::protocol::flex_s1ap_ue* flex_ue_stats_report::release_s1ap_stats() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.s1ap_stats)
  clear_has_s1ap_stats();
  ::protocol::flex_s1ap_ue* temp = s1ap_stats_;
  s1ap_stats_ = NULL;
  return temp;
}
void flex_ue_stats_report::set_allocated_s1ap_stats(::protocol::flex_s1ap_ue* s1ap_stats) {
  delete s1ap_stats_;
  s1ap_stats_ = s1ap_stats;
  if (s1ap_stats) {
    set_has_s1ap_stats();
  } else {
    clear_has_s1ap_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.s1ap_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_complete_stats_request_repeated::kReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_complete_stats_request_repeated::flex_complete_stats_request_repeated()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_complete_stats_request_repeated)
}
flex_complete_stats_request_repeated::flex_complete_stats_request_repeated(const flex_complete_stats_request_repeated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_complete_stats_request_repeated)
}

void flex_complete_stats_request_repeated::SharedCtor() {
  _cached_size_ = 0;
}

flex_complete_stats_request_repeated::~flex_complete_stats_request_repeated() {
  // @@protoc_insertion_point(destructor:protocol.flex_complete_stats_request_repeated)
  SharedDtor();
}

void flex_complete_stats_request_repeated::SharedDtor() {
}

void flex_complete_stats_request_repeated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_complete_stats_request_repeated::descriptor() {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_complete_stats_request_repeated& flex_complete_stats_request_repeated::default_instance() {
  protobuf_stats_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_complete_stats_request_repeated* flex_complete_stats_request_repeated::New(::google::protobuf::Arena* arena) const {
  flex_complete_stats_request_repeated* n = new flex_complete_stats_request_repeated;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_complete_stats_request_repeated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_complete_stats_request_repeated)
  reports_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_complete_stats_request_repeated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_complete_stats_request_repeated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.flex_complete_stats_request reports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_complete_stats_request_repeated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_complete_stats_request_repeated)
  return false;
#undef DO_
}

void flex_complete_stats_request_repeated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_complete_stats_request_repeated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_complete_stats_request reports = 1;
  for (unsigned int i = 0, n = this->reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reports(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_complete_stats_request_repeated)
}

::google::protobuf::uint8* flex_complete_stats_request_repeated::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_complete_stats_request_repeated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_complete_stats_request reports = 1;
  for (unsigned int i = 0, n = this->reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->reports(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_complete_stats_request_repeated)
  return target;
}

size_t flex_complete_stats_request_repeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_complete_stats_request_repeated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_complete_stats_request reports = 1;
  {
    unsigned int count = this->reports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reports(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_complete_stats_request_repeated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_complete_stats_request_repeated)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_complete_stats_request_repeated* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_complete_stats_request_repeated>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_complete_stats_request_repeated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_complete_stats_request_repeated)
    MergeFrom(*source);
  }
}

void flex_complete_stats_request_repeated::MergeFrom(const flex_complete_stats_request_repeated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_complete_stats_request_repeated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
}

void flex_complete_stats_request_repeated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_complete_stats_request_repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_complete_stats_request_repeated::CopyFrom(const flex_complete_stats_request_repeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_complete_stats_request_repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_complete_stats_request_repeated::IsInitialized() const {
  return true;
}

void flex_complete_stats_request_repeated::Swap(flex_complete_stats_request_repeated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_complete_stats_request_repeated::InternalSwap(flex_complete_stats_request_repeated* other) {
  reports_.InternalSwap(&other->reports_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_complete_stats_request_repeated::GetMetadata() const {
  protobuf_stats_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_complete_stats_request_repeated

// repeated .protocol.flex_complete_stats_request reports = 1;
int flex_complete_stats_request_repeated::reports_size() const {
  return reports_.size();
}
void flex_complete_stats_request_repeated::clear_reports() {
  reports_.Clear();
}
const ::protocol::flex_complete_stats_request& flex_complete_stats_request_repeated::reports(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request_repeated.reports)
  return reports_.Get(index);
}
::protocol::flex_complete_stats_request* flex_complete_stats_request_repeated::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_complete_stats_request_repeated.reports)
  return reports_.Mutable(index);
}
::protocol::flex_complete_stats_request* flex_complete_stats_request_repeated::add_reports() {
  // @@protoc_insertion_point(field_add:protocol.flex_complete_stats_request_repeated.reports)
  return reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_complete_stats_request >*
flex_complete_stats_request_repeated::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_complete_stats_request_repeated.reports)
  return &reports_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_complete_stats_request >&
flex_complete_stats_request_repeated::reports() const {
  // @@protoc_insertion_point(field_list:protocol.flex_complete_stats_request_repeated.reports)
  return reports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
