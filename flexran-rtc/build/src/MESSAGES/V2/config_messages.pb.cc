// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_cell_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_cell_config> {
} _flex_cell_config_default_instance_;
class flex_slice_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_slice_config> {
} _flex_slice_config_default_instance_;
class flex_ue_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ue_config> {
} _flex_ue_config_default_instance_;
class flex_lc_ue_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_lc_ue_config> {
} _flex_lc_ue_config_default_instance_;
class flex_s1ap_configDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_s1ap_config> {
} _flex_s1ap_config_default_instance_;

namespace protobuf_config_5fmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, phy_cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, pusch_hopping_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, hopping_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, n_sb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, phich_resource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, phich_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, init_nr_pdcch_ofdm_sym_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, si_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, dl_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, ul_bandwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, ul_cyclic_prefix_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, dl_cyclic_prefix_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, antenna_ports_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, duplex_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, subframe_assignment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, special_subframe_patterns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, mbsfn_subframe_config_rfperiod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, mbsfn_subframe_config_rfoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, mbsfn_subframe_config_sfalloc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, prach_config_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, prach_freq_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, ra_response_window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, mac_contention_resolution_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, max_harq_msg3tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, n1pucch_an_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, deltapucch_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, nrb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, srs_subframe_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, srs_bw_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, srs_mac_up_pts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, enable_64qam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, carrier_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, dl_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, ul_freq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, eutra_band_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, dl_pdsch_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, ul_pusch_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, plmn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, slice_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_config, x2_ho_net_control_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  ~0u,
  1,
  35,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_config, dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_slice_config, ul_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, drx_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, time_alignment_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, meas_gap_config_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, meas_gap_config_sf_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, sps_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, sr_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, cqi_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, transmission_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ue_aggregated_max_bitrate_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ue_aggregated_max_bitrate_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, capabilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ue_transmission_antenna_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, tti_bundling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, max_harq_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, beta_offset_ack_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, beta_offset_ri_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, beta_offset_cqi_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ack_nack_simultaneous_trans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, simultaneous_ack_nack_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, aperiodic_cqi_rep_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, tdd_ack_nack_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ack_nack_repetition_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, extended_bsr_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ca_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, cross_carrier_sched_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, pcell_carrier_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, scell_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, scell_deactivation_timer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, imsi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, dl_slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, ul_slice_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ue_config, info_),
  6,
  0,
  7,
  8,
  9,
  1,
  2,
  3,
  12,
  10,
  11,
  4,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  ~0u,
  29,
  28,
  30,
  31,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_ue_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_ue_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_ue_config, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_lc_ue_config, lc_config_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, pending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, enb_s1_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, enb_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_config, mme_),
  2,
  3,
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 45, sizeof(flex_cell_config)},
  { 85, 92, sizeof(flex_slice_config)},
  { 94, 132, sizeof(flex_ue_config)},
  { 165, 172, sizeof(flex_lc_ue_config)},
  { 174, 184, sizeof(flex_s1ap_config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_cell_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_slice_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ue_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_lc_ue_config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_s1ap_config_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "config_messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_cell_config_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_slice_config_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_ue_config_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_lc_ue_config_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _flex_s1ap_config_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protocol::protobuf_config_5fcommon_2eproto::InitDefaults();
  _flex_cell_config_default_instance_.DefaultConstruct();
  _flex_slice_config_default_instance_.DefaultConstruct();
  _flex_ue_config_default_instance_.DefaultConstruct();
  _flex_lc_ue_config_default_instance_.DefaultConstruct();
  _flex_s1ap_config_default_instance_.DefaultConstruct();
  _flex_cell_config_default_instance_.get_mutable()->si_config_ = const_cast< ::protocol::flex_si_config*>(
      ::protocol::flex_si_config::internal_default_instance());
  _flex_cell_config_default_instance_.get_mutable()->slice_config_ = const_cast< ::protocol::flex_slice_config*>(
      ::protocol::flex_slice_config::internal_default_instance());
  _flex_slice_config_default_instance_.get_mutable()->dl_ = const_cast< ::protocol::flex_slice_dl_ul_config*>(
      ::protocol::flex_slice_dl_ul_config::internal_default_instance());
  _flex_slice_config_default_instance_.get_mutable()->ul_ = const_cast< ::protocol::flex_slice_dl_ul_config*>(
      ::protocol::flex_slice_dl_ul_config::internal_default_instance());
  _flex_ue_config_default_instance_.get_mutable()->drx_config_ = const_cast< ::protocol::flex_drx_config*>(
      ::protocol::flex_drx_config::internal_default_instance());
  _flex_ue_config_default_instance_.get_mutable()->sps_config_ = const_cast< ::protocol::flex_sps_config*>(
      ::protocol::flex_sps_config::internal_default_instance());
  _flex_ue_config_default_instance_.get_mutable()->sr_config_ = const_cast< ::protocol::flex_sr_config*>(
      ::protocol::flex_sr_config::internal_default_instance());
  _flex_ue_config_default_instance_.get_mutable()->cqi_config_ = const_cast< ::protocol::flex_cqi_config*>(
      ::protocol::flex_cqi_config::internal_default_instance());
  _flex_ue_config_default_instance_.get_mutable()->capabilities_ = const_cast< ::protocol::flex_ue_capabilities*>(
      ::protocol::flex_ue_capabilities::internal_default_instance());
  _flex_ue_config_default_instance_.get_mutable()->info_ = const_cast< ::protocol::flex_measurement_info*>(
      ::protocol::flex_measurement_info::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025config_messages.proto\022\010protocol\032\023confi"
      "g_common.proto\"\351\010\n\020flex_cell_config\022\023\n\013p"
      "hy_cell_id\030\001 \001(\r\022\034\n\024pusch_hopping_offset"
      "\030\003 \001(\r\022\024\n\014hopping_mode\030\004 \001(\r\022\014\n\004n_sb\030\005 \001"
      "(\r\022\026\n\016phich_resource\030\006 \001(\r\022\026\n\016phich_dura"
      "tion\030\007 \001(\r\022\036\n\026init_nr_PDCCH_OFDM_sym\030\010 \001"
      "(\r\022+\n\tsi_config\030\t \001(\0132\030.protocol.flex_si"
      "_config\022\024\n\014dl_bandwidth\030\n \001(\r\022\024\n\014ul_band"
      "width\030\013 \001(\r\022\037\n\027ul_cyclic_prefix_length\030\r"
      " \001(\r\022\037\n\027dl_cyclic_prefix_length\030\016 \001(\r\022\033\n"
      "\023antenna_ports_count\030\017 \001(\r\022\023\n\013duplex_mod"
      "e\030\020 \001(\r\022\033\n\023subframe_assignment\030\021 \001(\r\022!\n\031"
      "special_subframe_patterns\030\022 \001(\r\022&\n\036mbsfn"
      "_subframe_config_rfperiod\030\023 \003(\r\022&\n\036mbsfn"
      "_subframe_config_rfoffset\030\024 \003(\r\022%\n\035mbsfn"
      "_subframe_config_sfalloc\030\025 \003(\r\022\032\n\022prach_"
      "config_index\030\026 \001(\r\022\031\n\021prach_freq_offset\030"
      "\027 \001(\r\022\037\n\027ra_response_window_size\030\030 \001(\r\022\'"
      "\n\037mac_contention_resolution_timer\030\031 \001(\r\022"
      "\027\n\017max_HARQ_Msg3Tx\030\032 \001(\r\022\022\n\nn1PUCCH_AN\030\033"
      " \001(\r\022\030\n\020deltaPUCCH_shift\030\034 \001(\r\022\017\n\007nRB_cq"
      "i\030\035 \001(\r\022\033\n\023srs_subframe_config\030\036 \001(\r\022\025\n\r"
      "srs_bw_config\030\037 \001(\r\022\026\n\016srs_mac_up_pts\030  "
      "\001(\r\022\024\n\014enable_64QAM\030! \001(\r\022\025\n\rcarrier_ind"
      "ex\030\" \001(\r\022\017\n\007dl_freq\030# \001(\r\022\017\n\007ul_freq\030$ \001"
      "(\r\022\022\n\neutra_band\030% \001(\r\022\026\n\016dl_pdsch_power"
      "\030& \001(\005\022\026\n\016ul_pusch_power\030\' \001(\005\022$\n\007plmn_i"
      "d\030( \003(\0132\023.protocol.flex_plmn\0221\n\014slice_co"
      "nfig\030* \001(\0132\033.protocol.flex_slice_config\022"
      "\031\n\021x2_ho_net_control\030+ \001(\010\"q\n\021flex_slice"
      "_config\022-\n\002dl\030\006 \001(\0132!.protocol.flex_slic"
      "e_dl_ul_config\022-\n\002ul\030\007 \001(\0132!.protocol.fl"
      "ex_slice_dl_ul_config\"\327\010\n\016flex_ue_config"
      "\022\014\n\004rnti\030\001 \001(\r\022-\n\ndrx_config\030\002 \001(\0132\031.pro"
      "tocol.flex_drx_config\022\034\n\024time_alignment_"
      "timer\030\003 \001(\r\022\037\n\027meas_gap_config_pattern\030\004"
      " \001(\r\022!\n\031meas_gap_config_sf_offset\030\005 \001(\r\022"
      "-\n\nsps_config\030\006 \001(\0132\031.protocol.flex_sps_"
      "config\022+\n\tsr_config\030\007 \001(\0132\030.protocol.fle"
      "x_sr_config\022-\n\ncqi_config\030\010 \001(\0132\031.protoc"
      "ol.flex_cqi_config\022\031\n\021transmission_mode\030"
      "\t \001(\r\022$\n\034ue_aggregated_max_bitrate_UL\030\n "
      "\001(\004\022$\n\034ue_aggregated_max_bitrate_DL\030\013 \001("
      "\004\0224\n\014capabilities\030\014 \001(\0132\036.protocol.flex_"
      "ue_capabilities\022\037\n\027ue_transmission_anten"
      "na\030\r \001(\r\022\024\n\014tti_bundling\030\016 \001(\r\022\023\n\013max_HA"
      "RQ_tx\030\017 \001(\r\022\035\n\025beta_offset_ACK_index\030\020 \001"
      "(\r\022\034\n\024beta_offset_RI_index\030\021 \001(\r\022\035\n\025beta"
      "_offset_CQI_index\030\022 \001(\r\022#\n\033ack_nack_simu"
      "ltaneous_trans\030\023 \001(\r\022!\n\031simultaneous_ack"
      "_nack_cqi\030\024 \001(\r\022\036\n\026aperiodic_cqi_rep_mod"
      "e\030\025 \001(\r\022\035\n\025tdd_ack_nack_feedback\030\026 \001(\r\022\""
      "\n\032ack_nack_repetition_factor\030\027 \001(\r\022\031\n\021ex"
      "tended_bsr_size\030\030 \001(\r\022\022\n\nca_support\030\031 \001("
      "\r\022#\n\033cross_carrier_sched_support\030\032 \001(\r\022\033"
      "\n\023pcell_carrier_index\030\033 \001(\r\0221\n\014scell_con"
      "fig\030\034 \003(\0132\033.protocol.flex_scell_config\022 "
      "\n\030scell_deactivation_timer\030\035 \001(\r\022\014\n\004imsi"
      "\030\036 \001(\004\022\023\n\013dl_slice_id\030\037 \001(\r\022\023\n\013ul_slice_"
      "id\030  \001(\r\022-\n\004info\030! \001(\0132\037.protocol.flex_m"
      "easurement_info\"N\n\021flex_lc_ue_config\022\014\n\004"
      "rnti\030\001 \001(\r\022+\n\tlc_config\030\002 \003(\0132\030.protocol"
      ".flex_lc_config\"\201\001\n\020flex_s1ap_config\022\017\n\007"
      "pending\030\001 \001(\r\022\021\n\tconnected\030\002 \001(\r\022\021\n\tenb_"
      "s1_ip\030\003 \001(\t\022\020\n\010enb_name\030\004 \001(\t\022$\n\003mme\030\005 \003"
      "(\0132\027.protocol.flex_s1ap_mme"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config_messages.proto", &protobuf_RegisterTypes);
  ::protocol::protobuf_config_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_config_5fmessages_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_cell_config::kPhyCellIdFieldNumber;
const int flex_cell_config::kPuschHoppingOffsetFieldNumber;
const int flex_cell_config::kHoppingModeFieldNumber;
const int flex_cell_config::kNSbFieldNumber;
const int flex_cell_config::kPhichResourceFieldNumber;
const int flex_cell_config::kPhichDurationFieldNumber;
const int flex_cell_config::kInitNrPDCCHOFDMSymFieldNumber;
const int flex_cell_config::kSiConfigFieldNumber;
const int flex_cell_config::kDlBandwidthFieldNumber;
const int flex_cell_config::kUlBandwidthFieldNumber;
const int flex_cell_config::kUlCyclicPrefixLengthFieldNumber;
const int flex_cell_config::kDlCyclicPrefixLengthFieldNumber;
const int flex_cell_config::kAntennaPortsCountFieldNumber;
const int flex_cell_config::kDuplexModeFieldNumber;
const int flex_cell_config::kSubframeAssignmentFieldNumber;
const int flex_cell_config::kSpecialSubframePatternsFieldNumber;
const int flex_cell_config::kMbsfnSubframeConfigRfperiodFieldNumber;
const int flex_cell_config::kMbsfnSubframeConfigRfoffsetFieldNumber;
const int flex_cell_config::kMbsfnSubframeConfigSfallocFieldNumber;
const int flex_cell_config::kPrachConfigIndexFieldNumber;
const int flex_cell_config::kPrachFreqOffsetFieldNumber;
const int flex_cell_config::kRaResponseWindowSizeFieldNumber;
const int flex_cell_config::kMacContentionResolutionTimerFieldNumber;
const int flex_cell_config::kMaxHARQMsg3TxFieldNumber;
const int flex_cell_config::kN1PUCCHANFieldNumber;
const int flex_cell_config::kDeltaPUCCHShiftFieldNumber;
const int flex_cell_config::kNRBCqiFieldNumber;
const int flex_cell_config::kSrsSubframeConfigFieldNumber;
const int flex_cell_config::kSrsBwConfigFieldNumber;
const int flex_cell_config::kSrsMacUpPtsFieldNumber;
const int flex_cell_config::kEnable64QAMFieldNumber;
const int flex_cell_config::kCarrierIndexFieldNumber;
const int flex_cell_config::kDlFreqFieldNumber;
const int flex_cell_config::kUlFreqFieldNumber;
const int flex_cell_config::kEutraBandFieldNumber;
const int flex_cell_config::kDlPdschPowerFieldNumber;
const int flex_cell_config::kUlPuschPowerFieldNumber;
const int flex_cell_config::kPlmnIdFieldNumber;
const int flex_cell_config::kSliceConfigFieldNumber;
const int flex_cell_config::kX2HoNetControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_cell_config::flex_cell_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_cell_config)
}
flex_cell_config::flex_cell_config(const flex_cell_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mbsfn_subframe_config_rfperiod_(from.mbsfn_subframe_config_rfperiod_),
      mbsfn_subframe_config_rfoffset_(from.mbsfn_subframe_config_rfoffset_),
      mbsfn_subframe_config_sfalloc_(from.mbsfn_subframe_config_sfalloc_),
      plmn_id_(from.plmn_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_si_config()) {
    si_config_ = new ::protocol::flex_si_config(*from.si_config_);
  } else {
    si_config_ = NULL;
  }
  if (from.has_slice_config()) {
    slice_config_ = new ::protocol::flex_slice_config(*from.slice_config_);
  } else {
    slice_config_ = NULL;
  }
  ::memcpy(&phy_cell_id_, &from.phy_cell_id_,
    reinterpret_cast<char*>(&x2_ho_net_control_) -
    reinterpret_cast<char*>(&phy_cell_id_) + sizeof(x2_ho_net_control_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_config)
}

void flex_cell_config::SharedCtor() {
  ::memset(&si_config_, 0, reinterpret_cast<char*>(&x2_ho_net_control_) -
    reinterpret_cast<char*>(&si_config_) + sizeof(x2_ho_net_control_));
  _cached_size_ = 0;
}

flex_cell_config::~flex_cell_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_config)
  SharedDtor();
}

void flex_cell_config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete si_config_;
  }
  if (this != internal_default_instance()) {
    delete slice_config_;
  }
}

void flex_cell_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_cell_config::descriptor() {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_cell_config& flex_cell_config::default_instance() {
  protobuf_config_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_cell_config* flex_cell_config::New(::google::protobuf::Arena* arena) const {
  flex_cell_config* n = new flex_cell_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_cell_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_config)
  mbsfn_subframe_config_rfperiod_.Clear();
  mbsfn_subframe_config_rfoffset_.Clear();
  mbsfn_subframe_config_sfalloc_.Clear();
  plmn_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_si_config()) {
      GOOGLE_DCHECK(si_config_ != NULL);
      si_config_->::protocol::flex_si_config::Clear();
    }
    if (has_slice_config()) {
      GOOGLE_DCHECK(slice_config_ != NULL);
      slice_config_->::protocol::flex_slice_config::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&phy_cell_id_, 0, reinterpret_cast<char*>(&phich_duration_) -
      reinterpret_cast<char*>(&phy_cell_id_) + sizeof(phich_duration_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&init_nr_pdcch_ofdm_sym_, 0, reinterpret_cast<char*>(&subframe_assignment_) -
      reinterpret_cast<char*>(&init_nr_pdcch_ofdm_sym_) + sizeof(subframe_assignment_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&special_subframe_patterns_, 0, reinterpret_cast<char*>(&deltapucch_shift_) -
      reinterpret_cast<char*>(&special_subframe_patterns_) + sizeof(deltapucch_shift_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&nrb_cqi_, 0, reinterpret_cast<char*>(&ul_freq_) -
      reinterpret_cast<char*>(&nrb_cqi_) + sizeof(ul_freq_));
  }
  if (_has_bits_[32 / 32] & 15u) {
    ::memset(&eutra_band_, 0, reinterpret_cast<char*>(&x2_ho_net_control_) -
      reinterpret_cast<char*>(&eutra_band_) + sizeof(x2_ho_net_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_cell_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_cell_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phy_cell_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_phy_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phy_cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pusch_hopping_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_pusch_hopping_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pusch_hopping_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hopping_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_hopping_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hopping_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_sb = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_n_sb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_sb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phich_resource = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_phich_resource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phich_resource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phich_duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_phich_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phich_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_init_nr_pdcch_ofdm_sym();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_nr_pdcch_ofdm_sym_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_si_config si_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_si_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dl_bandwidth = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_dl_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dl_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ul_bandwidth = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_ul_bandwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ul_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ul_cyclic_prefix_length = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_ul_cyclic_prefix_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ul_cyclic_prefix_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dl_cyclic_prefix_length = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_dl_cyclic_prefix_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dl_cyclic_prefix_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 antenna_ports_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_antenna_ports_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &antenna_ports_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duplex_mode = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_duplex_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duplex_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subframe_assignment = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_subframe_assignment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subframe_assignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 special_subframe_patterns = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_special_subframe_patterns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_subframe_patterns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 152u, input, this->mutable_mbsfn_subframe_config_rfperiod())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(154u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mbsfn_subframe_config_rfperiod())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160u, input, this->mutable_mbsfn_subframe_config_rfoffset())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(162u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mbsfn_subframe_config_rfoffset())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168u, input, this->mutable_mbsfn_subframe_config_sfalloc())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(170u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mbsfn_subframe_config_sfalloc())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prach_config_index = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_prach_config_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prach_config_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prach_freq_offset = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_prach_freq_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prach_freq_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ra_response_window_size = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_ra_response_window_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ra_response_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mac_contention_resolution_timer = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_mac_contention_resolution_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mac_contention_resolution_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_HARQ_Msg3Tx = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_max_harq_msg3tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_harq_msg3tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n1PUCCH_AN = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_n1pucch_an();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n1pucch_an_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deltaPUCCH_shift = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_deltapucch_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deltapucch_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nRB_cqi = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_nrb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nrb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 srs_subframe_config = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_srs_subframe_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srs_subframe_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 srs_bw_config = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_srs_bw_config();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srs_bw_config_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 srs_mac_up_pts = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_srs_mac_up_pts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srs_mac_up_pts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enable_64QAM = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_enable_64qam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enable_64qam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 carrier_index = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dl_freq = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_dl_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dl_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ul_freq = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_ul_freq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ul_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eutra_band = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_eutra_band();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eutra_band_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dl_pdsch_power = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_dl_pdsch_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dl_pdsch_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ul_pusch_power = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_ul_pusch_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ul_pusch_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_plmn plmn_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plmn_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_slice_config slice_config = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool x2_ho_net_control = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_x2_ho_net_control();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &x2_ho_net_control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_cell_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_cell_config)
  return false;
#undef DO_
}

void flex_cell_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_cell_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phy_cell_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phy_cell_id(), output);
  }

  // optional uint32 pusch_hopping_offset = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pusch_hopping_offset(), output);
  }

  // optional uint32 hopping_mode = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hopping_mode(), output);
  }

  // optional uint32 n_sb = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n_sb(), output);
  }

  // optional uint32 phich_resource = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->phich_resource(), output);
  }

  // optional uint32 phich_duration = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->phich_duration(), output);
  }

  // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->init_nr_pdcch_ofdm_sym(), output);
  }

  // optional .protocol.flex_si_config si_config = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->si_config_, output);
  }

  // optional uint32 dl_bandwidth = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dl_bandwidth(), output);
  }

  // optional uint32 ul_bandwidth = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ul_bandwidth(), output);
  }

  // optional uint32 ul_cyclic_prefix_length = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ul_cyclic_prefix_length(), output);
  }

  // optional uint32 dl_cyclic_prefix_length = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dl_cyclic_prefix_length(), output);
  }

  // optional uint32 antenna_ports_count = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->antenna_ports_count(), output);
  }

  // optional uint32 duplex_mode = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->duplex_mode(), output);
  }

  // optional uint32 subframe_assignment = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->subframe_assignment(), output);
  }

  // optional uint32 special_subframe_patterns = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->special_subframe_patterns(), output);
  }

  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  for (int i = 0, n = this->mbsfn_subframe_config_rfperiod_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      19, this->mbsfn_subframe_config_rfperiod(i), output);
  }

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  for (int i = 0, n = this->mbsfn_subframe_config_rfoffset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->mbsfn_subframe_config_rfoffset(i), output);
  }

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  for (int i = 0, n = this->mbsfn_subframe_config_sfalloc_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->mbsfn_subframe_config_sfalloc(i), output);
  }

  // optional uint32 prach_config_index = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->prach_config_index(), output);
  }

  // optional uint32 prach_freq_offset = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->prach_freq_offset(), output);
  }

  // optional uint32 ra_response_window_size = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->ra_response_window_size(), output);
  }

  // optional uint32 mac_contention_resolution_timer = 25;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->mac_contention_resolution_timer(), output);
  }

  // optional uint32 max_HARQ_Msg3Tx = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->max_harq_msg3tx(), output);
  }

  // optional uint32 n1PUCCH_AN = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->n1pucch_an(), output);
  }

  // optional uint32 deltaPUCCH_shift = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->deltapucch_shift(), output);
  }

  // optional uint32 nRB_cqi = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->nrb_cqi(), output);
  }

  // optional uint32 srs_subframe_config = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->srs_subframe_config(), output);
  }

  // optional uint32 srs_bw_config = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->srs_bw_config(), output);
  }

  // optional uint32 srs_mac_up_pts = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->srs_mac_up_pts(), output);
  }

  // optional uint32 enable_64QAM = 33;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->enable_64qam(), output);
  }

  // optional uint32 carrier_index = 34;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->carrier_index(), output);
  }

  // optional uint32 dl_freq = 35;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->dl_freq(), output);
  }

  // optional uint32 ul_freq = 36;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->ul_freq(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 eutra_band = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->eutra_band(), output);
  }

  // optional int32 dl_pdsch_power = 38;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->dl_pdsch_power(), output);
  }

  // optional int32 ul_pusch_power = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->ul_pusch_power(), output);
  }

  // repeated .protocol.flex_plmn plmn_id = 40;
  for (unsigned int i = 0, n = this->plmn_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->plmn_id(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_config slice_config = 42;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->slice_config_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool x2_ho_net_control = 43;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->x2_ho_net_control(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_cell_config)
}

::google::protobuf::uint8* flex_cell_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phy_cell_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phy_cell_id(), target);
  }

  // optional uint32 pusch_hopping_offset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pusch_hopping_offset(), target);
  }

  // optional uint32 hopping_mode = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hopping_mode(), target);
  }

  // optional uint32 n_sb = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n_sb(), target);
  }

  // optional uint32 phich_resource = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->phich_resource(), target);
  }

  // optional uint32 phich_duration = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->phich_duration(), target);
  }

  // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->init_nr_pdcch_ofdm_sym(), target);
  }

  // optional .protocol.flex_si_config si_config = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->si_config_, deterministic, target);
  }

  // optional uint32 dl_bandwidth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dl_bandwidth(), target);
  }

  // optional uint32 ul_bandwidth = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ul_bandwidth(), target);
  }

  // optional uint32 ul_cyclic_prefix_length = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ul_cyclic_prefix_length(), target);
  }

  // optional uint32 dl_cyclic_prefix_length = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dl_cyclic_prefix_length(), target);
  }

  // optional uint32 antenna_ports_count = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->antenna_ports_count(), target);
  }

  // optional uint32 duplex_mode = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->duplex_mode(), target);
  }

  // optional uint32 subframe_assignment = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->subframe_assignment(), target);
  }

  // optional uint32 special_subframe_patterns = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->special_subframe_patterns(), target);
  }

  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(19, this->mbsfn_subframe_config_rfperiod_, target);

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(20, this->mbsfn_subframe_config_rfoffset_, target);

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(21, this->mbsfn_subframe_config_sfalloc_, target);

  // optional uint32 prach_config_index = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->prach_config_index(), target);
  }

  // optional uint32 prach_freq_offset = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->prach_freq_offset(), target);
  }

  // optional uint32 ra_response_window_size = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->ra_response_window_size(), target);
  }

  // optional uint32 mac_contention_resolution_timer = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->mac_contention_resolution_timer(), target);
  }

  // optional uint32 max_HARQ_Msg3Tx = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->max_harq_msg3tx(), target);
  }

  // optional uint32 n1PUCCH_AN = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->n1pucch_an(), target);
  }

  // optional uint32 deltaPUCCH_shift = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->deltapucch_shift(), target);
  }

  // optional uint32 nRB_cqi = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->nrb_cqi(), target);
  }

  // optional uint32 srs_subframe_config = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->srs_subframe_config(), target);
  }

  // optional uint32 srs_bw_config = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->srs_bw_config(), target);
  }

  // optional uint32 srs_mac_up_pts = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->srs_mac_up_pts(), target);
  }

  // optional uint32 enable_64QAM = 33;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->enable_64qam(), target);
  }

  // optional uint32 carrier_index = 34;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->carrier_index(), target);
  }

  // optional uint32 dl_freq = 35;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->dl_freq(), target);
  }

  // optional uint32 ul_freq = 36;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->ul_freq(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 eutra_band = 37;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->eutra_band(), target);
  }

  // optional int32 dl_pdsch_power = 38;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->dl_pdsch_power(), target);
  }

  // optional int32 ul_pusch_power = 39;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->ul_pusch_power(), target);
  }

  // repeated .protocol.flex_plmn plmn_id = 40;
  for (unsigned int i = 0, n = this->plmn_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, this->plmn_id(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_config slice_config = 42;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->slice_config_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool x2_ho_net_control = 43;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->x2_ho_net_control(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_config)
  return target;
}

size_t flex_cell_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mbsfn_subframe_config_rfperiod_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->mbsfn_subframe_config_rfperiod_size());
    total_size += data_size;
  }

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mbsfn_subframe_config_rfoffset_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->mbsfn_subframe_config_rfoffset_size());
    total_size += data_size;
  }

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mbsfn_subframe_config_sfalloc_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->mbsfn_subframe_config_sfalloc_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_plmn plmn_id = 40;
  {
    unsigned int count = this->plmn_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plmn_id(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .protocol.flex_si_config si_config = 9;
    if (has_si_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->si_config_);
    }

    // optional .protocol.flex_slice_config slice_config = 42;
    if (has_slice_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->slice_config_);
    }

    // optional uint32 phy_cell_id = 1;
    if (has_phy_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phy_cell_id());
    }

    // optional uint32 pusch_hopping_offset = 3;
    if (has_pusch_hopping_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pusch_hopping_offset());
    }

    // optional uint32 hopping_mode = 4;
    if (has_hopping_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hopping_mode());
    }

    // optional uint32 n_sb = 5;
    if (has_n_sb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_sb());
    }

    // optional uint32 phich_resource = 6;
    if (has_phich_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phich_resource());
    }

    // optional uint32 phich_duration = 7;
    if (has_phich_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phich_duration());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
    if (has_init_nr_pdcch_ofdm_sym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->init_nr_pdcch_ofdm_sym());
    }

    // optional uint32 dl_bandwidth = 10;
    if (has_dl_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dl_bandwidth());
    }

    // optional uint32 ul_bandwidth = 11;
    if (has_ul_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ul_bandwidth());
    }

    // optional uint32 ul_cyclic_prefix_length = 13;
    if (has_ul_cyclic_prefix_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ul_cyclic_prefix_length());
    }

    // optional uint32 dl_cyclic_prefix_length = 14;
    if (has_dl_cyclic_prefix_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dl_cyclic_prefix_length());
    }

    // optional uint32 antenna_ports_count = 15;
    if (has_antenna_ports_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->antenna_ports_count());
    }

    // optional uint32 duplex_mode = 16;
    if (has_duplex_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duplex_mode());
    }

    // optional uint32 subframe_assignment = 17;
    if (has_subframe_assignment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subframe_assignment());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 special_subframe_patterns = 18;
    if (has_special_subframe_patterns()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_subframe_patterns());
    }

    // optional uint32 prach_config_index = 22;
    if (has_prach_config_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prach_config_index());
    }

    // optional uint32 prach_freq_offset = 23;
    if (has_prach_freq_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prach_freq_offset());
    }

    // optional uint32 ra_response_window_size = 24;
    if (has_ra_response_window_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ra_response_window_size());
    }

    // optional uint32 mac_contention_resolution_timer = 25;
    if (has_mac_contention_resolution_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mac_contention_resolution_timer());
    }

    // optional uint32 max_HARQ_Msg3Tx = 26;
    if (has_max_harq_msg3tx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_harq_msg3tx());
    }

    // optional uint32 n1PUCCH_AN = 27;
    if (has_n1pucch_an()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n1pucch_an());
    }

    // optional uint32 deltaPUCCH_shift = 28;
    if (has_deltapucch_shift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deltapucch_shift());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 nRB_cqi = 29;
    if (has_nrb_cqi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nrb_cqi());
    }

    // optional uint32 srs_subframe_config = 30;
    if (has_srs_subframe_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srs_subframe_config());
    }

    // optional uint32 srs_bw_config = 31;
    if (has_srs_bw_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srs_bw_config());
    }

    // optional uint32 srs_mac_up_pts = 32;
    if (has_srs_mac_up_pts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srs_mac_up_pts());
    }

    // optional uint32 enable_64QAM = 33;
    if (has_enable_64qam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable_64qam());
    }

    // optional uint32 carrier_index = 34;
    if (has_carrier_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

    // optional uint32 dl_freq = 35;
    if (has_dl_freq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dl_freq());
    }

    // optional uint32 ul_freq = 36;
    if (has_ul_freq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ul_freq());
    }

  }
  if (_has_bits_[32 / 32] & 15u) {
    // optional uint32 eutra_band = 37;
    if (has_eutra_band()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eutra_band());
    }

    // optional int32 dl_pdsch_power = 38;
    if (has_dl_pdsch_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dl_pdsch_power());
    }

    // optional int32 ul_pusch_power = 39;
    if (has_ul_pusch_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ul_pusch_power());
    }

    // optional bool x2_ho_net_control = 43;
    if (has_x2_ho_net_control()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_cell_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_cell_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_config)
    MergeFrom(*source);
  }
}

void flex_cell_config::MergeFrom(const flex_cell_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mbsfn_subframe_config_rfperiod_.MergeFrom(from.mbsfn_subframe_config_rfperiod_);
  mbsfn_subframe_config_rfoffset_.MergeFrom(from.mbsfn_subframe_config_rfoffset_);
  mbsfn_subframe_config_sfalloc_.MergeFrom(from.mbsfn_subframe_config_sfalloc_);
  plmn_id_.MergeFrom(from.plmn_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_si_config()->::protocol::flex_si_config::MergeFrom(from.si_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_slice_config()->::protocol::flex_slice_config::MergeFrom(from.slice_config());
    }
    if (cached_has_bits & 0x00000004u) {
      phy_cell_id_ = from.phy_cell_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      pusch_hopping_offset_ = from.pusch_hopping_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      hopping_mode_ = from.hopping_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      n_sb_ = from.n_sb_;
    }
    if (cached_has_bits & 0x00000040u) {
      phich_resource_ = from.phich_resource_;
    }
    if (cached_has_bits & 0x00000080u) {
      phich_duration_ = from.phich_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      init_nr_pdcch_ofdm_sym_ = from.init_nr_pdcch_ofdm_sym_;
    }
    if (cached_has_bits & 0x00000200u) {
      dl_bandwidth_ = from.dl_bandwidth_;
    }
    if (cached_has_bits & 0x00000400u) {
      ul_bandwidth_ = from.ul_bandwidth_;
    }
    if (cached_has_bits & 0x00000800u) {
      ul_cyclic_prefix_length_ = from.ul_cyclic_prefix_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      dl_cyclic_prefix_length_ = from.dl_cyclic_prefix_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      antenna_ports_count_ = from.antenna_ports_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      duplex_mode_ = from.duplex_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      subframe_assignment_ = from.subframe_assignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      special_subframe_patterns_ = from.special_subframe_patterns_;
    }
    if (cached_has_bits & 0x00020000u) {
      prach_config_index_ = from.prach_config_index_;
    }
    if (cached_has_bits & 0x00040000u) {
      prach_freq_offset_ = from.prach_freq_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      ra_response_window_size_ = from.ra_response_window_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      mac_contention_resolution_timer_ = from.mac_contention_resolution_timer_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_harq_msg3tx_ = from.max_harq_msg3tx_;
    }
    if (cached_has_bits & 0x00400000u) {
      n1pucch_an_ = from.n1pucch_an_;
    }
    if (cached_has_bits & 0x00800000u) {
      deltapucch_shift_ = from.deltapucch_shift_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      nrb_cqi_ = from.nrb_cqi_;
    }
    if (cached_has_bits & 0x02000000u) {
      srs_subframe_config_ = from.srs_subframe_config_;
    }
    if (cached_has_bits & 0x04000000u) {
      srs_bw_config_ = from.srs_bw_config_;
    }
    if (cached_has_bits & 0x08000000u) {
      srs_mac_up_pts_ = from.srs_mac_up_pts_;
    }
    if (cached_has_bits & 0x10000000u) {
      enable_64qam_ = from.enable_64qam_;
    }
    if (cached_has_bits & 0x20000000u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x40000000u) {
      dl_freq_ = from.dl_freq_;
    }
    if (cached_has_bits & 0x80000000u) {
      ul_freq_ = from.ul_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      eutra_band_ = from.eutra_band_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_pdsch_power_ = from.dl_pdsch_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      ul_pusch_power_ = from.ul_pusch_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      x2_ho_net_control_ = from.x2_ho_net_control_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void flex_cell_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_config::CopyFrom(const flex_cell_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_config::IsInitialized() const {
  return true;
}

void flex_cell_config::Swap(flex_cell_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_cell_config::InternalSwap(flex_cell_config* other) {
  mbsfn_subframe_config_rfperiod_.InternalSwap(&other->mbsfn_subframe_config_rfperiod_);
  mbsfn_subframe_config_rfoffset_.InternalSwap(&other->mbsfn_subframe_config_rfoffset_);
  mbsfn_subframe_config_sfalloc_.InternalSwap(&other->mbsfn_subframe_config_sfalloc_);
  plmn_id_.InternalSwap(&other->plmn_id_);
  std::swap(si_config_, other->si_config_);
  std::swap(slice_config_, other->slice_config_);
  std::swap(phy_cell_id_, other->phy_cell_id_);
  std::swap(pusch_hopping_offset_, other->pusch_hopping_offset_);
  std::swap(hopping_mode_, other->hopping_mode_);
  std::swap(n_sb_, other->n_sb_);
  std::swap(phich_resource_, other->phich_resource_);
  std::swap(phich_duration_, other->phich_duration_);
  std::swap(init_nr_pdcch_ofdm_sym_, other->init_nr_pdcch_ofdm_sym_);
  std::swap(dl_bandwidth_, other->dl_bandwidth_);
  std::swap(ul_bandwidth_, other->ul_bandwidth_);
  std::swap(ul_cyclic_prefix_length_, other->ul_cyclic_prefix_length_);
  std::swap(dl_cyclic_prefix_length_, other->dl_cyclic_prefix_length_);
  std::swap(antenna_ports_count_, other->antenna_ports_count_);
  std::swap(duplex_mode_, other->duplex_mode_);
  std::swap(subframe_assignment_, other->subframe_assignment_);
  std::swap(special_subframe_patterns_, other->special_subframe_patterns_);
  std::swap(prach_config_index_, other->prach_config_index_);
  std::swap(prach_freq_offset_, other->prach_freq_offset_);
  std::swap(ra_response_window_size_, other->ra_response_window_size_);
  std::swap(mac_contention_resolution_timer_, other->mac_contention_resolution_timer_);
  std::swap(max_harq_msg3tx_, other->max_harq_msg3tx_);
  std::swap(n1pucch_an_, other->n1pucch_an_);
  std::swap(deltapucch_shift_, other->deltapucch_shift_);
  std::swap(nrb_cqi_, other->nrb_cqi_);
  std::swap(srs_subframe_config_, other->srs_subframe_config_);
  std::swap(srs_bw_config_, other->srs_bw_config_);
  std::swap(srs_mac_up_pts_, other->srs_mac_up_pts_);
  std::swap(enable_64qam_, other->enable_64qam_);
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(dl_freq_, other->dl_freq_);
  std::swap(ul_freq_, other->ul_freq_);
  std::swap(eutra_band_, other->eutra_band_);
  std::swap(dl_pdsch_power_, other->dl_pdsch_power_);
  std::swap(ul_pusch_power_, other->ul_pusch_power_);
  std::swap(x2_ho_net_control_, other->x2_ho_net_control_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_cell_config::GetMetadata() const {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_cell_config

// optional uint32 phy_cell_id = 1;
bool flex_cell_config::has_phy_cell_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_cell_config::set_has_phy_cell_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_cell_config::clear_has_phy_cell_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_cell_config::clear_phy_cell_id() {
  phy_cell_id_ = 0u;
  clear_has_phy_cell_id();
}
::google::protobuf::uint32 flex_cell_config::phy_cell_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phy_cell_id)
  return phy_cell_id_;
}
void flex_cell_config::set_phy_cell_id(::google::protobuf::uint32 value) {
  set_has_phy_cell_id();
  phy_cell_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phy_cell_id)
}

// optional uint32 pusch_hopping_offset = 3;
bool flex_cell_config::has_pusch_hopping_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_cell_config::set_has_pusch_hopping_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_cell_config::clear_has_pusch_hopping_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_cell_config::clear_pusch_hopping_offset() {
  pusch_hopping_offset_ = 0u;
  clear_has_pusch_hopping_offset();
}
::google::protobuf::uint32 flex_cell_config::pusch_hopping_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.pusch_hopping_offset)
  return pusch_hopping_offset_;
}
void flex_cell_config::set_pusch_hopping_offset(::google::protobuf::uint32 value) {
  set_has_pusch_hopping_offset();
  pusch_hopping_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.pusch_hopping_offset)
}

// optional uint32 hopping_mode = 4;
bool flex_cell_config::has_hopping_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_cell_config::set_has_hopping_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_cell_config::clear_has_hopping_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_cell_config::clear_hopping_mode() {
  hopping_mode_ = 0u;
  clear_has_hopping_mode();
}
::google::protobuf::uint32 flex_cell_config::hopping_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.hopping_mode)
  return hopping_mode_;
}
void flex_cell_config::set_hopping_mode(::google::protobuf::uint32 value) {
  set_has_hopping_mode();
  hopping_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.hopping_mode)
}

// optional uint32 n_sb = 5;
bool flex_cell_config::has_n_sb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_cell_config::set_has_n_sb() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_cell_config::clear_has_n_sb() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_cell_config::clear_n_sb() {
  n_sb_ = 0u;
  clear_has_n_sb();
}
::google::protobuf::uint32 flex_cell_config::n_sb() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.n_sb)
  return n_sb_;
}
void flex_cell_config::set_n_sb(::google::protobuf::uint32 value) {
  set_has_n_sb();
  n_sb_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.n_sb)
}

// optional uint32 phich_resource = 6;
bool flex_cell_config::has_phich_resource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_cell_config::set_has_phich_resource() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_cell_config::clear_has_phich_resource() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_cell_config::clear_phich_resource() {
  phich_resource_ = 0u;
  clear_has_phich_resource();
}
::google::protobuf::uint32 flex_cell_config::phich_resource() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phich_resource)
  return phich_resource_;
}
void flex_cell_config::set_phich_resource(::google::protobuf::uint32 value) {
  set_has_phich_resource();
  phich_resource_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phich_resource)
}

// optional uint32 phich_duration = 7;
bool flex_cell_config::has_phich_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_cell_config::set_has_phich_duration() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_cell_config::clear_has_phich_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_cell_config::clear_phich_duration() {
  phich_duration_ = 0u;
  clear_has_phich_duration();
}
::google::protobuf::uint32 flex_cell_config::phich_duration() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phich_duration)
  return phich_duration_;
}
void flex_cell_config::set_phich_duration(::google::protobuf::uint32 value) {
  set_has_phich_duration();
  phich_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phich_duration)
}

// optional uint32 init_nr_PDCCH_OFDM_sym = 8;
bool flex_cell_config::has_init_nr_pdcch_ofdm_sym() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_cell_config::set_has_init_nr_pdcch_ofdm_sym() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_cell_config::clear_has_init_nr_pdcch_ofdm_sym() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_cell_config::clear_init_nr_pdcch_ofdm_sym() {
  init_nr_pdcch_ofdm_sym_ = 0u;
  clear_has_init_nr_pdcch_ofdm_sym();
}
::google::protobuf::uint32 flex_cell_config::init_nr_pdcch_ofdm_sym() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.init_nr_PDCCH_OFDM_sym)
  return init_nr_pdcch_ofdm_sym_;
}
void flex_cell_config::set_init_nr_pdcch_ofdm_sym(::google::protobuf::uint32 value) {
  set_has_init_nr_pdcch_ofdm_sym();
  init_nr_pdcch_ofdm_sym_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.init_nr_PDCCH_OFDM_sym)
}

// optional .protocol.flex_si_config si_config = 9;
bool flex_cell_config::has_si_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_cell_config::set_has_si_config() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_cell_config::clear_has_si_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_cell_config::clear_si_config() {
  if (si_config_ != NULL) si_config_->::protocol::flex_si_config::Clear();
  clear_has_si_config();
}
const ::protocol::flex_si_config& flex_cell_config::si_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.si_config)
  return si_config_ != NULL ? *si_config_
                         : *::protocol::flex_si_config::internal_default_instance();
}
::protocol::flex_si_config* flex_cell_config::mutable_si_config() {
  set_has_si_config();
  if (si_config_ == NULL) {
    si_config_ = new ::protocol::flex_si_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.si_config)
  return si_config_;
}
::protocol::flex_si_config* flex_cell_config::release_si_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_config.si_config)
  clear_has_si_config();
  ::protocol::flex_si_config* temp = si_config_;
  si_config_ = NULL;
  return temp;
}
void flex_cell_config::set_allocated_si_config(::protocol::flex_si_config* si_config) {
  delete si_config_;
  si_config_ = si_config;
  if (si_config) {
    set_has_si_config();
  } else {
    clear_has_si_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_config.si_config)
}

// optional uint32 dl_bandwidth = 10;
bool flex_cell_config::has_dl_bandwidth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_cell_config::set_has_dl_bandwidth() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_cell_config::clear_has_dl_bandwidth() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_cell_config::clear_dl_bandwidth() {
  dl_bandwidth_ = 0u;
  clear_has_dl_bandwidth();
}
::google::protobuf::uint32 flex_cell_config::dl_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_bandwidth)
  return dl_bandwidth_;
}
void flex_cell_config::set_dl_bandwidth(::google::protobuf::uint32 value) {
  set_has_dl_bandwidth();
  dl_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_bandwidth)
}

// optional uint32 ul_bandwidth = 11;
bool flex_cell_config::has_ul_bandwidth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_cell_config::set_has_ul_bandwidth() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_cell_config::clear_has_ul_bandwidth() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_cell_config::clear_ul_bandwidth() {
  ul_bandwidth_ = 0u;
  clear_has_ul_bandwidth();
}
::google::protobuf::uint32 flex_cell_config::ul_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_bandwidth)
  return ul_bandwidth_;
}
void flex_cell_config::set_ul_bandwidth(::google::protobuf::uint32 value) {
  set_has_ul_bandwidth();
  ul_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_bandwidth)
}

// optional uint32 ul_cyclic_prefix_length = 13;
bool flex_cell_config::has_ul_cyclic_prefix_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void flex_cell_config::set_has_ul_cyclic_prefix_length() {
  _has_bits_[0] |= 0x00000800u;
}
void flex_cell_config::clear_has_ul_cyclic_prefix_length() {
  _has_bits_[0] &= ~0x00000800u;
}
void flex_cell_config::clear_ul_cyclic_prefix_length() {
  ul_cyclic_prefix_length_ = 0u;
  clear_has_ul_cyclic_prefix_length();
}
::google::protobuf::uint32 flex_cell_config::ul_cyclic_prefix_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_cyclic_prefix_length)
  return ul_cyclic_prefix_length_;
}
void flex_cell_config::set_ul_cyclic_prefix_length(::google::protobuf::uint32 value) {
  set_has_ul_cyclic_prefix_length();
  ul_cyclic_prefix_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_cyclic_prefix_length)
}

// optional uint32 dl_cyclic_prefix_length = 14;
bool flex_cell_config::has_dl_cyclic_prefix_length() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void flex_cell_config::set_has_dl_cyclic_prefix_length() {
  _has_bits_[0] |= 0x00001000u;
}
void flex_cell_config::clear_has_dl_cyclic_prefix_length() {
  _has_bits_[0] &= ~0x00001000u;
}
void flex_cell_config::clear_dl_cyclic_prefix_length() {
  dl_cyclic_prefix_length_ = 0u;
  clear_has_dl_cyclic_prefix_length();
}
::google::protobuf::uint32 flex_cell_config::dl_cyclic_prefix_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_cyclic_prefix_length)
  return dl_cyclic_prefix_length_;
}
void flex_cell_config::set_dl_cyclic_prefix_length(::google::protobuf::uint32 value) {
  set_has_dl_cyclic_prefix_length();
  dl_cyclic_prefix_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_cyclic_prefix_length)
}

// optional uint32 antenna_ports_count = 15;
bool flex_cell_config::has_antenna_ports_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void flex_cell_config::set_has_antenna_ports_count() {
  _has_bits_[0] |= 0x00002000u;
}
void flex_cell_config::clear_has_antenna_ports_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void flex_cell_config::clear_antenna_ports_count() {
  antenna_ports_count_ = 0u;
  clear_has_antenna_ports_count();
}
::google::protobuf::uint32 flex_cell_config::antenna_ports_count() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.antenna_ports_count)
  return antenna_ports_count_;
}
void flex_cell_config::set_antenna_ports_count(::google::protobuf::uint32 value) {
  set_has_antenna_ports_count();
  antenna_ports_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.antenna_ports_count)
}

// optional uint32 duplex_mode = 16;
bool flex_cell_config::has_duplex_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void flex_cell_config::set_has_duplex_mode() {
  _has_bits_[0] |= 0x00004000u;
}
void flex_cell_config::clear_has_duplex_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
void flex_cell_config::clear_duplex_mode() {
  duplex_mode_ = 0u;
  clear_has_duplex_mode();
}
::google::protobuf::uint32 flex_cell_config::duplex_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.duplex_mode)
  return duplex_mode_;
}
void flex_cell_config::set_duplex_mode(::google::protobuf::uint32 value) {
  set_has_duplex_mode();
  duplex_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.duplex_mode)
}

// optional uint32 subframe_assignment = 17;
bool flex_cell_config::has_subframe_assignment() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void flex_cell_config::set_has_subframe_assignment() {
  _has_bits_[0] |= 0x00008000u;
}
void flex_cell_config::clear_has_subframe_assignment() {
  _has_bits_[0] &= ~0x00008000u;
}
void flex_cell_config::clear_subframe_assignment() {
  subframe_assignment_ = 0u;
  clear_has_subframe_assignment();
}
::google::protobuf::uint32 flex_cell_config::subframe_assignment() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.subframe_assignment)
  return subframe_assignment_;
}
void flex_cell_config::set_subframe_assignment(::google::protobuf::uint32 value) {
  set_has_subframe_assignment();
  subframe_assignment_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.subframe_assignment)
}

// optional uint32 special_subframe_patterns = 18;
bool flex_cell_config::has_special_subframe_patterns() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void flex_cell_config::set_has_special_subframe_patterns() {
  _has_bits_[0] |= 0x00010000u;
}
void flex_cell_config::clear_has_special_subframe_patterns() {
  _has_bits_[0] &= ~0x00010000u;
}
void flex_cell_config::clear_special_subframe_patterns() {
  special_subframe_patterns_ = 0u;
  clear_has_special_subframe_patterns();
}
::google::protobuf::uint32 flex_cell_config::special_subframe_patterns() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.special_subframe_patterns)
  return special_subframe_patterns_;
}
void flex_cell_config::set_special_subframe_patterns(::google::protobuf::uint32 value) {
  set_has_special_subframe_patterns();
  special_subframe_patterns_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.special_subframe_patterns)
}

// repeated uint32 mbsfn_subframe_config_rfperiod = 19;
int flex_cell_config::mbsfn_subframe_config_rfperiod_size() const {
  return mbsfn_subframe_config_rfperiod_.size();
}
void flex_cell_config::clear_mbsfn_subframe_config_rfperiod() {
  mbsfn_subframe_config_rfperiod_.Clear();
}
::google::protobuf::uint32 flex_cell_config::mbsfn_subframe_config_rfperiod(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return mbsfn_subframe_config_rfperiod_.Get(index);
}
void flex_cell_config::set_mbsfn_subframe_config_rfperiod(int index, ::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfperiod_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
}
void flex_cell_config::add_mbsfn_subframe_config_rfperiod(::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfperiod_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_config::mbsfn_subframe_config_rfperiod() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return mbsfn_subframe_config_rfperiod_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_rfperiod() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return &mbsfn_subframe_config_rfperiod_;
}

// repeated uint32 mbsfn_subframe_config_rfoffset = 20;
int flex_cell_config::mbsfn_subframe_config_rfoffset_size() const {
  return mbsfn_subframe_config_rfoffset_.size();
}
void flex_cell_config::clear_mbsfn_subframe_config_rfoffset() {
  mbsfn_subframe_config_rfoffset_.Clear();
}
::google::protobuf::uint32 flex_cell_config::mbsfn_subframe_config_rfoffset(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return mbsfn_subframe_config_rfoffset_.Get(index);
}
void flex_cell_config::set_mbsfn_subframe_config_rfoffset(int index, ::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfoffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
}
void flex_cell_config::add_mbsfn_subframe_config_rfoffset(::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfoffset_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_config::mbsfn_subframe_config_rfoffset() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return mbsfn_subframe_config_rfoffset_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_rfoffset() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return &mbsfn_subframe_config_rfoffset_;
}

// repeated uint32 mbsfn_subframe_config_sfalloc = 21;
int flex_cell_config::mbsfn_subframe_config_sfalloc_size() const {
  return mbsfn_subframe_config_sfalloc_.size();
}
void flex_cell_config::clear_mbsfn_subframe_config_sfalloc() {
  mbsfn_subframe_config_sfalloc_.Clear();
}
::google::protobuf::uint32 flex_cell_config::mbsfn_subframe_config_sfalloc(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return mbsfn_subframe_config_sfalloc_.Get(index);
}
void flex_cell_config::set_mbsfn_subframe_config_sfalloc(int index, ::google::protobuf::uint32 value) {
  mbsfn_subframe_config_sfalloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
}
void flex_cell_config::add_mbsfn_subframe_config_sfalloc(::google::protobuf::uint32 value) {
  mbsfn_subframe_config_sfalloc_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_config::mbsfn_subframe_config_sfalloc() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return mbsfn_subframe_config_sfalloc_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_sfalloc() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return &mbsfn_subframe_config_sfalloc_;
}

// optional uint32 prach_config_index = 22;
bool flex_cell_config::has_prach_config_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void flex_cell_config::set_has_prach_config_index() {
  _has_bits_[0] |= 0x00020000u;
}
void flex_cell_config::clear_has_prach_config_index() {
  _has_bits_[0] &= ~0x00020000u;
}
void flex_cell_config::clear_prach_config_index() {
  prach_config_index_ = 0u;
  clear_has_prach_config_index();
}
::google::protobuf::uint32 flex_cell_config::prach_config_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.prach_config_index)
  return prach_config_index_;
}
void flex_cell_config::set_prach_config_index(::google::protobuf::uint32 value) {
  set_has_prach_config_index();
  prach_config_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.prach_config_index)
}

// optional uint32 prach_freq_offset = 23;
bool flex_cell_config::has_prach_freq_offset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void flex_cell_config::set_has_prach_freq_offset() {
  _has_bits_[0] |= 0x00040000u;
}
void flex_cell_config::clear_has_prach_freq_offset() {
  _has_bits_[0] &= ~0x00040000u;
}
void flex_cell_config::clear_prach_freq_offset() {
  prach_freq_offset_ = 0u;
  clear_has_prach_freq_offset();
}
::google::protobuf::uint32 flex_cell_config::prach_freq_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.prach_freq_offset)
  return prach_freq_offset_;
}
void flex_cell_config::set_prach_freq_offset(::google::protobuf::uint32 value) {
  set_has_prach_freq_offset();
  prach_freq_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.prach_freq_offset)
}

// optional uint32 ra_response_window_size = 24;
bool flex_cell_config::has_ra_response_window_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void flex_cell_config::set_has_ra_response_window_size() {
  _has_bits_[0] |= 0x00080000u;
}
void flex_cell_config::clear_has_ra_response_window_size() {
  _has_bits_[0] &= ~0x00080000u;
}
void flex_cell_config::clear_ra_response_window_size() {
  ra_response_window_size_ = 0u;
  clear_has_ra_response_window_size();
}
::google::protobuf::uint32 flex_cell_config::ra_response_window_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ra_response_window_size)
  return ra_response_window_size_;
}
void flex_cell_config::set_ra_response_window_size(::google::protobuf::uint32 value) {
  set_has_ra_response_window_size();
  ra_response_window_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ra_response_window_size)
}

// optional uint32 mac_contention_resolution_timer = 25;
bool flex_cell_config::has_mac_contention_resolution_timer() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void flex_cell_config::set_has_mac_contention_resolution_timer() {
  _has_bits_[0] |= 0x00100000u;
}
void flex_cell_config::clear_has_mac_contention_resolution_timer() {
  _has_bits_[0] &= ~0x00100000u;
}
void flex_cell_config::clear_mac_contention_resolution_timer() {
  mac_contention_resolution_timer_ = 0u;
  clear_has_mac_contention_resolution_timer();
}
::google::protobuf::uint32 flex_cell_config::mac_contention_resolution_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mac_contention_resolution_timer)
  return mac_contention_resolution_timer_;
}
void flex_cell_config::set_mac_contention_resolution_timer(::google::protobuf::uint32 value) {
  set_has_mac_contention_resolution_timer();
  mac_contention_resolution_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mac_contention_resolution_timer)
}

// optional uint32 max_HARQ_Msg3Tx = 26;
bool flex_cell_config::has_max_harq_msg3tx() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void flex_cell_config::set_has_max_harq_msg3tx() {
  _has_bits_[0] |= 0x00200000u;
}
void flex_cell_config::clear_has_max_harq_msg3tx() {
  _has_bits_[0] &= ~0x00200000u;
}
void flex_cell_config::clear_max_harq_msg3tx() {
  max_harq_msg3tx_ = 0u;
  clear_has_max_harq_msg3tx();
}
::google::protobuf::uint32 flex_cell_config::max_harq_msg3tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.max_HARQ_Msg3Tx)
  return max_harq_msg3tx_;
}
void flex_cell_config::set_max_harq_msg3tx(::google::protobuf::uint32 value) {
  set_has_max_harq_msg3tx();
  max_harq_msg3tx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.max_HARQ_Msg3Tx)
}

// optional uint32 n1PUCCH_AN = 27;
bool flex_cell_config::has_n1pucch_an() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void flex_cell_config::set_has_n1pucch_an() {
  _has_bits_[0] |= 0x00400000u;
}
void flex_cell_config::clear_has_n1pucch_an() {
  _has_bits_[0] &= ~0x00400000u;
}
void flex_cell_config::clear_n1pucch_an() {
  n1pucch_an_ = 0u;
  clear_has_n1pucch_an();
}
::google::protobuf::uint32 flex_cell_config::n1pucch_an() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.n1PUCCH_AN)
  return n1pucch_an_;
}
void flex_cell_config::set_n1pucch_an(::google::protobuf::uint32 value) {
  set_has_n1pucch_an();
  n1pucch_an_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.n1PUCCH_AN)
}

// optional uint32 deltaPUCCH_shift = 28;
bool flex_cell_config::has_deltapucch_shift() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void flex_cell_config::set_has_deltapucch_shift() {
  _has_bits_[0] |= 0x00800000u;
}
void flex_cell_config::clear_has_deltapucch_shift() {
  _has_bits_[0] &= ~0x00800000u;
}
void flex_cell_config::clear_deltapucch_shift() {
  deltapucch_shift_ = 0u;
  clear_has_deltapucch_shift();
}
::google::protobuf::uint32 flex_cell_config::deltapucch_shift() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.deltaPUCCH_shift)
  return deltapucch_shift_;
}
void flex_cell_config::set_deltapucch_shift(::google::protobuf::uint32 value) {
  set_has_deltapucch_shift();
  deltapucch_shift_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.deltaPUCCH_shift)
}

// optional uint32 nRB_cqi = 29;
bool flex_cell_config::has_nrb_cqi() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void flex_cell_config::set_has_nrb_cqi() {
  _has_bits_[0] |= 0x01000000u;
}
void flex_cell_config::clear_has_nrb_cqi() {
  _has_bits_[0] &= ~0x01000000u;
}
void flex_cell_config::clear_nrb_cqi() {
  nrb_cqi_ = 0u;
  clear_has_nrb_cqi();
}
::google::protobuf::uint32 flex_cell_config::nrb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.nRB_cqi)
  return nrb_cqi_;
}
void flex_cell_config::set_nrb_cqi(::google::protobuf::uint32 value) {
  set_has_nrb_cqi();
  nrb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.nRB_cqi)
}

// optional uint32 srs_subframe_config = 30;
bool flex_cell_config::has_srs_subframe_config() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void flex_cell_config::set_has_srs_subframe_config() {
  _has_bits_[0] |= 0x02000000u;
}
void flex_cell_config::clear_has_srs_subframe_config() {
  _has_bits_[0] &= ~0x02000000u;
}
void flex_cell_config::clear_srs_subframe_config() {
  srs_subframe_config_ = 0u;
  clear_has_srs_subframe_config();
}
::google::protobuf::uint32 flex_cell_config::srs_subframe_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_subframe_config)
  return srs_subframe_config_;
}
void flex_cell_config::set_srs_subframe_config(::google::protobuf::uint32 value) {
  set_has_srs_subframe_config();
  srs_subframe_config_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_subframe_config)
}

// optional uint32 srs_bw_config = 31;
bool flex_cell_config::has_srs_bw_config() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void flex_cell_config::set_has_srs_bw_config() {
  _has_bits_[0] |= 0x04000000u;
}
void flex_cell_config::clear_has_srs_bw_config() {
  _has_bits_[0] &= ~0x04000000u;
}
void flex_cell_config::clear_srs_bw_config() {
  srs_bw_config_ = 0u;
  clear_has_srs_bw_config();
}
::google::protobuf::uint32 flex_cell_config::srs_bw_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_bw_config)
  return srs_bw_config_;
}
void flex_cell_config::set_srs_bw_config(::google::protobuf::uint32 value) {
  set_has_srs_bw_config();
  srs_bw_config_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_bw_config)
}

// optional uint32 srs_mac_up_pts = 32;
bool flex_cell_config::has_srs_mac_up_pts() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void flex_cell_config::set_has_srs_mac_up_pts() {
  _has_bits_[0] |= 0x08000000u;
}
void flex_cell_config::clear_has_srs_mac_up_pts() {
  _has_bits_[0] &= ~0x08000000u;
}
void flex_cell_config::clear_srs_mac_up_pts() {
  srs_mac_up_pts_ = 0u;
  clear_has_srs_mac_up_pts();
}
::google::protobuf::uint32 flex_cell_config::srs_mac_up_pts() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_mac_up_pts)
  return srs_mac_up_pts_;
}
void flex_cell_config::set_srs_mac_up_pts(::google::protobuf::uint32 value) {
  set_has_srs_mac_up_pts();
  srs_mac_up_pts_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_mac_up_pts)
}

// optional uint32 enable_64QAM = 33;
bool flex_cell_config::has_enable_64qam() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void flex_cell_config::set_has_enable_64qam() {
  _has_bits_[0] |= 0x10000000u;
}
void flex_cell_config::clear_has_enable_64qam() {
  _has_bits_[0] &= ~0x10000000u;
}
void flex_cell_config::clear_enable_64qam() {
  enable_64qam_ = 0u;
  clear_has_enable_64qam();
}
::google::protobuf::uint32 flex_cell_config::enable_64qam() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.enable_64QAM)
  return enable_64qam_;
}
void flex_cell_config::set_enable_64qam(::google::protobuf::uint32 value) {
  set_has_enable_64qam();
  enable_64qam_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.enable_64QAM)
}

// optional uint32 carrier_index = 34;
bool flex_cell_config::has_carrier_index() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void flex_cell_config::set_has_carrier_index() {
  _has_bits_[0] |= 0x20000000u;
}
void flex_cell_config::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x20000000u;
}
void flex_cell_config::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_cell_config::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.carrier_index)
  return carrier_index_;
}
void flex_cell_config::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.carrier_index)
}

// optional uint32 dl_freq = 35;
bool flex_cell_config::has_dl_freq() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void flex_cell_config::set_has_dl_freq() {
  _has_bits_[0] |= 0x40000000u;
}
void flex_cell_config::clear_has_dl_freq() {
  _has_bits_[0] &= ~0x40000000u;
}
void flex_cell_config::clear_dl_freq() {
  dl_freq_ = 0u;
  clear_has_dl_freq();
}
::google::protobuf::uint32 flex_cell_config::dl_freq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_freq)
  return dl_freq_;
}
void flex_cell_config::set_dl_freq(::google::protobuf::uint32 value) {
  set_has_dl_freq();
  dl_freq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_freq)
}

// optional uint32 ul_freq = 36;
bool flex_cell_config::has_ul_freq() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void flex_cell_config::set_has_ul_freq() {
  _has_bits_[0] |= 0x80000000u;
}
void flex_cell_config::clear_has_ul_freq() {
  _has_bits_[0] &= ~0x80000000u;
}
void flex_cell_config::clear_ul_freq() {
  ul_freq_ = 0u;
  clear_has_ul_freq();
}
::google::protobuf::uint32 flex_cell_config::ul_freq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_freq)
  return ul_freq_;
}
void flex_cell_config::set_ul_freq(::google::protobuf::uint32 value) {
  set_has_ul_freq();
  ul_freq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_freq)
}

// optional uint32 eutra_band = 37;
bool flex_cell_config::has_eutra_band() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void flex_cell_config::set_has_eutra_band() {
  _has_bits_[1] |= 0x00000001u;
}
void flex_cell_config::clear_has_eutra_band() {
  _has_bits_[1] &= ~0x00000001u;
}
void flex_cell_config::clear_eutra_band() {
  eutra_band_ = 0u;
  clear_has_eutra_band();
}
::google::protobuf::uint32 flex_cell_config::eutra_band() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.eutra_band)
  return eutra_band_;
}
void flex_cell_config::set_eutra_band(::google::protobuf::uint32 value) {
  set_has_eutra_band();
  eutra_band_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.eutra_band)
}

// optional int32 dl_pdsch_power = 38;
bool flex_cell_config::has_dl_pdsch_power() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void flex_cell_config::set_has_dl_pdsch_power() {
  _has_bits_[1] |= 0x00000002u;
}
void flex_cell_config::clear_has_dl_pdsch_power() {
  _has_bits_[1] &= ~0x00000002u;
}
void flex_cell_config::clear_dl_pdsch_power() {
  dl_pdsch_power_ = 0;
  clear_has_dl_pdsch_power();
}
::google::protobuf::int32 flex_cell_config::dl_pdsch_power() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_pdsch_power)
  return dl_pdsch_power_;
}
void flex_cell_config::set_dl_pdsch_power(::google::protobuf::int32 value) {
  set_has_dl_pdsch_power();
  dl_pdsch_power_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_pdsch_power)
}

// optional int32 ul_pusch_power = 39;
bool flex_cell_config::has_ul_pusch_power() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void flex_cell_config::set_has_ul_pusch_power() {
  _has_bits_[1] |= 0x00000004u;
}
void flex_cell_config::clear_has_ul_pusch_power() {
  _has_bits_[1] &= ~0x00000004u;
}
void flex_cell_config::clear_ul_pusch_power() {
  ul_pusch_power_ = 0;
  clear_has_ul_pusch_power();
}
::google::protobuf::int32 flex_cell_config::ul_pusch_power() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_pusch_power)
  return ul_pusch_power_;
}
void flex_cell_config::set_ul_pusch_power(::google::protobuf::int32 value) {
  set_has_ul_pusch_power();
  ul_pusch_power_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_pusch_power)
}

// repeated .protocol.flex_plmn plmn_id = 40;
int flex_cell_config::plmn_id_size() const {
  return plmn_id_.size();
}
void flex_cell_config::clear_plmn_id() {
  plmn_id_.Clear();
}
const ::protocol::flex_plmn& flex_cell_config::plmn_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Get(index);
}
::protocol::flex_plmn* flex_cell_config::mutable_plmn_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Mutable(index);
}
::protocol::flex_plmn* flex_cell_config::add_plmn_id() {
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >*
flex_cell_config::mutable_plmn_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.plmn_id)
  return &plmn_id_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >&
flex_cell_config::plmn_id() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.plmn_id)
  return plmn_id_;
}

// optional .protocol.flex_slice_config slice_config = 42;
bool flex_cell_config::has_slice_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_cell_config::set_has_slice_config() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_cell_config::clear_has_slice_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_cell_config::clear_slice_config() {
  if (slice_config_ != NULL) slice_config_->::protocol::flex_slice_config::Clear();
  clear_has_slice_config();
}
const ::protocol::flex_slice_config& flex_cell_config::slice_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.slice_config)
  return slice_config_ != NULL ? *slice_config_
                         : *::protocol::flex_slice_config::internal_default_instance();
}
::protocol::flex_slice_config* flex_cell_config::mutable_slice_config() {
  set_has_slice_config();
  if (slice_config_ == NULL) {
    slice_config_ = new ::protocol::flex_slice_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.slice_config)
  return slice_config_;
}
::protocol::flex_slice_config* flex_cell_config::release_slice_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_config.slice_config)
  clear_has_slice_config();
  ::protocol::flex_slice_config* temp = slice_config_;
  slice_config_ = NULL;
  return temp;
}
void flex_cell_config::set_allocated_slice_config(::protocol::flex_slice_config* slice_config) {
  delete slice_config_;
  slice_config_ = slice_config;
  if (slice_config) {
    set_has_slice_config();
  } else {
    clear_has_slice_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_config.slice_config)
}

// optional bool x2_ho_net_control = 43;
bool flex_cell_config::has_x2_ho_net_control() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void flex_cell_config::set_has_x2_ho_net_control() {
  _has_bits_[1] |= 0x00000008u;
}
void flex_cell_config::clear_has_x2_ho_net_control() {
  _has_bits_[1] &= ~0x00000008u;
}
void flex_cell_config::clear_x2_ho_net_control() {
  x2_ho_net_control_ = false;
  clear_has_x2_ho_net_control();
}
bool flex_cell_config::x2_ho_net_control() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.x2_ho_net_control)
  return x2_ho_net_control_;
}
void flex_cell_config::set_x2_ho_net_control(bool value) {
  set_has_x2_ho_net_control();
  x2_ho_net_control_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.x2_ho_net_control)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_slice_config::kDlFieldNumber;
const int flex_slice_config::kUlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_slice_config::flex_slice_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_slice_config)
}
flex_slice_config::flex_slice_config(const flex_slice_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dl()) {
    dl_ = new ::protocol::flex_slice_dl_ul_config(*from.dl_);
  } else {
    dl_ = NULL;
  }
  if (from.has_ul()) {
    ul_ = new ::protocol::flex_slice_dl_ul_config(*from.ul_);
  } else {
    ul_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice_config)
}

void flex_slice_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dl_, 0, reinterpret_cast<char*>(&ul_) -
    reinterpret_cast<char*>(&dl_) + sizeof(ul_));
}

flex_slice_config::~flex_slice_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice_config)
  SharedDtor();
}

void flex_slice_config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dl_;
  }
  if (this != internal_default_instance()) {
    delete ul_;
  }
}

void flex_slice_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_slice_config::descriptor() {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_slice_config& flex_slice_config::default_instance() {
  protobuf_config_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_slice_config* flex_slice_config::New(::google::protobuf::Arena* arena) const {
  flex_slice_config* n = new flex_slice_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_slice_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice_config)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_dl()) {
      GOOGLE_DCHECK(dl_ != NULL);
      dl_->::protocol::flex_slice_dl_ul_config::Clear();
    }
    if (has_ul()) {
      GOOGLE_DCHECK(ul_ != NULL);
      ul_->::protocol::flex_slice_dl_ul_config::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_slice_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_slice_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_slice_dl_ul_config dl = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_slice_dl_ul_config ul = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ul()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_slice_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_slice_config)
  return false;
#undef DO_
}

void flex_slice_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_slice_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_dl_ul_config dl = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->dl_, output);
  }

  // optional .protocol.flex_slice_dl_ul_config ul = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ul_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_slice_config)
}

::google::protobuf::uint8* flex_slice_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_dl_ul_config dl = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->dl_, deterministic, target);
  }

  // optional .protocol.flex_slice_dl_ul_config ul = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ul_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice_config)
  return target;
}

size_t flex_slice_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_slice_dl_ul_config dl = 6;
    if (has_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dl_);
    }

    // optional .protocol.flex_slice_dl_ul_config ul = 7;
    if (has_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ul_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_slice_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_slice_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice_config)
    MergeFrom(*source);
  }
}

void flex_slice_config::MergeFrom(const flex_slice_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dl()->::protocol::flex_slice_dl_ul_config::MergeFrom(from.dl());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ul()->::protocol::flex_slice_dl_ul_config::MergeFrom(from.ul());
    }
  }
}

void flex_slice_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice_config::CopyFrom(const flex_slice_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice_config::IsInitialized() const {
  return true;
}

void flex_slice_config::Swap(flex_slice_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_slice_config::InternalSwap(flex_slice_config* other) {
  std::swap(dl_, other->dl_);
  std::swap(ul_, other->ul_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_slice_config::GetMetadata() const {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_slice_config

// optional .protocol.flex_slice_dl_ul_config dl = 6;
bool flex_slice_config::has_dl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_slice_config::set_has_dl() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_slice_config::clear_has_dl() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_slice_config::clear_dl() {
  if (dl_ != NULL) dl_->::protocol::flex_slice_dl_ul_config::Clear();
  clear_has_dl();
}
const ::protocol::flex_slice_dl_ul_config& flex_slice_config::dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_config.dl)
  return dl_ != NULL ? *dl_
                         : *::protocol::flex_slice_dl_ul_config::internal_default_instance();
}
::protocol::flex_slice_dl_ul_config* flex_slice_config::mutable_dl() {
  set_has_dl();
  if (dl_ == NULL) {
    dl_ = new ::protocol::flex_slice_dl_ul_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_config.dl)
  return dl_;
}
::protocol::flex_slice_dl_ul_config* flex_slice_config::release_dl() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_config.dl)
  clear_has_dl();
  ::protocol::flex_slice_dl_ul_config* temp = dl_;
  dl_ = NULL;
  return temp;
}
void flex_slice_config::set_allocated_dl(::protocol::flex_slice_dl_ul_config* dl) {
  delete dl_;
  dl_ = dl;
  if (dl) {
    set_has_dl();
  } else {
    clear_has_dl();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_config.dl)
}

// optional .protocol.flex_slice_dl_ul_config ul = 7;
bool flex_slice_config::has_ul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_slice_config::set_has_ul() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_slice_config::clear_has_ul() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_slice_config::clear_ul() {
  if (ul_ != NULL) ul_->::protocol::flex_slice_dl_ul_config::Clear();
  clear_has_ul();
}
const ::protocol::flex_slice_dl_ul_config& flex_slice_config::ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_config.ul)
  return ul_ != NULL ? *ul_
                         : *::protocol::flex_slice_dl_ul_config::internal_default_instance();
}
::protocol::flex_slice_dl_ul_config* flex_slice_config::mutable_ul() {
  set_has_ul();
  if (ul_ == NULL) {
    ul_ = new ::protocol::flex_slice_dl_ul_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_config.ul)
  return ul_;
}
::protocol::flex_slice_dl_ul_config* flex_slice_config::release_ul() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_config.ul)
  clear_has_ul();
  ::protocol::flex_slice_dl_ul_config* temp = ul_;
  ul_ = NULL;
  return temp;
}
void flex_slice_config::set_allocated_ul(::protocol::flex_slice_dl_ul_config* ul) {
  delete ul_;
  ul_ = ul;
  if (ul) {
    set_has_ul();
  } else {
    clear_has_ul();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_config.ul)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ue_config::kRntiFieldNumber;
const int flex_ue_config::kDrxConfigFieldNumber;
const int flex_ue_config::kTimeAlignmentTimerFieldNumber;
const int flex_ue_config::kMeasGapConfigPatternFieldNumber;
const int flex_ue_config::kMeasGapConfigSfOffsetFieldNumber;
const int flex_ue_config::kSpsConfigFieldNumber;
const int flex_ue_config::kSrConfigFieldNumber;
const int flex_ue_config::kCqiConfigFieldNumber;
const int flex_ue_config::kTransmissionModeFieldNumber;
const int flex_ue_config::kUeAggregatedMaxBitrateULFieldNumber;
const int flex_ue_config::kUeAggregatedMaxBitrateDLFieldNumber;
const int flex_ue_config::kCapabilitiesFieldNumber;
const int flex_ue_config::kUeTransmissionAntennaFieldNumber;
const int flex_ue_config::kTtiBundlingFieldNumber;
const int flex_ue_config::kMaxHARQTxFieldNumber;
const int flex_ue_config::kBetaOffsetACKIndexFieldNumber;
const int flex_ue_config::kBetaOffsetRIIndexFieldNumber;
const int flex_ue_config::kBetaOffsetCQIIndexFieldNumber;
const int flex_ue_config::kAckNackSimultaneousTransFieldNumber;
const int flex_ue_config::kSimultaneousAckNackCqiFieldNumber;
const int flex_ue_config::kAperiodicCqiRepModeFieldNumber;
const int flex_ue_config::kTddAckNackFeedbackFieldNumber;
const int flex_ue_config::kAckNackRepetitionFactorFieldNumber;
const int flex_ue_config::kExtendedBsrSizeFieldNumber;
const int flex_ue_config::kCaSupportFieldNumber;
const int flex_ue_config::kCrossCarrierSchedSupportFieldNumber;
const int flex_ue_config::kPcellCarrierIndexFieldNumber;
const int flex_ue_config::kScellConfigFieldNumber;
const int flex_ue_config::kScellDeactivationTimerFieldNumber;
const int flex_ue_config::kImsiFieldNumber;
const int flex_ue_config::kDlSliceIdFieldNumber;
const int flex_ue_config::kUlSliceIdFieldNumber;
const int flex_ue_config::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ue_config::flex_ue_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ue_config)
}
flex_ue_config::flex_ue_config(const flex_ue_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      scell_config_(from.scell_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drx_config()) {
    drx_config_ = new ::protocol::flex_drx_config(*from.drx_config_);
  } else {
    drx_config_ = NULL;
  }
  if (from.has_sps_config()) {
    sps_config_ = new ::protocol::flex_sps_config(*from.sps_config_);
  } else {
    sps_config_ = NULL;
  }
  if (from.has_sr_config()) {
    sr_config_ = new ::protocol::flex_sr_config(*from.sr_config_);
  } else {
    sr_config_ = NULL;
  }
  if (from.has_cqi_config()) {
    cqi_config_ = new ::protocol::flex_cqi_config(*from.cqi_config_);
  } else {
    cqi_config_ = NULL;
  }
  if (from.has_capabilities()) {
    capabilities_ = new ::protocol::flex_ue_capabilities(*from.capabilities_);
  } else {
    capabilities_ = NULL;
  }
  if (from.has_info()) {
    info_ = new ::protocol::flex_measurement_info(*from.info_);
  } else {
    info_ = NULL;
  }
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&ul_slice_id_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(ul_slice_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_config)
}

void flex_ue_config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&drx_config_, 0, reinterpret_cast<char*>(&ul_slice_id_) -
    reinterpret_cast<char*>(&drx_config_) + sizeof(ul_slice_id_));
}

flex_ue_config::~flex_ue_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_config)
  SharedDtor();
}

void flex_ue_config::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drx_config_;
  }
  if (this != internal_default_instance()) {
    delete sps_config_;
  }
  if (this != internal_default_instance()) {
    delete sr_config_;
  }
  if (this != internal_default_instance()) {
    delete cqi_config_;
  }
  if (this != internal_default_instance()) {
    delete capabilities_;
  }
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void flex_ue_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ue_config::descriptor() {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ue_config& flex_ue_config::default_instance() {
  protobuf_config_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ue_config* flex_ue_config::New(::google::protobuf::Arena* arena) const {
  flex_ue_config* n = new flex_ue_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ue_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_config)
  scell_config_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_drx_config()) {
      GOOGLE_DCHECK(drx_config_ != NULL);
      drx_config_->::protocol::flex_drx_config::Clear();
    }
    if (has_sps_config()) {
      GOOGLE_DCHECK(sps_config_ != NULL);
      sps_config_->::protocol::flex_sps_config::Clear();
    }
    if (has_sr_config()) {
      GOOGLE_DCHECK(sr_config_ != NULL);
      sr_config_->::protocol::flex_sr_config::Clear();
    }
    if (has_cqi_config()) {
      GOOGLE_DCHECK(cqi_config_ != NULL);
      cqi_config_->::protocol::flex_cqi_config::Clear();
    }
    if (has_capabilities()) {
      GOOGLE_DCHECK(capabilities_ != NULL);
      capabilities_->::protocol::flex_ue_capabilities::Clear();
    }
    if (has_info()) {
      GOOGLE_DCHECK(info_ != NULL);
      info_->::protocol::flex_measurement_info::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&time_alignment_timer_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(time_alignment_timer_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&meas_gap_config_pattern_, 0, reinterpret_cast<char*>(&max_harq_tx_) -
      reinterpret_cast<char*>(&meas_gap_config_pattern_) + sizeof(max_harq_tx_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&beta_offset_ack_index_, 0, reinterpret_cast<char*>(&ack_nack_repetition_factor_) -
      reinterpret_cast<char*>(&beta_offset_ack_index_) + sizeof(ack_nack_repetition_factor_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&extended_bsr_size_, 0, reinterpret_cast<char*>(&ul_slice_id_) -
      reinterpret_cast<char*>(&extended_bsr_size_) + sizeof(ul_slice_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ue_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ue_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_drx_config drx_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drx_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_alignment_timer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_alignment_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_alignment_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meas_gap_config_pattern = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_meas_gap_config_pattern();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meas_gap_config_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meas_gap_config_sf_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_meas_gap_config_sf_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meas_gap_config_sf_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_sps_config sps_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sps_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_sr_config sr_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sr_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_cqi_config cqi_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cqi_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 transmission_mode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_transmission_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transmission_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ue_aggregated_max_bitrate_UL = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_ue_aggregated_max_bitrate_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ue_aggregated_max_bitrate_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ue_aggregated_max_bitrate_DL = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_ue_aggregated_max_bitrate_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ue_aggregated_max_bitrate_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ue_capabilities capabilities = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capabilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ue_transmission_antenna = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_ue_transmission_antenna();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ue_transmission_antenna_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tti_bundling = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_tti_bundling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tti_bundling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_HARQ_tx = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_max_harq_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_harq_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 beta_offset_ACK_index = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_beta_offset_ack_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beta_offset_ack_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 beta_offset_RI_index = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_beta_offset_ri_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beta_offset_ri_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 beta_offset_CQI_index = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_beta_offset_cqi_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beta_offset_cqi_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_nack_simultaneous_trans = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_ack_nack_simultaneous_trans();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_nack_simultaneous_trans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 simultaneous_ack_nack_cqi = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_simultaneous_ack_nack_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &simultaneous_ack_nack_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 aperiodic_cqi_rep_mode = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_aperiodic_cqi_rep_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aperiodic_cqi_rep_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tdd_ack_nack_feedback = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_tdd_ack_nack_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tdd_ack_nack_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ack_nack_repetition_factor = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_ack_nack_repetition_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_nack_repetition_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extended_bsr_size = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_extended_bsr_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_bsr_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ca_support = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_ca_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ca_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cross_carrier_sched_support = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_cross_carrier_sched_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cross_carrier_sched_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pcell_carrier_index = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_pcell_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pcell_carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_scell_config scell_config = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scell_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scell_deactivation_timer = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_scell_deactivation_timer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scell_deactivation_timer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 imsi = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_imsi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &imsi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dl_slice_id = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_dl_slice_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dl_slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ul_slice_id = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_ul_slice_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ul_slice_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_measurement_info info = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ue_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ue_config)
  return false;
#undef DO_
}

void flex_ue_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ue_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional .protocol.flex_drx_config drx_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->drx_config_, output);
  }

  // optional uint32 time_alignment_timer = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_alignment_timer(), output);
  }

  // optional uint32 meas_gap_config_pattern = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->meas_gap_config_pattern(), output);
  }

  // optional uint32 meas_gap_config_sf_offset = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->meas_gap_config_sf_offset(), output);
  }

  // optional .protocol.flex_sps_config sps_config = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->sps_config_, output);
  }

  // optional .protocol.flex_sr_config sr_config = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->sr_config_, output);
  }

  // optional .protocol.flex_cqi_config cqi_config = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cqi_config_, output);
  }

  // optional uint32 transmission_mode = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->transmission_mode(), output);
  }

  // optional uint64 ue_aggregated_max_bitrate_UL = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ue_aggregated_max_bitrate_ul(), output);
  }

  // optional uint64 ue_aggregated_max_bitrate_DL = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->ue_aggregated_max_bitrate_dl(), output);
  }

  // optional .protocol.flex_ue_capabilities capabilities = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->capabilities_, output);
  }

  // optional uint32 ue_transmission_antenna = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ue_transmission_antenna(), output);
  }

  // optional uint32 tti_bundling = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tti_bundling(), output);
  }

  // optional uint32 max_HARQ_tx = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->max_harq_tx(), output);
  }

  // optional uint32 beta_offset_ACK_index = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->beta_offset_ack_index(), output);
  }

  // optional uint32 beta_offset_RI_index = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->beta_offset_ri_index(), output);
  }

  // optional uint32 beta_offset_CQI_index = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->beta_offset_cqi_index(), output);
  }

  // optional uint32 ack_nack_simultaneous_trans = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->ack_nack_simultaneous_trans(), output);
  }

  // optional uint32 simultaneous_ack_nack_cqi = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->simultaneous_ack_nack_cqi(), output);
  }

  // optional uint32 aperiodic_cqi_rep_mode = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->aperiodic_cqi_rep_mode(), output);
  }

  // optional uint32 tdd_ack_nack_feedback = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->tdd_ack_nack_feedback(), output);
  }

  // optional uint32 ack_nack_repetition_factor = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->ack_nack_repetition_factor(), output);
  }

  // optional uint32 extended_bsr_size = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->extended_bsr_size(), output);
  }

  // optional uint32 ca_support = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->ca_support(), output);
  }

  // optional uint32 cross_carrier_sched_support = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->cross_carrier_sched_support(), output);
  }

  // optional uint32 pcell_carrier_index = 27;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->pcell_carrier_index(), output);
  }

  // repeated .protocol.flex_scell_config scell_config = 28;
  for (unsigned int i = 0, n = this->scell_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->scell_config(i), output);
  }

  // optional uint32 scell_deactivation_timer = 29;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->scell_deactivation_timer(), output);
  }

  // optional uint64 imsi = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->imsi(), output);
  }

  // optional uint32 dl_slice_id = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->dl_slice_id(), output);
  }

  // optional uint32 ul_slice_id = 32;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->ul_slice_id(), output);
  }

  // optional .protocol.flex_measurement_info info = 33;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ue_config)
}

::google::protobuf::uint8* flex_ue_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional .protocol.flex_drx_config drx_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->drx_config_, deterministic, target);
  }

  // optional uint32 time_alignment_timer = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_alignment_timer(), target);
  }

  // optional uint32 meas_gap_config_pattern = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->meas_gap_config_pattern(), target);
  }

  // optional uint32 meas_gap_config_sf_offset = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->meas_gap_config_sf_offset(), target);
  }

  // optional .protocol.flex_sps_config sps_config = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->sps_config_, deterministic, target);
  }

  // optional .protocol.flex_sr_config sr_config = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->sr_config_, deterministic, target);
  }

  // optional .protocol.flex_cqi_config cqi_config = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->cqi_config_, deterministic, target);
  }

  // optional uint32 transmission_mode = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->transmission_mode(), target);
  }

  // optional uint64 ue_aggregated_max_bitrate_UL = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ue_aggregated_max_bitrate_ul(), target);
  }

  // optional uint64 ue_aggregated_max_bitrate_DL = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->ue_aggregated_max_bitrate_dl(), target);
  }

  // optional .protocol.flex_ue_capabilities capabilities = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->capabilities_, deterministic, target);
  }

  // optional uint32 ue_transmission_antenna = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->ue_transmission_antenna(), target);
  }

  // optional uint32 tti_bundling = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tti_bundling(), target);
  }

  // optional uint32 max_HARQ_tx = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->max_harq_tx(), target);
  }

  // optional uint32 beta_offset_ACK_index = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->beta_offset_ack_index(), target);
  }

  // optional uint32 beta_offset_RI_index = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->beta_offset_ri_index(), target);
  }

  // optional uint32 beta_offset_CQI_index = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->beta_offset_cqi_index(), target);
  }

  // optional uint32 ack_nack_simultaneous_trans = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->ack_nack_simultaneous_trans(), target);
  }

  // optional uint32 simultaneous_ack_nack_cqi = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->simultaneous_ack_nack_cqi(), target);
  }

  // optional uint32 aperiodic_cqi_rep_mode = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->aperiodic_cqi_rep_mode(), target);
  }

  // optional uint32 tdd_ack_nack_feedback = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->tdd_ack_nack_feedback(), target);
  }

  // optional uint32 ack_nack_repetition_factor = 23;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->ack_nack_repetition_factor(), target);
  }

  // optional uint32 extended_bsr_size = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->extended_bsr_size(), target);
  }

  // optional uint32 ca_support = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->ca_support(), target);
  }

  // optional uint32 cross_carrier_sched_support = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->cross_carrier_sched_support(), target);
  }

  // optional uint32 pcell_carrier_index = 27;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->pcell_carrier_index(), target);
  }

  // repeated .protocol.flex_scell_config scell_config = 28;
  for (unsigned int i = 0, n = this->scell_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, this->scell_config(i), deterministic, target);
  }

  // optional uint32 scell_deactivation_timer = 29;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->scell_deactivation_timer(), target);
  }

  // optional uint64 imsi = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->imsi(), target);
  }

  // optional uint32 dl_slice_id = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->dl_slice_id(), target);
  }

  // optional uint32 ul_slice_id = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->ul_slice_id(), target);
  }

  // optional .protocol.flex_measurement_info info = 33;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_config)
  return target;
}

size_t flex_ue_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_scell_config scell_config = 28;
  {
    unsigned int count = this->scell_config_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scell_config(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .protocol.flex_drx_config drx_config = 2;
    if (has_drx_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->drx_config_);
    }

    // optional .protocol.flex_sps_config sps_config = 6;
    if (has_sps_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sps_config_);
    }

    // optional .protocol.flex_sr_config sr_config = 7;
    if (has_sr_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sr_config_);
    }

    // optional .protocol.flex_cqi_config cqi_config = 8;
    if (has_cqi_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cqi_config_);
    }

    // optional .protocol.flex_ue_capabilities capabilities = 12;
    if (has_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->capabilities_);
    }

    // optional .protocol.flex_measurement_info info = 33;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->info_);
    }

    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 time_alignment_timer = 3;
    if (has_time_alignment_timer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_alignment_timer());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 meas_gap_config_pattern = 4;
    if (has_meas_gap_config_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meas_gap_config_pattern());
    }

    // optional uint32 meas_gap_config_sf_offset = 5;
    if (has_meas_gap_config_sf_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meas_gap_config_sf_offset());
    }

    // optional uint64 ue_aggregated_max_bitrate_UL = 10;
    if (has_ue_aggregated_max_bitrate_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ue_aggregated_max_bitrate_ul());
    }

    // optional uint64 ue_aggregated_max_bitrate_DL = 11;
    if (has_ue_aggregated_max_bitrate_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ue_aggregated_max_bitrate_dl());
    }

    // optional uint32 transmission_mode = 9;
    if (has_transmission_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transmission_mode());
    }

    // optional uint32 ue_transmission_antenna = 13;
    if (has_ue_transmission_antenna()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ue_transmission_antenna());
    }

    // optional uint32 tti_bundling = 14;
    if (has_tti_bundling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tti_bundling());
    }

    // optional uint32 max_HARQ_tx = 15;
    if (has_max_harq_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_harq_tx());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 beta_offset_ACK_index = 16;
    if (has_beta_offset_ack_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beta_offset_ack_index());
    }

    // optional uint32 beta_offset_RI_index = 17;
    if (has_beta_offset_ri_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beta_offset_ri_index());
    }

    // optional uint32 beta_offset_CQI_index = 18;
    if (has_beta_offset_cqi_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beta_offset_cqi_index());
    }

    // optional uint32 ack_nack_simultaneous_trans = 19;
    if (has_ack_nack_simultaneous_trans()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_nack_simultaneous_trans());
    }

    // optional uint32 simultaneous_ack_nack_cqi = 20;
    if (has_simultaneous_ack_nack_cqi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->simultaneous_ack_nack_cqi());
    }

    // optional uint32 aperiodic_cqi_rep_mode = 21;
    if (has_aperiodic_cqi_rep_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aperiodic_cqi_rep_mode());
    }

    // optional uint32 tdd_ack_nack_feedback = 22;
    if (has_tdd_ack_nack_feedback()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tdd_ack_nack_feedback());
    }

    // optional uint32 ack_nack_repetition_factor = 23;
    if (has_ack_nack_repetition_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ack_nack_repetition_factor());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 extended_bsr_size = 24;
    if (has_extended_bsr_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_bsr_size());
    }

    // optional uint32 ca_support = 25;
    if (has_ca_support()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ca_support());
    }

    // optional uint32 cross_carrier_sched_support = 26;
    if (has_cross_carrier_sched_support()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cross_carrier_sched_support());
    }

    // optional uint32 pcell_carrier_index = 27;
    if (has_pcell_carrier_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pcell_carrier_index());
    }

    // optional uint64 imsi = 30;
    if (has_imsi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->imsi());
    }

    // optional uint32 scell_deactivation_timer = 29;
    if (has_scell_deactivation_timer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scell_deactivation_timer());
    }

    // optional uint32 dl_slice_id = 31;
    if (has_dl_slice_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dl_slice_id());
    }

    // optional uint32 ul_slice_id = 32;
    if (has_ul_slice_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ul_slice_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ue_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ue_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_config)
    MergeFrom(*source);
  }
}

void flex_ue_config::MergeFrom(const flex_ue_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scell_config_.MergeFrom(from.scell_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_drx_config()->::protocol::flex_drx_config::MergeFrom(from.drx_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sps_config()->::protocol::flex_sps_config::MergeFrom(from.sps_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sr_config()->::protocol::flex_sr_config::MergeFrom(from.sr_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cqi_config()->::protocol::flex_cqi_config::MergeFrom(from.cqi_config());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_capabilities()->::protocol::flex_ue_capabilities::MergeFrom(from.capabilities());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_info()->::protocol::flex_measurement_info::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000040u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_alignment_timer_ = from.time_alignment_timer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      meas_gap_config_pattern_ = from.meas_gap_config_pattern_;
    }
    if (cached_has_bits & 0x00000200u) {
      meas_gap_config_sf_offset_ = from.meas_gap_config_sf_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      ue_aggregated_max_bitrate_ul_ = from.ue_aggregated_max_bitrate_ul_;
    }
    if (cached_has_bits & 0x00000800u) {
      ue_aggregated_max_bitrate_dl_ = from.ue_aggregated_max_bitrate_dl_;
    }
    if (cached_has_bits & 0x00001000u) {
      transmission_mode_ = from.transmission_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      ue_transmission_antenna_ = from.ue_transmission_antenna_;
    }
    if (cached_has_bits & 0x00004000u) {
      tti_bundling_ = from.tti_bundling_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_harq_tx_ = from.max_harq_tx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      beta_offset_ack_index_ = from.beta_offset_ack_index_;
    }
    if (cached_has_bits & 0x00020000u) {
      beta_offset_ri_index_ = from.beta_offset_ri_index_;
    }
    if (cached_has_bits & 0x00040000u) {
      beta_offset_cqi_index_ = from.beta_offset_cqi_index_;
    }
    if (cached_has_bits & 0x00080000u) {
      ack_nack_simultaneous_trans_ = from.ack_nack_simultaneous_trans_;
    }
    if (cached_has_bits & 0x00100000u) {
      simultaneous_ack_nack_cqi_ = from.simultaneous_ack_nack_cqi_;
    }
    if (cached_has_bits & 0x00200000u) {
      aperiodic_cqi_rep_mode_ = from.aperiodic_cqi_rep_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      tdd_ack_nack_feedback_ = from.tdd_ack_nack_feedback_;
    }
    if (cached_has_bits & 0x00800000u) {
      ack_nack_repetition_factor_ = from.ack_nack_repetition_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      extended_bsr_size_ = from.extended_bsr_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      ca_support_ = from.ca_support_;
    }
    if (cached_has_bits & 0x04000000u) {
      cross_carrier_sched_support_ = from.cross_carrier_sched_support_;
    }
    if (cached_has_bits & 0x08000000u) {
      pcell_carrier_index_ = from.pcell_carrier_index_;
    }
    if (cached_has_bits & 0x10000000u) {
      imsi_ = from.imsi_;
    }
    if (cached_has_bits & 0x20000000u) {
      scell_deactivation_timer_ = from.scell_deactivation_timer_;
    }
    if (cached_has_bits & 0x40000000u) {
      dl_slice_id_ = from.dl_slice_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      ul_slice_id_ = from.ul_slice_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_config::CopyFrom(const flex_ue_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_config::IsInitialized() const {
  return true;
}

void flex_ue_config::Swap(flex_ue_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ue_config::InternalSwap(flex_ue_config* other) {
  scell_config_.InternalSwap(&other->scell_config_);
  std::swap(drx_config_, other->drx_config_);
  std::swap(sps_config_, other->sps_config_);
  std::swap(sr_config_, other->sr_config_);
  std::swap(cqi_config_, other->cqi_config_);
  std::swap(capabilities_, other->capabilities_);
  std::swap(info_, other->info_);
  std::swap(rnti_, other->rnti_);
  std::swap(time_alignment_timer_, other->time_alignment_timer_);
  std::swap(meas_gap_config_pattern_, other->meas_gap_config_pattern_);
  std::swap(meas_gap_config_sf_offset_, other->meas_gap_config_sf_offset_);
  std::swap(ue_aggregated_max_bitrate_ul_, other->ue_aggregated_max_bitrate_ul_);
  std::swap(ue_aggregated_max_bitrate_dl_, other->ue_aggregated_max_bitrate_dl_);
  std::swap(transmission_mode_, other->transmission_mode_);
  std::swap(ue_transmission_antenna_, other->ue_transmission_antenna_);
  std::swap(tti_bundling_, other->tti_bundling_);
  std::swap(max_harq_tx_, other->max_harq_tx_);
  std::swap(beta_offset_ack_index_, other->beta_offset_ack_index_);
  std::swap(beta_offset_ri_index_, other->beta_offset_ri_index_);
  std::swap(beta_offset_cqi_index_, other->beta_offset_cqi_index_);
  std::swap(ack_nack_simultaneous_trans_, other->ack_nack_simultaneous_trans_);
  std::swap(simultaneous_ack_nack_cqi_, other->simultaneous_ack_nack_cqi_);
  std::swap(aperiodic_cqi_rep_mode_, other->aperiodic_cqi_rep_mode_);
  std::swap(tdd_ack_nack_feedback_, other->tdd_ack_nack_feedback_);
  std::swap(ack_nack_repetition_factor_, other->ack_nack_repetition_factor_);
  std::swap(extended_bsr_size_, other->extended_bsr_size_);
  std::swap(ca_support_, other->ca_support_);
  std::swap(cross_carrier_sched_support_, other->cross_carrier_sched_support_);
  std::swap(pcell_carrier_index_, other->pcell_carrier_index_);
  std::swap(imsi_, other->imsi_);
  std::swap(scell_deactivation_timer_, other->scell_deactivation_timer_);
  std::swap(dl_slice_id_, other->dl_slice_id_);
  std::swap(ul_slice_id_, other->ul_slice_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ue_config::GetMetadata() const {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ue_config

// optional uint32 rnti = 1;
bool flex_ue_config::has_rnti() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_ue_config::set_has_rnti() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_ue_config::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_ue_config::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_ue_config::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.rnti)
  return rnti_;
}
void flex_ue_config::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.rnti)
}

// optional .protocol.flex_drx_config drx_config = 2;
bool flex_ue_config::has_drx_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ue_config::set_has_drx_config() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ue_config::clear_has_drx_config() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_config::clear_drx_config() {
  if (drx_config_ != NULL) drx_config_->::protocol::flex_drx_config::Clear();
  clear_has_drx_config();
}
const ::protocol::flex_drx_config& flex_ue_config::drx_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.drx_config)
  return drx_config_ != NULL ? *drx_config_
                         : *::protocol::flex_drx_config::internal_default_instance();
}
::protocol::flex_drx_config* flex_ue_config::mutable_drx_config() {
  set_has_drx_config();
  if (drx_config_ == NULL) {
    drx_config_ = new ::protocol::flex_drx_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.drx_config)
  return drx_config_;
}
::protocol::flex_drx_config* flex_ue_config::release_drx_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.drx_config)
  clear_has_drx_config();
  ::protocol::flex_drx_config* temp = drx_config_;
  drx_config_ = NULL;
  return temp;
}
void flex_ue_config::set_allocated_drx_config(::protocol::flex_drx_config* drx_config) {
  delete drx_config_;
  drx_config_ = drx_config;
  if (drx_config) {
    set_has_drx_config();
  } else {
    clear_has_drx_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.drx_config)
}

// optional uint32 time_alignment_timer = 3;
bool flex_ue_config::has_time_alignment_timer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_ue_config::set_has_time_alignment_timer() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_ue_config::clear_has_time_alignment_timer() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_ue_config::clear_time_alignment_timer() {
  time_alignment_timer_ = 0u;
  clear_has_time_alignment_timer();
}
::google::protobuf::uint32 flex_ue_config::time_alignment_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.time_alignment_timer)
  return time_alignment_timer_;
}
void flex_ue_config::set_time_alignment_timer(::google::protobuf::uint32 value) {
  set_has_time_alignment_timer();
  time_alignment_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.time_alignment_timer)
}

// optional uint32 meas_gap_config_pattern = 4;
bool flex_ue_config::has_meas_gap_config_pattern() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_ue_config::set_has_meas_gap_config_pattern() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_ue_config::clear_has_meas_gap_config_pattern() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_ue_config::clear_meas_gap_config_pattern() {
  meas_gap_config_pattern_ = 0u;
  clear_has_meas_gap_config_pattern();
}
::google::protobuf::uint32 flex_ue_config::meas_gap_config_pattern() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.meas_gap_config_pattern)
  return meas_gap_config_pattern_;
}
void flex_ue_config::set_meas_gap_config_pattern(::google::protobuf::uint32 value) {
  set_has_meas_gap_config_pattern();
  meas_gap_config_pattern_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.meas_gap_config_pattern)
}

// optional uint32 meas_gap_config_sf_offset = 5;
bool flex_ue_config::has_meas_gap_config_sf_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_ue_config::set_has_meas_gap_config_sf_offset() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_ue_config::clear_has_meas_gap_config_sf_offset() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_ue_config::clear_meas_gap_config_sf_offset() {
  meas_gap_config_sf_offset_ = 0u;
  clear_has_meas_gap_config_sf_offset();
}
::google::protobuf::uint32 flex_ue_config::meas_gap_config_sf_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.meas_gap_config_sf_offset)
  return meas_gap_config_sf_offset_;
}
void flex_ue_config::set_meas_gap_config_sf_offset(::google::protobuf::uint32 value) {
  set_has_meas_gap_config_sf_offset();
  meas_gap_config_sf_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.meas_gap_config_sf_offset)
}

// optional .protocol.flex_sps_config sps_config = 6;
bool flex_ue_config::has_sps_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ue_config::set_has_sps_config() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ue_config::clear_has_sps_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ue_config::clear_sps_config() {
  if (sps_config_ != NULL) sps_config_->::protocol::flex_sps_config::Clear();
  clear_has_sps_config();
}
const ::protocol::flex_sps_config& flex_ue_config::sps_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.sps_config)
  return sps_config_ != NULL ? *sps_config_
                         : *::protocol::flex_sps_config::internal_default_instance();
}
::protocol::flex_sps_config* flex_ue_config::mutable_sps_config() {
  set_has_sps_config();
  if (sps_config_ == NULL) {
    sps_config_ = new ::protocol::flex_sps_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.sps_config)
  return sps_config_;
}
::protocol::flex_sps_config* flex_ue_config::release_sps_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.sps_config)
  clear_has_sps_config();
  ::protocol::flex_sps_config* temp = sps_config_;
  sps_config_ = NULL;
  return temp;
}
void flex_ue_config::set_allocated_sps_config(::protocol::flex_sps_config* sps_config) {
  delete sps_config_;
  sps_config_ = sps_config;
  if (sps_config) {
    set_has_sps_config();
  } else {
    clear_has_sps_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.sps_config)
}

// optional .protocol.flex_sr_config sr_config = 7;
bool flex_ue_config::has_sr_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ue_config::set_has_sr_config() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ue_config::clear_has_sr_config() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ue_config::clear_sr_config() {
  if (sr_config_ != NULL) sr_config_->::protocol::flex_sr_config::Clear();
  clear_has_sr_config();
}
const ::protocol::flex_sr_config& flex_ue_config::sr_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.sr_config)
  return sr_config_ != NULL ? *sr_config_
                         : *::protocol::flex_sr_config::internal_default_instance();
}
::protocol::flex_sr_config* flex_ue_config::mutable_sr_config() {
  set_has_sr_config();
  if (sr_config_ == NULL) {
    sr_config_ = new ::protocol::flex_sr_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.sr_config)
  return sr_config_;
}
::protocol::flex_sr_config* flex_ue_config::release_sr_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.sr_config)
  clear_has_sr_config();
  ::protocol::flex_sr_config* temp = sr_config_;
  sr_config_ = NULL;
  return temp;
}
void flex_ue_config::set_allocated_sr_config(::protocol::flex_sr_config* sr_config) {
  delete sr_config_;
  sr_config_ = sr_config;
  if (sr_config) {
    set_has_sr_config();
  } else {
    clear_has_sr_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.sr_config)
}

// optional .protocol.flex_cqi_config cqi_config = 8;
bool flex_ue_config::has_cqi_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_ue_config::set_has_cqi_config() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_ue_config::clear_has_cqi_config() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ue_config::clear_cqi_config() {
  if (cqi_config_ != NULL) cqi_config_->::protocol::flex_cqi_config::Clear();
  clear_has_cqi_config();
}
const ::protocol::flex_cqi_config& flex_ue_config::cqi_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.cqi_config)
  return cqi_config_ != NULL ? *cqi_config_
                         : *::protocol::flex_cqi_config::internal_default_instance();
}
::protocol::flex_cqi_config* flex_ue_config::mutable_cqi_config() {
  set_has_cqi_config();
  if (cqi_config_ == NULL) {
    cqi_config_ = new ::protocol::flex_cqi_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.cqi_config)
  return cqi_config_;
}
::protocol::flex_cqi_config* flex_ue_config::release_cqi_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.cqi_config)
  clear_has_cqi_config();
  ::protocol::flex_cqi_config* temp = cqi_config_;
  cqi_config_ = NULL;
  return temp;
}
void flex_ue_config::set_allocated_cqi_config(::protocol::flex_cqi_config* cqi_config) {
  delete cqi_config_;
  cqi_config_ = cqi_config;
  if (cqi_config) {
    set_has_cqi_config();
  } else {
    clear_has_cqi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.cqi_config)
}

// optional uint32 transmission_mode = 9;
bool flex_ue_config::has_transmission_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void flex_ue_config::set_has_transmission_mode() {
  _has_bits_[0] |= 0x00001000u;
}
void flex_ue_config::clear_has_transmission_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
void flex_ue_config::clear_transmission_mode() {
  transmission_mode_ = 0u;
  clear_has_transmission_mode();
}
::google::protobuf::uint32 flex_ue_config::transmission_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.transmission_mode)
  return transmission_mode_;
}
void flex_ue_config::set_transmission_mode(::google::protobuf::uint32 value) {
  set_has_transmission_mode();
  transmission_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.transmission_mode)
}

// optional uint64 ue_aggregated_max_bitrate_UL = 10;
bool flex_ue_config::has_ue_aggregated_max_bitrate_ul() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_ue_config::set_has_ue_aggregated_max_bitrate_ul() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_ue_config::clear_has_ue_aggregated_max_bitrate_ul() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_ue_config::clear_ue_aggregated_max_bitrate_ul() {
  ue_aggregated_max_bitrate_ul_ = GOOGLE_ULONGLONG(0);
  clear_has_ue_aggregated_max_bitrate_ul();
}
::google::protobuf::uint64 flex_ue_config::ue_aggregated_max_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_aggregated_max_bitrate_UL)
  return ue_aggregated_max_bitrate_ul_;
}
void flex_ue_config::set_ue_aggregated_max_bitrate_ul(::google::protobuf::uint64 value) {
  set_has_ue_aggregated_max_bitrate_ul();
  ue_aggregated_max_bitrate_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_aggregated_max_bitrate_UL)
}

// optional uint64 ue_aggregated_max_bitrate_DL = 11;
bool flex_ue_config::has_ue_aggregated_max_bitrate_dl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void flex_ue_config::set_has_ue_aggregated_max_bitrate_dl() {
  _has_bits_[0] |= 0x00000800u;
}
void flex_ue_config::clear_has_ue_aggregated_max_bitrate_dl() {
  _has_bits_[0] &= ~0x00000800u;
}
void flex_ue_config::clear_ue_aggregated_max_bitrate_dl() {
  ue_aggregated_max_bitrate_dl_ = GOOGLE_ULONGLONG(0);
  clear_has_ue_aggregated_max_bitrate_dl();
}
::google::protobuf::uint64 flex_ue_config::ue_aggregated_max_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_aggregated_max_bitrate_DL)
  return ue_aggregated_max_bitrate_dl_;
}
void flex_ue_config::set_ue_aggregated_max_bitrate_dl(::google::protobuf::uint64 value) {
  set_has_ue_aggregated_max_bitrate_dl();
  ue_aggregated_max_bitrate_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_aggregated_max_bitrate_DL)
}

// optional .protocol.flex_ue_capabilities capabilities = 12;
bool flex_ue_config::has_capabilities() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_ue_config::set_has_capabilities() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_ue_config::clear_has_capabilities() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ue_config::clear_capabilities() {
  if (capabilities_ != NULL) capabilities_->::protocol::flex_ue_capabilities::Clear();
  clear_has_capabilities();
}
const ::protocol::flex_ue_capabilities& flex_ue_config::capabilities() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.capabilities)
  return capabilities_ != NULL ? *capabilities_
                         : *::protocol::flex_ue_capabilities::internal_default_instance();
}
::protocol::flex_ue_capabilities* flex_ue_config::mutable_capabilities() {
  set_has_capabilities();
  if (capabilities_ == NULL) {
    capabilities_ = new ::protocol::flex_ue_capabilities;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.capabilities)
  return capabilities_;
}
::protocol::flex_ue_capabilities* flex_ue_config::release_capabilities() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.capabilities)
  clear_has_capabilities();
  ::protocol::flex_ue_capabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
void flex_ue_config::set_allocated_capabilities(::protocol::flex_ue_capabilities* capabilities) {
  delete capabilities_;
  capabilities_ = capabilities;
  if (capabilities) {
    set_has_capabilities();
  } else {
    clear_has_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.capabilities)
}

// optional uint32 ue_transmission_antenna = 13;
bool flex_ue_config::has_ue_transmission_antenna() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void flex_ue_config::set_has_ue_transmission_antenna() {
  _has_bits_[0] |= 0x00002000u;
}
void flex_ue_config::clear_has_ue_transmission_antenna() {
  _has_bits_[0] &= ~0x00002000u;
}
void flex_ue_config::clear_ue_transmission_antenna() {
  ue_transmission_antenna_ = 0u;
  clear_has_ue_transmission_antenna();
}
::google::protobuf::uint32 flex_ue_config::ue_transmission_antenna() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_transmission_antenna)
  return ue_transmission_antenna_;
}
void flex_ue_config::set_ue_transmission_antenna(::google::protobuf::uint32 value) {
  set_has_ue_transmission_antenna();
  ue_transmission_antenna_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_transmission_antenna)
}

// optional uint32 tti_bundling = 14;
bool flex_ue_config::has_tti_bundling() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void flex_ue_config::set_has_tti_bundling() {
  _has_bits_[0] |= 0x00004000u;
}
void flex_ue_config::clear_has_tti_bundling() {
  _has_bits_[0] &= ~0x00004000u;
}
void flex_ue_config::clear_tti_bundling() {
  tti_bundling_ = 0u;
  clear_has_tti_bundling();
}
::google::protobuf::uint32 flex_ue_config::tti_bundling() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.tti_bundling)
  return tti_bundling_;
}
void flex_ue_config::set_tti_bundling(::google::protobuf::uint32 value) {
  set_has_tti_bundling();
  tti_bundling_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.tti_bundling)
}

// optional uint32 max_HARQ_tx = 15;
bool flex_ue_config::has_max_harq_tx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void flex_ue_config::set_has_max_harq_tx() {
  _has_bits_[0] |= 0x00008000u;
}
void flex_ue_config::clear_has_max_harq_tx() {
  _has_bits_[0] &= ~0x00008000u;
}
void flex_ue_config::clear_max_harq_tx() {
  max_harq_tx_ = 0u;
  clear_has_max_harq_tx();
}
::google::protobuf::uint32 flex_ue_config::max_harq_tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.max_HARQ_tx)
  return max_harq_tx_;
}
void flex_ue_config::set_max_harq_tx(::google::protobuf::uint32 value) {
  set_has_max_harq_tx();
  max_harq_tx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.max_HARQ_tx)
}

// optional uint32 beta_offset_ACK_index = 16;
bool flex_ue_config::has_beta_offset_ack_index() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void flex_ue_config::set_has_beta_offset_ack_index() {
  _has_bits_[0] |= 0x00010000u;
}
void flex_ue_config::clear_has_beta_offset_ack_index() {
  _has_bits_[0] &= ~0x00010000u;
}
void flex_ue_config::clear_beta_offset_ack_index() {
  beta_offset_ack_index_ = 0u;
  clear_has_beta_offset_ack_index();
}
::google::protobuf::uint32 flex_ue_config::beta_offset_ack_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_ACK_index)
  return beta_offset_ack_index_;
}
void flex_ue_config::set_beta_offset_ack_index(::google::protobuf::uint32 value) {
  set_has_beta_offset_ack_index();
  beta_offset_ack_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_ACK_index)
}

// optional uint32 beta_offset_RI_index = 17;
bool flex_ue_config::has_beta_offset_ri_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void flex_ue_config::set_has_beta_offset_ri_index() {
  _has_bits_[0] |= 0x00020000u;
}
void flex_ue_config::clear_has_beta_offset_ri_index() {
  _has_bits_[0] &= ~0x00020000u;
}
void flex_ue_config::clear_beta_offset_ri_index() {
  beta_offset_ri_index_ = 0u;
  clear_has_beta_offset_ri_index();
}
::google::protobuf::uint32 flex_ue_config::beta_offset_ri_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_RI_index)
  return beta_offset_ri_index_;
}
void flex_ue_config::set_beta_offset_ri_index(::google::protobuf::uint32 value) {
  set_has_beta_offset_ri_index();
  beta_offset_ri_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_RI_index)
}

// optional uint32 beta_offset_CQI_index = 18;
bool flex_ue_config::has_beta_offset_cqi_index() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void flex_ue_config::set_has_beta_offset_cqi_index() {
  _has_bits_[0] |= 0x00040000u;
}
void flex_ue_config::clear_has_beta_offset_cqi_index() {
  _has_bits_[0] &= ~0x00040000u;
}
void flex_ue_config::clear_beta_offset_cqi_index() {
  beta_offset_cqi_index_ = 0u;
  clear_has_beta_offset_cqi_index();
}
::google::protobuf::uint32 flex_ue_config::beta_offset_cqi_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_CQI_index)
  return beta_offset_cqi_index_;
}
void flex_ue_config::set_beta_offset_cqi_index(::google::protobuf::uint32 value) {
  set_has_beta_offset_cqi_index();
  beta_offset_cqi_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_CQI_index)
}

// optional uint32 ack_nack_simultaneous_trans = 19;
bool flex_ue_config::has_ack_nack_simultaneous_trans() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void flex_ue_config::set_has_ack_nack_simultaneous_trans() {
  _has_bits_[0] |= 0x00080000u;
}
void flex_ue_config::clear_has_ack_nack_simultaneous_trans() {
  _has_bits_[0] &= ~0x00080000u;
}
void flex_ue_config::clear_ack_nack_simultaneous_trans() {
  ack_nack_simultaneous_trans_ = 0u;
  clear_has_ack_nack_simultaneous_trans();
}
::google::protobuf::uint32 flex_ue_config::ack_nack_simultaneous_trans() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ack_nack_simultaneous_trans)
  return ack_nack_simultaneous_trans_;
}
void flex_ue_config::set_ack_nack_simultaneous_trans(::google::protobuf::uint32 value) {
  set_has_ack_nack_simultaneous_trans();
  ack_nack_simultaneous_trans_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ack_nack_simultaneous_trans)
}

// optional uint32 simultaneous_ack_nack_cqi = 20;
bool flex_ue_config::has_simultaneous_ack_nack_cqi() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void flex_ue_config::set_has_simultaneous_ack_nack_cqi() {
  _has_bits_[0] |= 0x00100000u;
}
void flex_ue_config::clear_has_simultaneous_ack_nack_cqi() {
  _has_bits_[0] &= ~0x00100000u;
}
void flex_ue_config::clear_simultaneous_ack_nack_cqi() {
  simultaneous_ack_nack_cqi_ = 0u;
  clear_has_simultaneous_ack_nack_cqi();
}
::google::protobuf::uint32 flex_ue_config::simultaneous_ack_nack_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.simultaneous_ack_nack_cqi)
  return simultaneous_ack_nack_cqi_;
}
void flex_ue_config::set_simultaneous_ack_nack_cqi(::google::protobuf::uint32 value) {
  set_has_simultaneous_ack_nack_cqi();
  simultaneous_ack_nack_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.simultaneous_ack_nack_cqi)
}

// optional uint32 aperiodic_cqi_rep_mode = 21;
bool flex_ue_config::has_aperiodic_cqi_rep_mode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void flex_ue_config::set_has_aperiodic_cqi_rep_mode() {
  _has_bits_[0] |= 0x00200000u;
}
void flex_ue_config::clear_has_aperiodic_cqi_rep_mode() {
  _has_bits_[0] &= ~0x00200000u;
}
void flex_ue_config::clear_aperiodic_cqi_rep_mode() {
  aperiodic_cqi_rep_mode_ = 0u;
  clear_has_aperiodic_cqi_rep_mode();
}
::google::protobuf::uint32 flex_ue_config::aperiodic_cqi_rep_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.aperiodic_cqi_rep_mode)
  return aperiodic_cqi_rep_mode_;
}
void flex_ue_config::set_aperiodic_cqi_rep_mode(::google::protobuf::uint32 value) {
  set_has_aperiodic_cqi_rep_mode();
  aperiodic_cqi_rep_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.aperiodic_cqi_rep_mode)
}

// optional uint32 tdd_ack_nack_feedback = 22;
bool flex_ue_config::has_tdd_ack_nack_feedback() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void flex_ue_config::set_has_tdd_ack_nack_feedback() {
  _has_bits_[0] |= 0x00400000u;
}
void flex_ue_config::clear_has_tdd_ack_nack_feedback() {
  _has_bits_[0] &= ~0x00400000u;
}
void flex_ue_config::clear_tdd_ack_nack_feedback() {
  tdd_ack_nack_feedback_ = 0u;
  clear_has_tdd_ack_nack_feedback();
}
::google::protobuf::uint32 flex_ue_config::tdd_ack_nack_feedback() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.tdd_ack_nack_feedback)
  return tdd_ack_nack_feedback_;
}
void flex_ue_config::set_tdd_ack_nack_feedback(::google::protobuf::uint32 value) {
  set_has_tdd_ack_nack_feedback();
  tdd_ack_nack_feedback_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.tdd_ack_nack_feedback)
}

// optional uint32 ack_nack_repetition_factor = 23;
bool flex_ue_config::has_ack_nack_repetition_factor() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void flex_ue_config::set_has_ack_nack_repetition_factor() {
  _has_bits_[0] |= 0x00800000u;
}
void flex_ue_config::clear_has_ack_nack_repetition_factor() {
  _has_bits_[0] &= ~0x00800000u;
}
void flex_ue_config::clear_ack_nack_repetition_factor() {
  ack_nack_repetition_factor_ = 0u;
  clear_has_ack_nack_repetition_factor();
}
::google::protobuf::uint32 flex_ue_config::ack_nack_repetition_factor() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ack_nack_repetition_factor)
  return ack_nack_repetition_factor_;
}
void flex_ue_config::set_ack_nack_repetition_factor(::google::protobuf::uint32 value) {
  set_has_ack_nack_repetition_factor();
  ack_nack_repetition_factor_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ack_nack_repetition_factor)
}

// optional uint32 extended_bsr_size = 24;
bool flex_ue_config::has_extended_bsr_size() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void flex_ue_config::set_has_extended_bsr_size() {
  _has_bits_[0] |= 0x01000000u;
}
void flex_ue_config::clear_has_extended_bsr_size() {
  _has_bits_[0] &= ~0x01000000u;
}
void flex_ue_config::clear_extended_bsr_size() {
  extended_bsr_size_ = 0u;
  clear_has_extended_bsr_size();
}
::google::protobuf::uint32 flex_ue_config::extended_bsr_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.extended_bsr_size)
  return extended_bsr_size_;
}
void flex_ue_config::set_extended_bsr_size(::google::protobuf::uint32 value) {
  set_has_extended_bsr_size();
  extended_bsr_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.extended_bsr_size)
}

// optional uint32 ca_support = 25;
bool flex_ue_config::has_ca_support() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void flex_ue_config::set_has_ca_support() {
  _has_bits_[0] |= 0x02000000u;
}
void flex_ue_config::clear_has_ca_support() {
  _has_bits_[0] &= ~0x02000000u;
}
void flex_ue_config::clear_ca_support() {
  ca_support_ = 0u;
  clear_has_ca_support();
}
::google::protobuf::uint32 flex_ue_config::ca_support() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ca_support)
  return ca_support_;
}
void flex_ue_config::set_ca_support(::google::protobuf::uint32 value) {
  set_has_ca_support();
  ca_support_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ca_support)
}

// optional uint32 cross_carrier_sched_support = 26;
bool flex_ue_config::has_cross_carrier_sched_support() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void flex_ue_config::set_has_cross_carrier_sched_support() {
  _has_bits_[0] |= 0x04000000u;
}
void flex_ue_config::clear_has_cross_carrier_sched_support() {
  _has_bits_[0] &= ~0x04000000u;
}
void flex_ue_config::clear_cross_carrier_sched_support() {
  cross_carrier_sched_support_ = 0u;
  clear_has_cross_carrier_sched_support();
}
::google::protobuf::uint32 flex_ue_config::cross_carrier_sched_support() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.cross_carrier_sched_support)
  return cross_carrier_sched_support_;
}
void flex_ue_config::set_cross_carrier_sched_support(::google::protobuf::uint32 value) {
  set_has_cross_carrier_sched_support();
  cross_carrier_sched_support_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.cross_carrier_sched_support)
}

// optional uint32 pcell_carrier_index = 27;
bool flex_ue_config::has_pcell_carrier_index() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void flex_ue_config::set_has_pcell_carrier_index() {
  _has_bits_[0] |= 0x08000000u;
}
void flex_ue_config::clear_has_pcell_carrier_index() {
  _has_bits_[0] &= ~0x08000000u;
}
void flex_ue_config::clear_pcell_carrier_index() {
  pcell_carrier_index_ = 0u;
  clear_has_pcell_carrier_index();
}
::google::protobuf::uint32 flex_ue_config::pcell_carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.pcell_carrier_index)
  return pcell_carrier_index_;
}
void flex_ue_config::set_pcell_carrier_index(::google::protobuf::uint32 value) {
  set_has_pcell_carrier_index();
  pcell_carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.pcell_carrier_index)
}

// repeated .protocol.flex_scell_config scell_config = 28;
int flex_ue_config::scell_config_size() const {
  return scell_config_.size();
}
void flex_ue_config::clear_scell_config() {
  scell_config_.Clear();
}
const ::protocol::flex_scell_config& flex_ue_config::scell_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.scell_config)
  return scell_config_.Get(index);
}
::protocol::flex_scell_config* flex_ue_config::mutable_scell_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.scell_config)
  return scell_config_.Mutable(index);
}
::protocol::flex_scell_config* flex_ue_config::add_scell_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_config.scell_config)
  return scell_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config >*
flex_ue_config::mutable_scell_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_config.scell_config)
  return &scell_config_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config >&
flex_ue_config::scell_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_config.scell_config)
  return scell_config_;
}

// optional uint32 scell_deactivation_timer = 29;
bool flex_ue_config::has_scell_deactivation_timer() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void flex_ue_config::set_has_scell_deactivation_timer() {
  _has_bits_[0] |= 0x20000000u;
}
void flex_ue_config::clear_has_scell_deactivation_timer() {
  _has_bits_[0] &= ~0x20000000u;
}
void flex_ue_config::clear_scell_deactivation_timer() {
  scell_deactivation_timer_ = 0u;
  clear_has_scell_deactivation_timer();
}
::google::protobuf::uint32 flex_ue_config::scell_deactivation_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.scell_deactivation_timer)
  return scell_deactivation_timer_;
}
void flex_ue_config::set_scell_deactivation_timer(::google::protobuf::uint32 value) {
  set_has_scell_deactivation_timer();
  scell_deactivation_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.scell_deactivation_timer)
}

// optional uint64 imsi = 30;
bool flex_ue_config::has_imsi() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void flex_ue_config::set_has_imsi() {
  _has_bits_[0] |= 0x10000000u;
}
void flex_ue_config::clear_has_imsi() {
  _has_bits_[0] &= ~0x10000000u;
}
void flex_ue_config::clear_imsi() {
  imsi_ = GOOGLE_ULONGLONG(0);
  clear_has_imsi();
}
::google::protobuf::uint64 flex_ue_config::imsi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.imsi)
  return imsi_;
}
void flex_ue_config::set_imsi(::google::protobuf::uint64 value) {
  set_has_imsi();
  imsi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.imsi)
}

// optional uint32 dl_slice_id = 31;
bool flex_ue_config::has_dl_slice_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void flex_ue_config::set_has_dl_slice_id() {
  _has_bits_[0] |= 0x40000000u;
}
void flex_ue_config::clear_has_dl_slice_id() {
  _has_bits_[0] &= ~0x40000000u;
}
void flex_ue_config::clear_dl_slice_id() {
  dl_slice_id_ = 0u;
  clear_has_dl_slice_id();
}
::google::protobuf::uint32 flex_ue_config::dl_slice_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.dl_slice_id)
  return dl_slice_id_;
}
void flex_ue_config::set_dl_slice_id(::google::protobuf::uint32 value) {
  set_has_dl_slice_id();
  dl_slice_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.dl_slice_id)
}

// optional uint32 ul_slice_id = 32;
bool flex_ue_config::has_ul_slice_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void flex_ue_config::set_has_ul_slice_id() {
  _has_bits_[0] |= 0x80000000u;
}
void flex_ue_config::clear_has_ul_slice_id() {
  _has_bits_[0] &= ~0x80000000u;
}
void flex_ue_config::clear_ul_slice_id() {
  ul_slice_id_ = 0u;
  clear_has_ul_slice_id();
}
::google::protobuf::uint32 flex_ue_config::ul_slice_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ul_slice_id)
  return ul_slice_id_;
}
void flex_ue_config::set_ul_slice_id(::google::protobuf::uint32 value) {
  set_has_ul_slice_id();
  ul_slice_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ul_slice_id)
}

// optional .protocol.flex_measurement_info info = 33;
bool flex_ue_config::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_ue_config::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_ue_config::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_ue_config::clear_info() {
  if (info_ != NULL) info_->::protocol::flex_measurement_info::Clear();
  clear_has_info();
}
const ::protocol::flex_measurement_info& flex_ue_config::info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.info)
  return info_ != NULL ? *info_
                         : *::protocol::flex_measurement_info::internal_default_instance();
}
::protocol::flex_measurement_info* flex_ue_config::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::protocol::flex_measurement_info;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.info)
  return info_;
}
::protocol::flex_measurement_info* flex_ue_config::release_info() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.info)
  clear_has_info();
  ::protocol::flex_measurement_info* temp = info_;
  info_ = NULL;
  return temp;
}
void flex_ue_config::set_allocated_info(::protocol::flex_measurement_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_lc_ue_config::kRntiFieldNumber;
const int flex_lc_ue_config::kLcConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_lc_ue_config::flex_lc_ue_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_lc_ue_config)
}
flex_lc_ue_config::flex_lc_ue_config(const flex_lc_ue_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lc_config_(from.lc_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rnti_ = from.rnti_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_ue_config)
}

void flex_lc_ue_config::SharedCtor() {
  _cached_size_ = 0;
  rnti_ = 0u;
}

flex_lc_ue_config::~flex_lc_ue_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_ue_config)
  SharedDtor();
}

void flex_lc_ue_config::SharedDtor() {
}

void flex_lc_ue_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_lc_ue_config::descriptor() {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_lc_ue_config& flex_lc_ue_config::default_instance() {
  protobuf_config_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_lc_ue_config* flex_lc_ue_config::New(::google::protobuf::Arena* arena) const {
  flex_lc_ue_config* n = new flex_lc_ue_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_lc_ue_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_ue_config)
  lc_config_.Clear();
  rnti_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_lc_ue_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_lc_ue_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_lc_config lc_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lc_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_lc_ue_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_lc_ue_config)
  return false;
#undef DO_
}

void flex_lc_ue_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_lc_ue_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // repeated .protocol.flex_lc_config lc_config = 2;
  for (unsigned int i = 0, n = this->lc_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lc_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_lc_ue_config)
}

::google::protobuf::uint8* flex_lc_ue_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_ue_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // repeated .protocol.flex_lc_config lc_config = 2;
  for (unsigned int i = 0, n = this->lc_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lc_config(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_ue_config)
  return target;
}

size_t flex_lc_ue_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_ue_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_lc_config lc_config = 2;
  {
    unsigned int count = this->lc_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lc_config(i));
    }
  }

  // optional uint32 rnti = 1;
  if (has_rnti()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rnti());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_lc_ue_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_ue_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_lc_ue_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_ue_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_ue_config)
    MergeFrom(*source);
  }
}

void flex_lc_ue_config::MergeFrom(const flex_lc_ue_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lc_config_.MergeFrom(from.lc_config_);
  if (from.has_rnti()) {
    set_rnti(from.rnti());
  }
}

void flex_lc_ue_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_ue_config::CopyFrom(const flex_lc_ue_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_ue_config::IsInitialized() const {
  return true;
}

void flex_lc_ue_config::Swap(flex_lc_ue_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_lc_ue_config::InternalSwap(flex_lc_ue_config* other) {
  lc_config_.InternalSwap(&other->lc_config_);
  std::swap(rnti_, other->rnti_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_lc_ue_config::GetMetadata() const {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_lc_ue_config

// optional uint32 rnti = 1;
bool flex_lc_ue_config::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_lc_ue_config::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_lc_ue_config::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_lc_ue_config::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_lc_ue_config::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_ue_config.rnti)
  return rnti_;
}
void flex_lc_ue_config::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_ue_config.rnti)
}

// repeated .protocol.flex_lc_config lc_config = 2;
int flex_lc_ue_config::lc_config_size() const {
  return lc_config_.size();
}
void flex_lc_ue_config::clear_lc_config() {
  lc_config_.Clear();
}
const ::protocol::flex_lc_config& flex_lc_ue_config::lc_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Get(index);
}
::protocol::flex_lc_config* flex_lc_ue_config::mutable_lc_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Mutable(index);
}
::protocol::flex_lc_config* flex_lc_ue_config::add_lc_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config >*
flex_lc_ue_config::mutable_lc_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_lc_ue_config.lc_config)
  return &lc_config_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config >&
flex_lc_ue_config::lc_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_lc_ue_config.lc_config)
  return lc_config_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_s1ap_config::kPendingFieldNumber;
const int flex_s1ap_config::kConnectedFieldNumber;
const int flex_s1ap_config::kEnbS1IpFieldNumber;
const int flex_s1ap_config::kEnbNameFieldNumber;
const int flex_s1ap_config::kMmeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_s1ap_config::flex_s1ap_config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_config_5fmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_s1ap_config)
}
flex_s1ap_config::flex_s1ap_config(const flex_s1ap_config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mme_(from.mme_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enb_s1_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enb_s1_ip()) {
    enb_s1_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enb_s1_ip_);
  }
  enb_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_enb_name()) {
    enb_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enb_name_);
  }
  ::memcpy(&pending_, &from.pending_,
    reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&pending_) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_s1ap_config)
}

void flex_s1ap_config::SharedCtor() {
  _cached_size_ = 0;
  enb_s1_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enb_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_, 0, reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&pending_) + sizeof(connected_));
}

flex_s1ap_config::~flex_s1ap_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_s1ap_config)
  SharedDtor();
}

void flex_s1ap_config::SharedDtor() {
  enb_s1_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enb_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void flex_s1ap_config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_s1ap_config::descriptor() {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_s1ap_config& flex_s1ap_config::default_instance() {
  protobuf_config_5fmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_s1ap_config* flex_s1ap_config::New(::google::protobuf::Arena* arena) const {
  flex_s1ap_config* n = new flex_s1ap_config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_s1ap_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_s1ap_config)
  mme_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_enb_s1_ip()) {
      GOOGLE_DCHECK(!enb_s1_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enb_s1_ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_enb_name()) {
      GOOGLE_DCHECK(!enb_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*enb_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&pending_, 0, reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&pending_) + sizeof(connected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_s1ap_config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_s1ap_config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pending = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 connected = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_connected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string enb_s1_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enb_s1_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enb_s1_ip().data(), this->enb_s1_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_s1ap_config.enb_s1_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string enb_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enb_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enb_name().data(), this->enb_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_s1ap_config.enb_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_s1ap_mme mme = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_s1ap_config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_s1ap_config)
  return false;
#undef DO_
}

void flex_s1ap_config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_s1ap_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pending = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pending(), output);
  }

  // optional uint32 connected = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->connected(), output);
  }

  // optional string enb_s1_ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enb_s1_ip().data(), this->enb_s1_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_config.enb_s1_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->enb_s1_ip(), output);
  }

  // optional string enb_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enb_name().data(), this->enb_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_config.enb_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->enb_name(), output);
  }

  // repeated .protocol.flex_s1ap_mme mme = 5;
  for (unsigned int i = 0, n = this->mme_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mme(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_s1ap_config)
}

::google::protobuf::uint8* flex_s1ap_config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_s1ap_config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pending = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pending(), target);
  }

  // optional uint32 connected = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->connected(), target);
  }

  // optional string enb_s1_ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enb_s1_ip().data(), this->enb_s1_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_config.enb_s1_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->enb_s1_ip(), target);
  }

  // optional string enb_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enb_name().data(), this->enb_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_config.enb_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->enb_name(), target);
  }

  // repeated .protocol.flex_s1ap_mme mme = 5;
  for (unsigned int i = 0, n = this->mme_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->mme(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_s1ap_config)
  return target;
}

size_t flex_s1ap_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_s1ap_config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_s1ap_mme mme = 5;
  {
    unsigned int count = this->mme_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mme(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string enb_s1_ip = 3;
    if (has_enb_s1_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enb_s1_ip());
    }

    // optional string enb_name = 4;
    if (has_enb_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enb_name());
    }

    // optional uint32 pending = 1;
    if (has_pending()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending());
    }

    // optional uint32 connected = 2;
    if (has_connected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connected());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_s1ap_config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_s1ap_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_s1ap_config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_s1ap_config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_s1ap_config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_s1ap_config)
    MergeFrom(*source);
  }
}

void flex_s1ap_config::MergeFrom(const flex_s1ap_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_s1ap_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mme_.MergeFrom(from.mme_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_enb_s1_ip();
      enb_s1_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enb_s1_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_enb_name();
      enb_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enb_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      pending_ = from.pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      connected_ = from.connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_s1ap_config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_s1ap_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_s1ap_config::CopyFrom(const flex_s1ap_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_s1ap_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_s1ap_config::IsInitialized() const {
  return true;
}

void flex_s1ap_config::Swap(flex_s1ap_config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_s1ap_config::InternalSwap(flex_s1ap_config* other) {
  mme_.InternalSwap(&other->mme_);
  enb_s1_ip_.Swap(&other->enb_s1_ip_);
  enb_name_.Swap(&other->enb_name_);
  std::swap(pending_, other->pending_);
  std::swap(connected_, other->connected_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_s1ap_config::GetMetadata() const {
  protobuf_config_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_config_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_s1ap_config

// optional uint32 pending = 1;
bool flex_s1ap_config::has_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_s1ap_config::set_has_pending() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_s1ap_config::clear_has_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_s1ap_config::clear_pending() {
  pending_ = 0u;
  clear_has_pending();
}
::google::protobuf::uint32 flex_s1ap_config::pending() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.pending)
  return pending_;
}
void flex_s1ap_config::set_pending(::google::protobuf::uint32 value) {
  set_has_pending();
  pending_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.pending)
}

// optional uint32 connected = 2;
bool flex_s1ap_config::has_connected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_s1ap_config::set_has_connected() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_s1ap_config::clear_has_connected() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_s1ap_config::clear_connected() {
  connected_ = 0u;
  clear_has_connected();
}
::google::protobuf::uint32 flex_s1ap_config::connected() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.connected)
  return connected_;
}
void flex_s1ap_config::set_connected(::google::protobuf::uint32 value) {
  set_has_connected();
  connected_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.connected)
}

// optional string enb_s1_ip = 3;
bool flex_s1ap_config::has_enb_s1_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_s1ap_config::set_has_enb_s1_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_s1ap_config::clear_has_enb_s1_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_s1ap_config::clear_enb_s1_ip() {
  enb_s1_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enb_s1_ip();
}
const ::std::string& flex_s1ap_config::enb_s1_ip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.enb_s1_ip)
  return enb_s1_ip_.GetNoArena();
}
void flex_s1ap_config::set_enb_s1_ip(const ::std::string& value) {
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.enb_s1_ip)
}
#if LANG_CXX11
void flex_s1ap_config::set_enb_s1_ip(::std::string&& value) {
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_config.enb_s1_ip)
}
#endif
void flex_s1ap_config::set_enb_s1_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_config.enb_s1_ip)
}
void flex_s1ap_config::set_enb_s1_ip(const char* value, size_t size) {
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_config.enb_s1_ip)
}
::std::string* flex_s1ap_config::mutable_enb_s1_ip() {
  set_has_enb_s1_ip();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.enb_s1_ip)
  return enb_s1_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_s1ap_config::release_enb_s1_ip() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_config.enb_s1_ip)
  clear_has_enb_s1_ip();
  return enb_s1_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_s1ap_config::set_allocated_enb_s1_ip(::std::string* enb_s1_ip) {
  if (enb_s1_ip != NULL) {
    set_has_enb_s1_ip();
  } else {
    clear_has_enb_s1_ip();
  }
  enb_s1_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enb_s1_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_config.enb_s1_ip)
}

// optional string enb_name = 4;
bool flex_s1ap_config::has_enb_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_s1ap_config::set_has_enb_name() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_s1ap_config::clear_has_enb_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_s1ap_config::clear_enb_name() {
  enb_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enb_name();
}
const ::std::string& flex_s1ap_config::enb_name() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.enb_name)
  return enb_name_.GetNoArena();
}
void flex_s1ap_config::set_enb_name(const ::std::string& value) {
  set_has_enb_name();
  enb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.enb_name)
}
#if LANG_CXX11
void flex_s1ap_config::set_enb_name(::std::string&& value) {
  set_has_enb_name();
  enb_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_config.enb_name)
}
#endif
void flex_s1ap_config::set_enb_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enb_name();
  enb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_config.enb_name)
}
void flex_s1ap_config::set_enb_name(const char* value, size_t size) {
  set_has_enb_name();
  enb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_config.enb_name)
}
::std::string* flex_s1ap_config::mutable_enb_name() {
  set_has_enb_name();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.enb_name)
  return enb_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_s1ap_config::release_enb_name() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_config.enb_name)
  clear_has_enb_name();
  return enb_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_s1ap_config::set_allocated_enb_name(::std::string* enb_name) {
  if (enb_name != NULL) {
    set_has_enb_name();
  } else {
    clear_has_enb_name();
  }
  enb_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enb_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_config.enb_name)
}

// repeated .protocol.flex_s1ap_mme mme = 5;
int flex_s1ap_config::mme_size() const {
  return mme_.size();
}
void flex_s1ap_config::clear_mme() {
  mme_.Clear();
}
const ::protocol::flex_s1ap_mme& flex_s1ap_config::mme(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.mme)
  return mme_.Get(index);
}
::protocol::flex_s1ap_mme* flex_s1ap_config::mutable_mme(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.mme)
  return mme_.Mutable(index);
}
::protocol::flex_s1ap_mme* flex_s1ap_config::add_mme() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_config.mme)
  return mme_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme >*
flex_s1ap_config::mutable_mme() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_config.mme)
  return &mme_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme >&
flex_s1ap_config::mme() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_config.mme)
  return mme_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
