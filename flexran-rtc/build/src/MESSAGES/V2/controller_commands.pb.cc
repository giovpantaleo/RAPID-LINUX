// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controller_commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_dl_dataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_data> {
} _flex_dl_data_default_instance_;
class flex_ul_dataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_data> {
} _flex_ul_data_default_instance_;
class flex_dl_rarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_rar> {
} _flex_dl_rar_default_instance_;
class flex_dl_broadcastDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_broadcast> {
} _flex_dl_broadcast_default_instance_;
class flex_pdcch_ofdm_sym_countDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_pdcch_ofdm_sym_count> {
} _flex_pdcch_ofdm_sym_count_default_instance_;

namespace protobuf_controller_5fcommands_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, dl_dci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, ce_bitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, rlc_pdu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, serv_cell_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_data, act_deact_ce_),
  1,
  0,
  ~0u,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_data, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_data, ul_dci_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_rar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_rar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_rar, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_rar, grant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_rar, rar_dci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_rar, carrier_index_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_broadcast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_broadcast, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_broadcast, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_broadcast, broad_dci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_broadcast, carrier_index_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcch_ofdm_sym_count, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcch_ofdm_sym_count, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcch_ofdm_sym_count, carrier_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcch_ofdm_sym_count, num_pdcch_ofdm_symbols_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(flex_dl_data)},
  { 17, 24, sizeof(flex_ul_data)},
  { 26, 35, sizeof(flex_dl_rar)},
  { 39, 48, sizeof(flex_dl_broadcast)},
  { 52, 59, sizeof(flex_pdcch_ofdm_sym_count)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_rar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_broadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_pdcch_ofdm_sym_count_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "controller_commands.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_dl_data_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_ul_data_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_dl_rar_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_dl_broadcast_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _flex_pdcch_ofdm_sym_count_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protocol::protobuf_mac_5fprimitives_2eproto::InitDefaults();
  _flex_dl_data_default_instance_.DefaultConstruct();
  _flex_ul_data_default_instance_.DefaultConstruct();
  _flex_dl_rar_default_instance_.DefaultConstruct();
  _flex_dl_broadcast_default_instance_.DefaultConstruct();
  _flex_pdcch_ofdm_sym_count_default_instance_.DefaultConstruct();
  _flex_dl_data_default_instance_.get_mutable()->dl_dci_ = const_cast< ::protocol::flex_dl_dci*>(
      ::protocol::flex_dl_dci::internal_default_instance());
  _flex_ul_data_default_instance_.get_mutable()->ul_dci_ = const_cast< ::protocol::flex_ul_dci*>(
      ::protocol::flex_ul_dci::internal_default_instance());
  _flex_dl_rar_default_instance_.get_mutable()->rar_dci_ = const_cast< ::protocol::flex_dl_dci*>(
      ::protocol::flex_dl_dci::internal_default_instance());
  _flex_dl_broadcast_default_instance_.get_mutable()->broad_dci_ = const_cast< ::protocol::flex_dl_dci*>(
      ::protocol::flex_dl_dci::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031controller_commands.proto\022\010protocol\032\024m"
      "ac_primitives.proto\"\256\001\n\014flex_dl_data\022\014\n\004"
      "rnti\030\001 \001(\r\022%\n\006dl_dci\030\002 \001(\0132\025.protocol.fl"
      "ex_dl_dci\022\021\n\tce_bitmap\030\003 \003(\r\022\'\n\007rlc_pdu\030"
      "\004 \003(\0132\026.protocol.flex_rlc_pdu\022\027\n\017serv_ce"
      "ll_index\030\005 \001(\r\022\024\n\014act_deact_ce\030\006 \001(\r\"C\n\014"
      "flex_ul_data\022\014\n\004rnti\030\001 \001(\r\022%\n\006ul_dci\030\002 \001"
      "(\0132\025.protocol.flex_ul_dci\"i\n\013flex_dl_rar"
      "\022\014\n\004rnti\030\001 \001(\r\022\r\n\005grant\030\002 \001(\r\022&\n\007rar_dci"
      "\030\003 \001(\0132\025.protocol.flex_dl_dci\022\025\n\rcarrier"
      "_index\030\004 \001(\r\"q\n\021flex_dl_broadcast\022\014\n\004typ"
      "e\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022(\n\tbroad_dci\030\003 \001("
      "\0132\025.protocol.flex_dl_dci\022\025\n\rcarrier_inde"
      "x\030\004 \001(\r\"R\n\031flex_pdcch_ofdm_sym_count\022\025\n\r"
      "carrier_index\030\001 \001(\r\022\036\n\026num_pdcch_ofdm_sy"
      "mbols\030\002 \001(\r*3\n\023flex_broadcast_type\022\r\n\tFL"
      "BT_BCCH\020\000\022\r\n\tFLBT_PCCH\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "controller_commands.proto", &protobuf_RegisterTypes);
  ::protocol::protobuf_mac_5fprimitives_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_controller_5fcommands_2eproto

const ::google::protobuf::EnumDescriptor* flex_broadcast_type_descriptor() {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_enum_descriptors[0];
}
bool flex_broadcast_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_data::kRntiFieldNumber;
const int flex_dl_data::kDlDciFieldNumber;
const int flex_dl_data::kCeBitmapFieldNumber;
const int flex_dl_data::kRlcPduFieldNumber;
const int flex_dl_data::kServCellIndexFieldNumber;
const int flex_dl_data::kActDeactCeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_data::flex_dl_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_controller_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_data)
}
flex_dl_data::flex_dl_data(const flex_dl_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ce_bitmap_(from.ce_bitmap_),
      rlc_pdu_(from.rlc_pdu_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dl_dci()) {
    dl_dci_ = new ::protocol::flex_dl_dci(*from.dl_dci_);
  } else {
    dl_dci_ = NULL;
  }
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&act_deact_ce_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(act_deact_ce_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_data)
}

void flex_dl_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dl_dci_, 0, reinterpret_cast<char*>(&act_deact_ce_) -
    reinterpret_cast<char*>(&dl_dci_) + sizeof(act_deact_ce_));
}

flex_dl_data::~flex_dl_data() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_data)
  SharedDtor();
}

void flex_dl_data::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dl_dci_;
  }
}

void flex_dl_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_data::descriptor() {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_data& flex_dl_data::default_instance() {
  protobuf_controller_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_data* flex_dl_data::New(::google::protobuf::Arena* arena) const {
  flex_dl_data* n = new flex_dl_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_data::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_data)
  ce_bitmap_.Clear();
  rlc_pdu_.Clear();
  if (has_dl_dci()) {
    GOOGLE_DCHECK(dl_dci_ != NULL);
    dl_dci_->::protocol::flex_dl_dci::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&act_deact_ce_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(act_deact_ce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_dl_dci dl_dci = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dl_dci()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ce_bitmap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_ce_bitmap())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ce_bitmap())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rlc_pdu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 serv_cell_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_serv_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serv_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 act_deact_ce = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_act_deact_ce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &act_deact_ce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_data)
  return false;
#undef DO_
}

void flex_dl_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional .protocol.flex_dl_dci dl_dci = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dl_dci_, output);
  }

  // repeated uint32 ce_bitmap = 3;
  for (int i = 0, n = this->ce_bitmap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ce_bitmap(i), output);
  }

  // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
  for (unsigned int i = 0, n = this->rlc_pdu_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rlc_pdu(i), output);
  }

  // optional uint32 serv_cell_index = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serv_cell_index(), output);
  }

  // optional uint32 act_deact_ce = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->act_deact_ce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_data)
}

::google::protobuf::uint8* flex_dl_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional .protocol.flex_dl_dci dl_dci = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dl_dci_, deterministic, target);
  }

  // repeated uint32 ce_bitmap = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->ce_bitmap_, target);

  // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
  for (unsigned int i = 0, n = this->rlc_pdu_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->rlc_pdu(i), deterministic, target);
  }

  // optional uint32 serv_cell_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serv_cell_index(), target);
  }

  // optional uint32 act_deact_ce = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->act_deact_ce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_data)
  return target;
}

size_t flex_dl_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 ce_bitmap = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ce_bitmap_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ce_bitmap_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
  {
    unsigned int count = this->rlc_pdu_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rlc_pdu(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .protocol.flex_dl_dci dl_dci = 2;
    if (has_dl_dci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dl_dci_);
    }

    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 serv_cell_index = 5;
    if (has_serv_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serv_cell_index());
    }

    // optional uint32 act_deact_ce = 6;
    if (has_act_deact_ce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->act_deact_ce());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_data)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_data)
    MergeFrom(*source);
  }
}

void flex_dl_data::MergeFrom(const flex_dl_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ce_bitmap_.MergeFrom(from.ce_bitmap_);
  rlc_pdu_.MergeFrom(from.rlc_pdu_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dl_dci()->::protocol::flex_dl_dci::MergeFrom(from.dl_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000004u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      act_deact_ce_ = from.act_deact_ce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_data::CopyFrom(const flex_dl_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_data::IsInitialized() const {
  return true;
}

void flex_dl_data::Swap(flex_dl_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_data::InternalSwap(flex_dl_data* other) {
  ce_bitmap_.InternalSwap(&other->ce_bitmap_);
  rlc_pdu_.InternalSwap(&other->rlc_pdu_);
  std::swap(dl_dci_, other->dl_dci_);
  std::swap(rnti_, other->rnti_);
  std::swap(serv_cell_index_, other->serv_cell_index_);
  std::swap(act_deact_ce_, other->act_deact_ce_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_data::GetMetadata() const {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_data

// optional uint32 rnti = 1;
bool flex_dl_data::has_rnti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_data::set_has_rnti() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_data::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_data::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_dl_data::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.rnti)
  return rnti_;
}
void flex_dl_data::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.rnti)
}

// optional .protocol.flex_dl_dci dl_dci = 2;
bool flex_dl_data::has_dl_dci() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_data::set_has_dl_dci() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_data::clear_has_dl_dci() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_data::clear_dl_dci() {
  if (dl_dci_ != NULL) dl_dci_->::protocol::flex_dl_dci::Clear();
  clear_has_dl_dci();
}
const ::protocol::flex_dl_dci& flex_dl_data::dl_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.dl_dci)
  return dl_dci_ != NULL ? *dl_dci_
                         : *::protocol::flex_dl_dci::internal_default_instance();
}
::protocol::flex_dl_dci* flex_dl_data::mutable_dl_dci() {
  set_has_dl_dci();
  if (dl_dci_ == NULL) {
    dl_dci_ = new ::protocol::flex_dl_dci;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_data.dl_dci)
  return dl_dci_;
}
::protocol::flex_dl_dci* flex_dl_data::release_dl_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_data.dl_dci)
  clear_has_dl_dci();
  ::protocol::flex_dl_dci* temp = dl_dci_;
  dl_dci_ = NULL;
  return temp;
}
void flex_dl_data::set_allocated_dl_dci(::protocol::flex_dl_dci* dl_dci) {
  delete dl_dci_;
  dl_dci_ = dl_dci;
  if (dl_dci) {
    set_has_dl_dci();
  } else {
    clear_has_dl_dci();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_data.dl_dci)
}

// repeated uint32 ce_bitmap = 3;
int flex_dl_data::ce_bitmap_size() const {
  return ce_bitmap_.size();
}
void flex_dl_data::clear_ce_bitmap() {
  ce_bitmap_.Clear();
}
::google::protobuf::uint32 flex_dl_data::ce_bitmap(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.ce_bitmap)
  return ce_bitmap_.Get(index);
}
void flex_dl_data::set_ce_bitmap(int index, ::google::protobuf::uint32 value) {
  ce_bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.ce_bitmap)
}
void flex_dl_data::add_ce_bitmap(::google::protobuf::uint32 value) {
  ce_bitmap_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_data.ce_bitmap)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_data::ce_bitmap() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_data.ce_bitmap)
  return ce_bitmap_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_data::mutable_ce_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_data.ce_bitmap)
  return &ce_bitmap_;
}

// repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
int flex_dl_data::rlc_pdu_size() const {
  return rlc_pdu_.size();
}
void flex_dl_data::clear_rlc_pdu() {
  rlc_pdu_.Clear();
}
const ::protocol::flex_rlc_pdu& flex_dl_data::rlc_pdu(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.rlc_pdu)
  return rlc_pdu_.Get(index);
}
::protocol::flex_rlc_pdu* flex_dl_data::mutable_rlc_pdu(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_data.rlc_pdu)
  return rlc_pdu_.Mutable(index);
}
::protocol::flex_rlc_pdu* flex_dl_data::add_rlc_pdu() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_data.rlc_pdu)
  return rlc_pdu_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu >*
flex_dl_data::mutable_rlc_pdu() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_data.rlc_pdu)
  return &rlc_pdu_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu >&
flex_dl_data::rlc_pdu() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_data.rlc_pdu)
  return rlc_pdu_;
}

// optional uint32 serv_cell_index = 5;
bool flex_dl_data::has_serv_cell_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_dl_data::set_has_serv_cell_index() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_dl_data::clear_has_serv_cell_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_dl_data::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  clear_has_serv_cell_index();
}
::google::protobuf::uint32 flex_dl_data::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.serv_cell_index)
  return serv_cell_index_;
}
void flex_dl_data::set_serv_cell_index(::google::protobuf::uint32 value) {
  set_has_serv_cell_index();
  serv_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.serv_cell_index)
}

// optional uint32 act_deact_ce = 6;
bool flex_dl_data::has_act_deact_ce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_dl_data::set_has_act_deact_ce() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_dl_data::clear_has_act_deact_ce() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_dl_data::clear_act_deact_ce() {
  act_deact_ce_ = 0u;
  clear_has_act_deact_ce();
}
::google::protobuf::uint32 flex_dl_data::act_deact_ce() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.act_deact_ce)
  return act_deact_ce_;
}
void flex_dl_data::set_act_deact_ce(::google::protobuf::uint32 value) {
  set_has_act_deact_ce();
  act_deact_ce_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.act_deact_ce)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_data::kRntiFieldNumber;
const int flex_ul_data::kUlDciFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_data::flex_ul_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_controller_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_data)
}
flex_ul_data::flex_ul_data(const flex_ul_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ul_dci()) {
    ul_dci_ = new ::protocol::flex_ul_dci(*from.ul_dci_);
  } else {
    ul_dci_ = NULL;
  }
  rnti_ = from.rnti_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_data)
}

void flex_ul_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ul_dci_, 0, reinterpret_cast<char*>(&rnti_) -
    reinterpret_cast<char*>(&ul_dci_) + sizeof(rnti_));
}

flex_ul_data::~flex_ul_data() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_data)
  SharedDtor();
}

void flex_ul_data::SharedDtor() {
  if (this != internal_default_instance()) {
    delete ul_dci_;
  }
}

void flex_ul_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_data::descriptor() {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_data& flex_ul_data::default_instance() {
  protobuf_controller_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_data* flex_ul_data::New(::google::protobuf::Arena* arena) const {
  flex_ul_data* n = new flex_ul_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_data::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_data)
  if (has_ul_dci()) {
    GOOGLE_DCHECK(ul_dci_ != NULL);
    ul_dci_->::protocol::flex_ul_dci::Clear();
  }
  rnti_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_ul_dci ul_dci = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ul_dci()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_data)
  return false;
#undef DO_
}

void flex_ul_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional .protocol.flex_ul_dci ul_dci = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ul_dci_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_data)
}

::google::protobuf::uint8* flex_ul_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional .protocol.flex_ul_dci ul_dci = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ul_dci_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_data)
  return target;
}

size_t flex_ul_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_ul_dci ul_dci = 2;
    if (has_ul_dci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ul_dci_);
    }

    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_data)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_data)
    MergeFrom(*source);
  }
}

void flex_ul_data::MergeFrom(const flex_ul_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ul_dci()->::protocol::flex_ul_dci::MergeFrom(from.ul_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_data::CopyFrom(const flex_ul_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_data::IsInitialized() const {
  return true;
}

void flex_ul_data::Swap(flex_ul_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_data::InternalSwap(flex_ul_data* other) {
  std::swap(ul_dci_, other->ul_dci_);
  std::swap(rnti_, other->rnti_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_data::GetMetadata() const {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_data

// optional uint32 rnti = 1;
bool flex_ul_data::has_rnti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ul_data::set_has_rnti() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ul_data::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ul_data::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_ul_data::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_data.rnti)
  return rnti_;
}
void flex_ul_data::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_data.rnti)
}

// optional .protocol.flex_ul_dci ul_dci = 2;
bool flex_ul_data::has_ul_dci() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_data::set_has_ul_dci() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_data::clear_has_ul_dci() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_data::clear_ul_dci() {
  if (ul_dci_ != NULL) ul_dci_->::protocol::flex_ul_dci::Clear();
  clear_has_ul_dci();
}
const ::protocol::flex_ul_dci& flex_ul_data::ul_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_data.ul_dci)
  return ul_dci_ != NULL ? *ul_dci_
                         : *::protocol::flex_ul_dci::internal_default_instance();
}
::protocol::flex_ul_dci* flex_ul_data::mutable_ul_dci() {
  set_has_ul_dci();
  if (ul_dci_ == NULL) {
    ul_dci_ = new ::protocol::flex_ul_dci;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_data.ul_dci)
  return ul_dci_;
}
::protocol::flex_ul_dci* flex_ul_data::release_ul_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_ul_data.ul_dci)
  clear_has_ul_dci();
  ::protocol::flex_ul_dci* temp = ul_dci_;
  ul_dci_ = NULL;
  return temp;
}
void flex_ul_data::set_allocated_ul_dci(::protocol::flex_ul_dci* ul_dci) {
  delete ul_dci_;
  ul_dci_ = ul_dci;
  if (ul_dci) {
    set_has_ul_dci();
  } else {
    clear_has_ul_dci();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ul_data.ul_dci)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_rar::kRntiFieldNumber;
const int flex_dl_rar::kGrantFieldNumber;
const int flex_dl_rar::kRarDciFieldNumber;
const int flex_dl_rar::kCarrierIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_rar::flex_dl_rar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_controller_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_rar)
}
flex_dl_rar::flex_dl_rar(const flex_dl_rar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rar_dci()) {
    rar_dci_ = new ::protocol::flex_dl_dci(*from.rar_dci_);
  } else {
    rar_dci_ = NULL;
  }
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(carrier_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_rar)
}

void flex_dl_rar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rar_dci_, 0, reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&rar_dci_) + sizeof(carrier_index_));
}

flex_dl_rar::~flex_dl_rar() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_rar)
  SharedDtor();
}

void flex_dl_rar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete rar_dci_;
  }
}

void flex_dl_rar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_rar::descriptor() {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_rar& flex_dl_rar::default_instance() {
  protobuf_controller_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_rar* flex_dl_rar::New(::google::protobuf::Arena* arena) const {
  flex_dl_rar* n = new flex_dl_rar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_rar::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_rar)
  if (has_rar_dci()) {
    GOOGLE_DCHECK(rar_dci_ != NULL);
    rar_dci_->::protocol::flex_dl_dci::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&carrier_index_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(carrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_rar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_rar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 grant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_grant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_dl_dci rar_dci = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rar_dci()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 carrier_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_rar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_rar)
  return false;
#undef DO_
}

void flex_dl_rar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_rar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional uint32 grant = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grant(), output);
  }

  // optional .protocol.flex_dl_dci rar_dci = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rar_dci_, output);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->carrier_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_rar)
}

::google::protobuf::uint8* flex_dl_rar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_rar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional uint32 grant = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grant(), target);
  }

  // optional .protocol.flex_dl_dci rar_dci = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rar_dci_, deterministic, target);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->carrier_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_rar)
  return target;
}

size_t flex_dl_rar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_rar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .protocol.flex_dl_dci rar_dci = 3;
    if (has_rar_dci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rar_dci_);
    }

    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 grant = 2;
    if (has_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grant());
    }

    // optional uint32 carrier_index = 4;
    if (has_carrier_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_rar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_rar)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_rar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_rar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_rar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_rar)
    MergeFrom(*source);
  }
}

void flex_dl_rar::MergeFrom(const flex_dl_rar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_rar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rar_dci()->::protocol::flex_dl_dci::MergeFrom(from.rar_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000004u) {
      grant_ = from.grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      carrier_index_ = from.carrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_rar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_rar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_rar::CopyFrom(const flex_dl_rar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_rar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_rar::IsInitialized() const {
  return true;
}

void flex_dl_rar::Swap(flex_dl_rar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_rar::InternalSwap(flex_dl_rar* other) {
  std::swap(rar_dci_, other->rar_dci_);
  std::swap(rnti_, other->rnti_);
  std::swap(grant_, other->grant_);
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_rar::GetMetadata() const {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_rar

// optional uint32 rnti = 1;
bool flex_dl_rar::has_rnti() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_rar::set_has_rnti() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_rar::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_rar::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_dl_rar::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.rnti)
  return rnti_;
}
void flex_dl_rar::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_rar.rnti)
}

// optional uint32 grant = 2;
bool flex_dl_rar::has_grant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_dl_rar::set_has_grant() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_dl_rar::clear_has_grant() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_dl_rar::clear_grant() {
  grant_ = 0u;
  clear_has_grant();
}
::google::protobuf::uint32 flex_dl_rar::grant() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.grant)
  return grant_;
}
void flex_dl_rar::set_grant(::google::protobuf::uint32 value) {
  set_has_grant();
  grant_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_rar.grant)
}

// optional .protocol.flex_dl_dci rar_dci = 3;
bool flex_dl_rar::has_rar_dci() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_rar::set_has_rar_dci() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_rar::clear_has_rar_dci() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_rar::clear_rar_dci() {
  if (rar_dci_ != NULL) rar_dci_->::protocol::flex_dl_dci::Clear();
  clear_has_rar_dci();
}
const ::protocol::flex_dl_dci& flex_dl_rar::rar_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.rar_dci)
  return rar_dci_ != NULL ? *rar_dci_
                         : *::protocol::flex_dl_dci::internal_default_instance();
}
::protocol::flex_dl_dci* flex_dl_rar::mutable_rar_dci() {
  set_has_rar_dci();
  if (rar_dci_ == NULL) {
    rar_dci_ = new ::protocol::flex_dl_dci;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_rar.rar_dci)
  return rar_dci_;
}
::protocol::flex_dl_dci* flex_dl_rar::release_rar_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_rar.rar_dci)
  clear_has_rar_dci();
  ::protocol::flex_dl_dci* temp = rar_dci_;
  rar_dci_ = NULL;
  return temp;
}
void flex_dl_rar::set_allocated_rar_dci(::protocol::flex_dl_dci* rar_dci) {
  delete rar_dci_;
  rar_dci_ = rar_dci;
  if (rar_dci) {
    set_has_rar_dci();
  } else {
    clear_has_rar_dci();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_rar.rar_dci)
}

// optional uint32 carrier_index = 4;
bool flex_dl_rar::has_carrier_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_dl_rar::set_has_carrier_index() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_dl_rar::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_dl_rar::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_dl_rar::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.carrier_index)
  return carrier_index_;
}
void flex_dl_rar::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_rar.carrier_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_broadcast::kTypeFieldNumber;
const int flex_dl_broadcast::kIndexFieldNumber;
const int flex_dl_broadcast::kBroadDciFieldNumber;
const int flex_dl_broadcast::kCarrierIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_broadcast::flex_dl_broadcast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_controller_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_broadcast)
}
flex_dl_broadcast::flex_dl_broadcast(const flex_dl_broadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_broad_dci()) {
    broad_dci_ = new ::protocol::flex_dl_dci(*from.broad_dci_);
  } else {
    broad_dci_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&type_) + sizeof(carrier_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_broadcast)
}

void flex_dl_broadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&broad_dci_, 0, reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&broad_dci_) + sizeof(carrier_index_));
}

flex_dl_broadcast::~flex_dl_broadcast() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_broadcast)
  SharedDtor();
}

void flex_dl_broadcast::SharedDtor() {
  if (this != internal_default_instance()) {
    delete broad_dci_;
  }
}

void flex_dl_broadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_broadcast::descriptor() {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_broadcast& flex_dl_broadcast::default_instance() {
  protobuf_controller_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_broadcast* flex_dl_broadcast::New(::google::protobuf::Arena* arena) const {
  flex_dl_broadcast* n = new flex_dl_broadcast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_broadcast)
  if (has_broad_dci()) {
    GOOGLE_DCHECK(broad_dci_ != NULL);
    broad_dci_->::protocol::flex_dl_dci::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&carrier_index_) -
      reinterpret_cast<char*>(&type_) + sizeof(carrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_broadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_broadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_dl_dci broad_dci = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broad_dci()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 carrier_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_broadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_broadcast)
  return false;
#undef DO_
}

void flex_dl_broadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .protocol.flex_dl_dci broad_dci = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->broad_dci_, output);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->carrier_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_broadcast)
}

::google::protobuf::uint8* flex_dl_broadcast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_broadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .protocol.flex_dl_dci broad_dci = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->broad_dci_, deterministic, target);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->carrier_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_broadcast)
  return target;
}

size_t flex_dl_broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_broadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .protocol.flex_dl_dci broad_dci = 3;
    if (has_broad_dci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->broad_dci_);
    }

    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 carrier_index = 4;
    if (has_carrier_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_broadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_broadcast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_broadcast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_broadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_broadcast)
    MergeFrom(*source);
  }
}

void flex_dl_broadcast::MergeFrom(const flex_dl_broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_broad_dci()->::protocol::flex_dl_dci::MergeFrom(from.broad_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      carrier_index_ = from.carrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_broadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_broadcast::CopyFrom(const flex_dl_broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_broadcast::IsInitialized() const {
  return true;
}

void flex_dl_broadcast::Swap(flex_dl_broadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_broadcast::InternalSwap(flex_dl_broadcast* other) {
  std::swap(broad_dci_, other->broad_dci_);
  std::swap(type_, other->type_);
  std::swap(index_, other->index_);
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_broadcast::GetMetadata() const {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_broadcast

// optional uint32 type = 1;
bool flex_dl_broadcast::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_broadcast::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_broadcast::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_broadcast::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 flex_dl_broadcast::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.type)
  return type_;
}
void flex_dl_broadcast::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_broadcast.type)
}

// optional uint32 index = 2;
bool flex_dl_broadcast::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_dl_broadcast::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_dl_broadcast::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_dl_broadcast::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 flex_dl_broadcast::index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.index)
  return index_;
}
void flex_dl_broadcast::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_broadcast.index)
}

// optional .protocol.flex_dl_dci broad_dci = 3;
bool flex_dl_broadcast::has_broad_dci() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_broadcast::set_has_broad_dci() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_broadcast::clear_has_broad_dci() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_broadcast::clear_broad_dci() {
  if (broad_dci_ != NULL) broad_dci_->::protocol::flex_dl_dci::Clear();
  clear_has_broad_dci();
}
const ::protocol::flex_dl_dci& flex_dl_broadcast::broad_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.broad_dci)
  return broad_dci_ != NULL ? *broad_dci_
                         : *::protocol::flex_dl_dci::internal_default_instance();
}
::protocol::flex_dl_dci* flex_dl_broadcast::mutable_broad_dci() {
  set_has_broad_dci();
  if (broad_dci_ == NULL) {
    broad_dci_ = new ::protocol::flex_dl_dci;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_broadcast.broad_dci)
  return broad_dci_;
}
::protocol::flex_dl_dci* flex_dl_broadcast::release_broad_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_broadcast.broad_dci)
  clear_has_broad_dci();
  ::protocol::flex_dl_dci* temp = broad_dci_;
  broad_dci_ = NULL;
  return temp;
}
void flex_dl_broadcast::set_allocated_broad_dci(::protocol::flex_dl_dci* broad_dci) {
  delete broad_dci_;
  broad_dci_ = broad_dci;
  if (broad_dci) {
    set_has_broad_dci();
  } else {
    clear_has_broad_dci();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_broadcast.broad_dci)
}

// optional uint32 carrier_index = 4;
bool flex_dl_broadcast::has_carrier_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_dl_broadcast::set_has_carrier_index() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_dl_broadcast::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_dl_broadcast::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_dl_broadcast::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.carrier_index)
  return carrier_index_;
}
void flex_dl_broadcast::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_broadcast.carrier_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_pdcch_ofdm_sym_count::kCarrierIndexFieldNumber;
const int flex_pdcch_ofdm_sym_count::kNumPdcchOfdmSymbolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_pdcch_ofdm_sym_count::flex_pdcch_ofdm_sym_count()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_controller_5fcommands_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_pdcch_ofdm_sym_count)
}
flex_pdcch_ofdm_sym_count::flex_pdcch_ofdm_sym_count(const flex_pdcch_ofdm_sym_count& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&carrier_index_, &from.carrier_index_,
    reinterpret_cast<char*>(&num_pdcch_ofdm_symbols_) -
    reinterpret_cast<char*>(&carrier_index_) + sizeof(num_pdcch_ofdm_symbols_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_pdcch_ofdm_sym_count)
}

void flex_pdcch_ofdm_sym_count::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&carrier_index_, 0, reinterpret_cast<char*>(&num_pdcch_ofdm_symbols_) -
    reinterpret_cast<char*>(&carrier_index_) + sizeof(num_pdcch_ofdm_symbols_));
}

flex_pdcch_ofdm_sym_count::~flex_pdcch_ofdm_sym_count() {
  // @@protoc_insertion_point(destructor:protocol.flex_pdcch_ofdm_sym_count)
  SharedDtor();
}

void flex_pdcch_ofdm_sym_count::SharedDtor() {
}

void flex_pdcch_ofdm_sym_count::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_pdcch_ofdm_sym_count::descriptor() {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_pdcch_ofdm_sym_count& flex_pdcch_ofdm_sym_count::default_instance() {
  protobuf_controller_5fcommands_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_pdcch_ofdm_sym_count* flex_pdcch_ofdm_sym_count::New(::google::protobuf::Arena* arena) const {
  flex_pdcch_ofdm_sym_count* n = new flex_pdcch_ofdm_sym_count;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_pdcch_ofdm_sym_count::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_pdcch_ofdm_sym_count)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&carrier_index_, 0, reinterpret_cast<char*>(&num_pdcch_ofdm_symbols_) -
      reinterpret_cast<char*>(&carrier_index_) + sizeof(num_pdcch_ofdm_symbols_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_pdcch_ofdm_sym_count::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_pdcch_ofdm_sym_count)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 carrier_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_pdcch_ofdm_symbols = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_pdcch_ofdm_symbols();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_pdcch_ofdm_symbols_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_pdcch_ofdm_sym_count)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_pdcch_ofdm_sym_count)
  return false;
#undef DO_
}

void flex_pdcch_ofdm_sym_count::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_pdcch_ofdm_sym_count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->carrier_index(), output);
  }

  // optional uint32 num_pdcch_ofdm_symbols = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_pdcch_ofdm_symbols(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_pdcch_ofdm_sym_count)
}

::google::protobuf::uint8* flex_pdcch_ofdm_sym_count::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_pdcch_ofdm_sym_count)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->carrier_index(), target);
  }

  // optional uint32 num_pdcch_ofdm_symbols = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_pdcch_ofdm_symbols(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_pdcch_ofdm_sym_count)
  return target;
}

size_t flex_pdcch_ofdm_sym_count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_pdcch_ofdm_sym_count)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 carrier_index = 1;
    if (has_carrier_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

    // optional uint32 num_pdcch_ofdm_symbols = 2;
    if (has_num_pdcch_ofdm_symbols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_pdcch_ofdm_symbols());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_pdcch_ofdm_sym_count::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_pdcch_ofdm_sym_count)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_pdcch_ofdm_sym_count* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_pdcch_ofdm_sym_count>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_pdcch_ofdm_sym_count)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_pdcch_ofdm_sym_count)
    MergeFrom(*source);
  }
}

void flex_pdcch_ofdm_sym_count::MergeFrom(const flex_pdcch_ofdm_sym_count& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_pdcch_ofdm_sym_count)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_pdcch_ofdm_symbols_ = from.num_pdcch_ofdm_symbols_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_pdcch_ofdm_sym_count::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_pdcch_ofdm_sym_count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_pdcch_ofdm_sym_count::CopyFrom(const flex_pdcch_ofdm_sym_count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_pdcch_ofdm_sym_count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_pdcch_ofdm_sym_count::IsInitialized() const {
  return true;
}

void flex_pdcch_ofdm_sym_count::Swap(flex_pdcch_ofdm_sym_count* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_pdcch_ofdm_sym_count::InternalSwap(flex_pdcch_ofdm_sym_count* other) {
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(num_pdcch_ofdm_symbols_, other->num_pdcch_ofdm_symbols_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_pdcch_ofdm_sym_count::GetMetadata() const {
  protobuf_controller_5fcommands_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_controller_5fcommands_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_pdcch_ofdm_sym_count

// optional uint32 carrier_index = 1;
bool flex_pdcch_ofdm_sym_count::has_carrier_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_pdcch_ofdm_sym_count::set_has_carrier_index() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_pdcch_ofdm_sym_count::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_pdcch_ofdm_sym_count::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_pdcch_ofdm_sym_count::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcch_ofdm_sym_count.carrier_index)
  return carrier_index_;
}
void flex_pdcch_ofdm_sym_count::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcch_ofdm_sym_count.carrier_index)
}

// optional uint32 num_pdcch_ofdm_symbols = 2;
bool flex_pdcch_ofdm_sym_count::has_num_pdcch_ofdm_symbols() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_pdcch_ofdm_sym_count::set_has_num_pdcch_ofdm_symbols() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_pdcch_ofdm_sym_count::clear_has_num_pdcch_ofdm_symbols() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_pdcch_ofdm_sym_count::clear_num_pdcch_ofdm_symbols() {
  num_pdcch_ofdm_symbols_ = 0u;
  clear_has_num_pdcch_ofdm_symbols();
}
::google::protobuf::uint32 flex_pdcch_ofdm_sym_count::num_pdcch_ofdm_symbols() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcch_ofdm_sym_count.num_pdcch_ofdm_symbols)
  return num_pdcch_ofdm_symbols_;
}
void flex_pdcch_ofdm_sym_count::set_num_pdcch_ofdm_symbols(::google::protobuf::uint32 value) {
  set_has_num_pdcch_ofdm_symbols();
  num_pdcch_ofdm_symbols_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcch_ofdm_sym_count.num_pdcch_ofdm_symbols)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
