// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_messages.proto

#ifndef PROTOBUF_config_5fmessages_2eproto__INCLUDED
#define PROTOBUF_config_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "config_common.pb.h"
// @@protoc_insertion_point(includes)
namespace protocol {
class flex_a1_event;
class flex_a1_eventDefaultTypeInternal;
extern flex_a1_eventDefaultTypeInternal _flex_a1_event_default_instance_;
class flex_a2_event;
class flex_a2_eventDefaultTypeInternal;
extern flex_a2_eventDefaultTypeInternal _flex_a2_event_default_instance_;
class flex_a3_event;
class flex_a3_eventDefaultTypeInternal;
extern flex_a3_eventDefaultTypeInternal _flex_a3_event_default_instance_;
class flex_a4_event;
class flex_a4_eventDefaultTypeInternal;
extern flex_a4_eventDefaultTypeInternal _flex_a4_event_default_instance_;
class flex_a5_event;
class flex_a5_eventDefaultTypeInternal;
extern flex_a5_eventDefaultTypeInternal _flex_a5_event_default_instance_;
class flex_cell_config;
class flex_cell_configDefaultTypeInternal;
extern flex_cell_configDefaultTypeInternal _flex_cell_config_default_instance_;
class flex_cqi_config;
class flex_cqi_configDefaultTypeInternal;
extern flex_cqi_configDefaultTypeInternal _flex_cqi_config_default_instance_;
class flex_drx_config;
class flex_drx_configDefaultTypeInternal;
extern flex_drx_configDefaultTypeInternal _flex_drx_config_default_instance_;
class flex_gummei;
class flex_gummeiDefaultTypeInternal;
extern flex_gummeiDefaultTypeInternal _flex_gummei_default_instance_;
class flex_lc_config;
class flex_lc_configDefaultTypeInternal;
extern flex_lc_configDefaultTypeInternal _flex_lc_config_default_instance_;
class flex_lc_ue_config;
class flex_lc_ue_configDefaultTypeInternal;
extern flex_lc_ue_configDefaultTypeInternal _flex_lc_ue_config_default_instance_;
class flex_measurement_event;
class flex_measurement_eventDefaultTypeInternal;
extern flex_measurement_eventDefaultTypeInternal _flex_measurement_event_default_instance_;
class flex_measurement_info;
class flex_measurement_infoDefaultTypeInternal;
extern flex_measurement_infoDefaultTypeInternal _flex_measurement_info_default_instance_;
class flex_per_event;
class flex_per_eventDefaultTypeInternal;
extern flex_per_eventDefaultTypeInternal _flex_per_event_default_instance_;
class flex_plmn;
class flex_plmnDefaultTypeInternal;
extern flex_plmnDefaultTypeInternal _flex_plmn_default_instance_;
class flex_s1ap_config;
class flex_s1ap_configDefaultTypeInternal;
extern flex_s1ap_configDefaultTypeInternal _flex_s1ap_config_default_instance_;
class flex_s1ap_mme;
class flex_s1ap_mmeDefaultTypeInternal;
extern flex_s1ap_mmeDefaultTypeInternal _flex_s1ap_mme_default_instance_;
class flex_scell_config;
class flex_scell_configDefaultTypeInternal;
extern flex_scell_configDefaultTypeInternal _flex_scell_config_default_instance_;
class flex_si_config;
class flex_si_configDefaultTypeInternal;
extern flex_si_configDefaultTypeInternal _flex_si_config_default_instance_;
class flex_si_message;
class flex_si_messageDefaultTypeInternal;
extern flex_si_messageDefaultTypeInternal _flex_si_message_default_instance_;
class flex_slice;
class flex_sliceDefaultTypeInternal;
extern flex_sliceDefaultTypeInternal _flex_slice_default_instance_;
class flex_slice_config;
class flex_slice_configDefaultTypeInternal;
extern flex_slice_configDefaultTypeInternal _flex_slice_config_default_instance_;
class flex_slice_dl_ul_config;
class flex_slice_dl_ul_configDefaultTypeInternal;
extern flex_slice_dl_ul_configDefaultTypeInternal _flex_slice_dl_ul_config_default_instance_;
class flex_slice_static;
class flex_slice_staticDefaultTypeInternal;
extern flex_slice_staticDefaultTypeInternal _flex_slice_static_default_instance_;
class flex_sps_config;
class flex_sps_configDefaultTypeInternal;
extern flex_sps_configDefaultTypeInternal _flex_sps_config_default_instance_;
class flex_sr_config;
class flex_sr_configDefaultTypeInternal;
extern flex_sr_configDefaultTypeInternal _flex_sr_config_default_instance_;
class flex_ue_capabilities;
class flex_ue_capabilitiesDefaultTypeInternal;
extern flex_ue_capabilitiesDefaultTypeInternal _flex_ue_capabilities_default_instance_;
class flex_ue_config;
class flex_ue_configDefaultTypeInternal;
extern flex_ue_configDefaultTypeInternal _flex_ue_config_default_instance_;
}  // namespace protocol

namespace protocol {

namespace protobuf_config_5fmessages_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_config_5fmessages_2eproto

// ===================================================================

class flex_cell_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_cell_config) */ {
 public:
  flex_cell_config();
  virtual ~flex_cell_config();

  flex_cell_config(const flex_cell_config& from);

  inline flex_cell_config& operator=(const flex_cell_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_cell_config& default_instance();

  static inline const flex_cell_config* internal_default_instance() {
    return reinterpret_cast<const flex_cell_config*>(
               &_flex_cell_config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(flex_cell_config* other);

  // implements Message ----------------------------------------------

  inline flex_cell_config* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_cell_config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_cell_config& from);
  void MergeFrom(const flex_cell_config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_cell_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  int mbsfn_subframe_config_rfperiod_size() const;
  void clear_mbsfn_subframe_config_rfperiod();
  static const int kMbsfnSubframeConfigRfperiodFieldNumber = 19;
  ::google::protobuf::uint32 mbsfn_subframe_config_rfperiod(int index) const;
  void set_mbsfn_subframe_config_rfperiod(int index, ::google::protobuf::uint32 value);
  void add_mbsfn_subframe_config_rfperiod(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mbsfn_subframe_config_rfperiod() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mbsfn_subframe_config_rfperiod();

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  int mbsfn_subframe_config_rfoffset_size() const;
  void clear_mbsfn_subframe_config_rfoffset();
  static const int kMbsfnSubframeConfigRfoffsetFieldNumber = 20;
  ::google::protobuf::uint32 mbsfn_subframe_config_rfoffset(int index) const;
  void set_mbsfn_subframe_config_rfoffset(int index, ::google::protobuf::uint32 value);
  void add_mbsfn_subframe_config_rfoffset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mbsfn_subframe_config_rfoffset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mbsfn_subframe_config_rfoffset();

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  int mbsfn_subframe_config_sfalloc_size() const;
  void clear_mbsfn_subframe_config_sfalloc();
  static const int kMbsfnSubframeConfigSfallocFieldNumber = 21;
  ::google::protobuf::uint32 mbsfn_subframe_config_sfalloc(int index) const;
  void set_mbsfn_subframe_config_sfalloc(int index, ::google::protobuf::uint32 value);
  void add_mbsfn_subframe_config_sfalloc(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mbsfn_subframe_config_sfalloc() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mbsfn_subframe_config_sfalloc();

  // repeated .protocol.flex_plmn plmn_id = 40;
  int plmn_id_size() const;
  void clear_plmn_id();
  static const int kPlmnIdFieldNumber = 40;
  const ::protocol::flex_plmn& plmn_id(int index) const;
  ::protocol::flex_plmn* mutable_plmn_id(int index);
  ::protocol::flex_plmn* add_plmn_id();
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >*
      mutable_plmn_id();
  const ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >&
      plmn_id() const;

  // optional .protocol.flex_si_config si_config = 9;
  bool has_si_config() const;
  void clear_si_config();
  static const int kSiConfigFieldNumber = 9;
  const ::protocol::flex_si_config& si_config() const;
  ::protocol::flex_si_config* mutable_si_config();
  ::protocol::flex_si_config* release_si_config();
  void set_allocated_si_config(::protocol::flex_si_config* si_config);

  // optional .protocol.flex_slice_config slice_config = 42;
  bool has_slice_config() const;
  void clear_slice_config();
  static const int kSliceConfigFieldNumber = 42;
  const ::protocol::flex_slice_config& slice_config() const;
  ::protocol::flex_slice_config* mutable_slice_config();
  ::protocol::flex_slice_config* release_slice_config();
  void set_allocated_slice_config(::protocol::flex_slice_config* slice_config);

  // optional uint32 phy_cell_id = 1;
  bool has_phy_cell_id() const;
  void clear_phy_cell_id();
  static const int kPhyCellIdFieldNumber = 1;
  ::google::protobuf::uint32 phy_cell_id() const;
  void set_phy_cell_id(::google::protobuf::uint32 value);

  // optional uint32 pusch_hopping_offset = 3;
  bool has_pusch_hopping_offset() const;
  void clear_pusch_hopping_offset();
  static const int kPuschHoppingOffsetFieldNumber = 3;
  ::google::protobuf::uint32 pusch_hopping_offset() const;
  void set_pusch_hopping_offset(::google::protobuf::uint32 value);

  // optional uint32 hopping_mode = 4;
  bool has_hopping_mode() const;
  void clear_hopping_mode();
  static const int kHoppingModeFieldNumber = 4;
  ::google::protobuf::uint32 hopping_mode() const;
  void set_hopping_mode(::google::protobuf::uint32 value);

  // optional uint32 n_sb = 5;
  bool has_n_sb() const;
  void clear_n_sb();
  static const int kNSbFieldNumber = 5;
  ::google::protobuf::uint32 n_sb() const;
  void set_n_sb(::google::protobuf::uint32 value);

  // optional uint32 phich_resource = 6;
  bool has_phich_resource() const;
  void clear_phich_resource();
  static const int kPhichResourceFieldNumber = 6;
  ::google::protobuf::uint32 phich_resource() const;
  void set_phich_resource(::google::protobuf::uint32 value);

  // optional uint32 phich_duration = 7;
  bool has_phich_duration() const;
  void clear_phich_duration();
  static const int kPhichDurationFieldNumber = 7;
  ::google::protobuf::uint32 phich_duration() const;
  void set_phich_duration(::google::protobuf::uint32 value);

  // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
  bool has_init_nr_pdcch_ofdm_sym() const;
  void clear_init_nr_pdcch_ofdm_sym();
  static const int kInitNrPDCCHOFDMSymFieldNumber = 8;
  ::google::protobuf::uint32 init_nr_pdcch_ofdm_sym() const;
  void set_init_nr_pdcch_ofdm_sym(::google::protobuf::uint32 value);

  // optional uint32 dl_bandwidth = 10;
  bool has_dl_bandwidth() const;
  void clear_dl_bandwidth();
  static const int kDlBandwidthFieldNumber = 10;
  ::google::protobuf::uint32 dl_bandwidth() const;
  void set_dl_bandwidth(::google::protobuf::uint32 value);

  // optional uint32 ul_bandwidth = 11;
  bool has_ul_bandwidth() const;
  void clear_ul_bandwidth();
  static const int kUlBandwidthFieldNumber = 11;
  ::google::protobuf::uint32 ul_bandwidth() const;
  void set_ul_bandwidth(::google::protobuf::uint32 value);

  // optional uint32 ul_cyclic_prefix_length = 13;
  bool has_ul_cyclic_prefix_length() const;
  void clear_ul_cyclic_prefix_length();
  static const int kUlCyclicPrefixLengthFieldNumber = 13;
  ::google::protobuf::uint32 ul_cyclic_prefix_length() const;
  void set_ul_cyclic_prefix_length(::google::protobuf::uint32 value);

  // optional uint32 dl_cyclic_prefix_length = 14;
  bool has_dl_cyclic_prefix_length() const;
  void clear_dl_cyclic_prefix_length();
  static const int kDlCyclicPrefixLengthFieldNumber = 14;
  ::google::protobuf::uint32 dl_cyclic_prefix_length() const;
  void set_dl_cyclic_prefix_length(::google::protobuf::uint32 value);

  // optional uint32 antenna_ports_count = 15;
  bool has_antenna_ports_count() const;
  void clear_antenna_ports_count();
  static const int kAntennaPortsCountFieldNumber = 15;
  ::google::protobuf::uint32 antenna_ports_count() const;
  void set_antenna_ports_count(::google::protobuf::uint32 value);

  // optional uint32 duplex_mode = 16;
  bool has_duplex_mode() const;
  void clear_duplex_mode();
  static const int kDuplexModeFieldNumber = 16;
  ::google::protobuf::uint32 duplex_mode() const;
  void set_duplex_mode(::google::protobuf::uint32 value);

  // optional uint32 subframe_assignment = 17;
  bool has_subframe_assignment() const;
  void clear_subframe_assignment();
  static const int kSubframeAssignmentFieldNumber = 17;
  ::google::protobuf::uint32 subframe_assignment() const;
  void set_subframe_assignment(::google::protobuf::uint32 value);

  // optional uint32 special_subframe_patterns = 18;
  bool has_special_subframe_patterns() const;
  void clear_special_subframe_patterns();
  static const int kSpecialSubframePatternsFieldNumber = 18;
  ::google::protobuf::uint32 special_subframe_patterns() const;
  void set_special_subframe_patterns(::google::protobuf::uint32 value);

  // optional uint32 prach_config_index = 22;
  bool has_prach_config_index() const;
  void clear_prach_config_index();
  static const int kPrachConfigIndexFieldNumber = 22;
  ::google::protobuf::uint32 prach_config_index() const;
  void set_prach_config_index(::google::protobuf::uint32 value);

  // optional uint32 prach_freq_offset = 23;
  bool has_prach_freq_offset() const;
  void clear_prach_freq_offset();
  static const int kPrachFreqOffsetFieldNumber = 23;
  ::google::protobuf::uint32 prach_freq_offset() const;
  void set_prach_freq_offset(::google::protobuf::uint32 value);

  // optional uint32 ra_response_window_size = 24;
  bool has_ra_response_window_size() const;
  void clear_ra_response_window_size();
  static const int kRaResponseWindowSizeFieldNumber = 24;
  ::google::protobuf::uint32 ra_response_window_size() const;
  void set_ra_response_window_size(::google::protobuf::uint32 value);

  // optional uint32 mac_contention_resolution_timer = 25;
  bool has_mac_contention_resolution_timer() const;
  void clear_mac_contention_resolution_timer();
  static const int kMacContentionResolutionTimerFieldNumber = 25;
  ::google::protobuf::uint32 mac_contention_resolution_timer() const;
  void set_mac_contention_resolution_timer(::google::protobuf::uint32 value);

  // optional uint32 max_HARQ_Msg3Tx = 26;
  bool has_max_harq_msg3tx() const;
  void clear_max_harq_msg3tx();
  static const int kMaxHARQMsg3TxFieldNumber = 26;
  ::google::protobuf::uint32 max_harq_msg3tx() const;
  void set_max_harq_msg3tx(::google::protobuf::uint32 value);

  // optional uint32 n1PUCCH_AN = 27;
  bool has_n1pucch_an() const;
  void clear_n1pucch_an();
  static const int kN1PUCCHANFieldNumber = 27;
  ::google::protobuf::uint32 n1pucch_an() const;
  void set_n1pucch_an(::google::protobuf::uint32 value);

  // optional uint32 deltaPUCCH_shift = 28;
  bool has_deltapucch_shift() const;
  void clear_deltapucch_shift();
  static const int kDeltaPUCCHShiftFieldNumber = 28;
  ::google::protobuf::uint32 deltapucch_shift() const;
  void set_deltapucch_shift(::google::protobuf::uint32 value);

  // optional uint32 nRB_cqi = 29;
  bool has_nrb_cqi() const;
  void clear_nrb_cqi();
  static const int kNRBCqiFieldNumber = 29;
  ::google::protobuf::uint32 nrb_cqi() const;
  void set_nrb_cqi(::google::protobuf::uint32 value);

  // optional uint32 srs_subframe_config = 30;
  bool has_srs_subframe_config() const;
  void clear_srs_subframe_config();
  static const int kSrsSubframeConfigFieldNumber = 30;
  ::google::protobuf::uint32 srs_subframe_config() const;
  void set_srs_subframe_config(::google::protobuf::uint32 value);

  // optional uint32 srs_bw_config = 31;
  bool has_srs_bw_config() const;
  void clear_srs_bw_config();
  static const int kSrsBwConfigFieldNumber = 31;
  ::google::protobuf::uint32 srs_bw_config() const;
  void set_srs_bw_config(::google::protobuf::uint32 value);

  // optional uint32 srs_mac_up_pts = 32;
  bool has_srs_mac_up_pts() const;
  void clear_srs_mac_up_pts();
  static const int kSrsMacUpPtsFieldNumber = 32;
  ::google::protobuf::uint32 srs_mac_up_pts() const;
  void set_srs_mac_up_pts(::google::protobuf::uint32 value);

  // optional uint32 enable_64QAM = 33;
  bool has_enable_64qam() const;
  void clear_enable_64qam();
  static const int kEnable64QAMFieldNumber = 33;
  ::google::protobuf::uint32 enable_64qam() const;
  void set_enable_64qam(::google::protobuf::uint32 value);

  // optional uint32 carrier_index = 34;
  bool has_carrier_index() const;
  void clear_carrier_index();
  static const int kCarrierIndexFieldNumber = 34;
  ::google::protobuf::uint32 carrier_index() const;
  void set_carrier_index(::google::protobuf::uint32 value);

  // optional uint32 dl_freq = 35;
  bool has_dl_freq() const;
  void clear_dl_freq();
  static const int kDlFreqFieldNumber = 35;
  ::google::protobuf::uint32 dl_freq() const;
  void set_dl_freq(::google::protobuf::uint32 value);

  // optional uint32 ul_freq = 36;
  bool has_ul_freq() const;
  void clear_ul_freq();
  static const int kUlFreqFieldNumber = 36;
  ::google::protobuf::uint32 ul_freq() const;
  void set_ul_freq(::google::protobuf::uint32 value);

  // optional uint32 eutra_band = 37;
  bool has_eutra_band() const;
  void clear_eutra_band();
  static const int kEutraBandFieldNumber = 37;
  ::google::protobuf::uint32 eutra_band() const;
  void set_eutra_band(::google::protobuf::uint32 value);

  // optional int32 dl_pdsch_power = 38;
  bool has_dl_pdsch_power() const;
  void clear_dl_pdsch_power();
  static const int kDlPdschPowerFieldNumber = 38;
  ::google::protobuf::int32 dl_pdsch_power() const;
  void set_dl_pdsch_power(::google::protobuf::int32 value);

  // optional int32 ul_pusch_power = 39;
  bool has_ul_pusch_power() const;
  void clear_ul_pusch_power();
  static const int kUlPuschPowerFieldNumber = 39;
  ::google::protobuf::int32 ul_pusch_power() const;
  void set_ul_pusch_power(::google::protobuf::int32 value);

  // optional bool x2_ho_net_control = 43;
  bool has_x2_ho_net_control() const;
  void clear_x2_ho_net_control();
  static const int kX2HoNetControlFieldNumber = 43;
  bool x2_ho_net_control() const;
  void set_x2_ho_net_control(bool value);

  // @@protoc_insertion_point(class_scope:protocol.flex_cell_config)
 private:
  void set_has_phy_cell_id();
  void clear_has_phy_cell_id();
  void set_has_pusch_hopping_offset();
  void clear_has_pusch_hopping_offset();
  void set_has_hopping_mode();
  void clear_has_hopping_mode();
  void set_has_n_sb();
  void clear_has_n_sb();
  void set_has_phich_resource();
  void clear_has_phich_resource();
  void set_has_phich_duration();
  void clear_has_phich_duration();
  void set_has_init_nr_pdcch_ofdm_sym();
  void clear_has_init_nr_pdcch_ofdm_sym();
  void set_has_si_config();
  void clear_has_si_config();
  void set_has_dl_bandwidth();
  void clear_has_dl_bandwidth();
  void set_has_ul_bandwidth();
  void clear_has_ul_bandwidth();
  void set_has_ul_cyclic_prefix_length();
  void clear_has_ul_cyclic_prefix_length();
  void set_has_dl_cyclic_prefix_length();
  void clear_has_dl_cyclic_prefix_length();
  void set_has_antenna_ports_count();
  void clear_has_antenna_ports_count();
  void set_has_duplex_mode();
  void clear_has_duplex_mode();
  void set_has_subframe_assignment();
  void clear_has_subframe_assignment();
  void set_has_special_subframe_patterns();
  void clear_has_special_subframe_patterns();
  void set_has_prach_config_index();
  void clear_has_prach_config_index();
  void set_has_prach_freq_offset();
  void clear_has_prach_freq_offset();
  void set_has_ra_response_window_size();
  void clear_has_ra_response_window_size();
  void set_has_mac_contention_resolution_timer();
  void clear_has_mac_contention_resolution_timer();
  void set_has_max_harq_msg3tx();
  void clear_has_max_harq_msg3tx();
  void set_has_n1pucch_an();
  void clear_has_n1pucch_an();
  void set_has_deltapucch_shift();
  void clear_has_deltapucch_shift();
  void set_has_nrb_cqi();
  void clear_has_nrb_cqi();
  void set_has_srs_subframe_config();
  void clear_has_srs_subframe_config();
  void set_has_srs_bw_config();
  void clear_has_srs_bw_config();
  void set_has_srs_mac_up_pts();
  void clear_has_srs_mac_up_pts();
  void set_has_enable_64qam();
  void clear_has_enable_64qam();
  void set_has_carrier_index();
  void clear_has_carrier_index();
  void set_has_dl_freq();
  void clear_has_dl_freq();
  void set_has_ul_freq();
  void clear_has_ul_freq();
  void set_has_eutra_band();
  void clear_has_eutra_band();
  void set_has_dl_pdsch_power();
  void clear_has_dl_pdsch_power();
  void set_has_ul_pusch_power();
  void clear_has_ul_pusch_power();
  void set_has_slice_config();
  void clear_has_slice_config();
  void set_has_x2_ho_net_control();
  void clear_has_x2_ho_net_control();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mbsfn_subframe_config_rfperiod_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mbsfn_subframe_config_rfoffset_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mbsfn_subframe_config_sfalloc_;
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn > plmn_id_;
  ::protocol::flex_si_config* si_config_;
  ::protocol::flex_slice_config* slice_config_;
  ::google::protobuf::uint32 phy_cell_id_;
  ::google::protobuf::uint32 pusch_hopping_offset_;
  ::google::protobuf::uint32 hopping_mode_;
  ::google::protobuf::uint32 n_sb_;
  ::google::protobuf::uint32 phich_resource_;
  ::google::protobuf::uint32 phich_duration_;
  ::google::protobuf::uint32 init_nr_pdcch_ofdm_sym_;
  ::google::protobuf::uint32 dl_bandwidth_;
  ::google::protobuf::uint32 ul_bandwidth_;
  ::google::protobuf::uint32 ul_cyclic_prefix_length_;
  ::google::protobuf::uint32 dl_cyclic_prefix_length_;
  ::google::protobuf::uint32 antenna_ports_count_;
  ::google::protobuf::uint32 duplex_mode_;
  ::google::protobuf::uint32 subframe_assignment_;
  ::google::protobuf::uint32 special_subframe_patterns_;
  ::google::protobuf::uint32 prach_config_index_;
  ::google::protobuf::uint32 prach_freq_offset_;
  ::google::protobuf::uint32 ra_response_window_size_;
  ::google::protobuf::uint32 mac_contention_resolution_timer_;
  ::google::protobuf::uint32 max_harq_msg3tx_;
  ::google::protobuf::uint32 n1pucch_an_;
  ::google::protobuf::uint32 deltapucch_shift_;
  ::google::protobuf::uint32 nrb_cqi_;
  ::google::protobuf::uint32 srs_subframe_config_;
  ::google::protobuf::uint32 srs_bw_config_;
  ::google::protobuf::uint32 srs_mac_up_pts_;
  ::google::protobuf::uint32 enable_64qam_;
  ::google::protobuf::uint32 carrier_index_;
  ::google::protobuf::uint32 dl_freq_;
  ::google::protobuf::uint32 ul_freq_;
  ::google::protobuf::uint32 eutra_band_;
  ::google::protobuf::int32 dl_pdsch_power_;
  ::google::protobuf::int32 ul_pusch_power_;
  bool x2_ho_net_control_;
  mutable int _cached_size_;
  friend struct protobuf_config_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_slice_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_slice_config) */ {
 public:
  flex_slice_config();
  virtual ~flex_slice_config();

  flex_slice_config(const flex_slice_config& from);

  inline flex_slice_config& operator=(const flex_slice_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_slice_config& default_instance();

  static inline const flex_slice_config* internal_default_instance() {
    return reinterpret_cast<const flex_slice_config*>(
               &_flex_slice_config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(flex_slice_config* other);

  // implements Message ----------------------------------------------

  inline flex_slice_config* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_slice_config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_slice_config& from);
  void MergeFrom(const flex_slice_config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_slice_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.flex_slice_dl_ul_config dl = 6;
  bool has_dl() const;
  void clear_dl();
  static const int kDlFieldNumber = 6;
  const ::protocol::flex_slice_dl_ul_config& dl() const;
  ::protocol::flex_slice_dl_ul_config* mutable_dl();
  ::protocol::flex_slice_dl_ul_config* release_dl();
  void set_allocated_dl(::protocol::flex_slice_dl_ul_config* dl);

  // optional .protocol.flex_slice_dl_ul_config ul = 7;
  bool has_ul() const;
  void clear_ul();
  static const int kUlFieldNumber = 7;
  const ::protocol::flex_slice_dl_ul_config& ul() const;
  ::protocol::flex_slice_dl_ul_config* mutable_ul();
  ::protocol::flex_slice_dl_ul_config* release_ul();
  void set_allocated_ul(::protocol::flex_slice_dl_ul_config* ul);

  // @@protoc_insertion_point(class_scope:protocol.flex_slice_config)
 private:
  void set_has_dl();
  void clear_has_dl();
  void set_has_ul();
  void clear_has_ul();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::protocol::flex_slice_dl_ul_config* dl_;
  ::protocol::flex_slice_dl_ul_config* ul_;
  friend struct protobuf_config_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_ue_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ue_config) */ {
 public:
  flex_ue_config();
  virtual ~flex_ue_config();

  flex_ue_config(const flex_ue_config& from);

  inline flex_ue_config& operator=(const flex_ue_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_ue_config& default_instance();

  static inline const flex_ue_config* internal_default_instance() {
    return reinterpret_cast<const flex_ue_config*>(
               &_flex_ue_config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(flex_ue_config* other);

  // implements Message ----------------------------------------------

  inline flex_ue_config* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_ue_config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_ue_config& from);
  void MergeFrom(const flex_ue_config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_ue_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.flex_scell_config scell_config = 28;
  int scell_config_size() const;
  void clear_scell_config();
  static const int kScellConfigFieldNumber = 28;
  const ::protocol::flex_scell_config& scell_config(int index) const;
  ::protocol::flex_scell_config* mutable_scell_config(int index);
  ::protocol::flex_scell_config* add_scell_config();
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config >*
      mutable_scell_config();
  const ::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config >&
      scell_config() const;

  // optional .protocol.flex_drx_config drx_config = 2;
  bool has_drx_config() const;
  void clear_drx_config();
  static const int kDrxConfigFieldNumber = 2;
  const ::protocol::flex_drx_config& drx_config() const;
  ::protocol::flex_drx_config* mutable_drx_config();
  ::protocol::flex_drx_config* release_drx_config();
  void set_allocated_drx_config(::protocol::flex_drx_config* drx_config);

  // optional .protocol.flex_sps_config sps_config = 6;
  bool has_sps_config() const;
  void clear_sps_config();
  static const int kSpsConfigFieldNumber = 6;
  const ::protocol::flex_sps_config& sps_config() const;
  ::protocol::flex_sps_config* mutable_sps_config();
  ::protocol::flex_sps_config* release_sps_config();
  void set_allocated_sps_config(::protocol::flex_sps_config* sps_config);

  // optional .protocol.flex_sr_config sr_config = 7;
  bool has_sr_config() const;
  void clear_sr_config();
  static const int kSrConfigFieldNumber = 7;
  const ::protocol::flex_sr_config& sr_config() const;
  ::protocol::flex_sr_config* mutable_sr_config();
  ::protocol::flex_sr_config* release_sr_config();
  void set_allocated_sr_config(::protocol::flex_sr_config* sr_config);

  // optional .protocol.flex_cqi_config cqi_config = 8;
  bool has_cqi_config() const;
  void clear_cqi_config();
  static const int kCqiConfigFieldNumber = 8;
  const ::protocol::flex_cqi_config& cqi_config() const;
  ::protocol::flex_cqi_config* mutable_cqi_config();
  ::protocol::flex_cqi_config* release_cqi_config();
  void set_allocated_cqi_config(::protocol::flex_cqi_config* cqi_config);

  // optional .protocol.flex_ue_capabilities capabilities = 12;
  bool has_capabilities() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 12;
  const ::protocol::flex_ue_capabilities& capabilities() const;
  ::protocol::flex_ue_capabilities* mutable_capabilities();
  ::protocol::flex_ue_capabilities* release_capabilities();
  void set_allocated_capabilities(::protocol::flex_ue_capabilities* capabilities);

  // optional .protocol.flex_measurement_info info = 33;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 33;
  const ::protocol::flex_measurement_info& info() const;
  ::protocol::flex_measurement_info* mutable_info();
  ::protocol::flex_measurement_info* release_info();
  void set_allocated_info(::protocol::flex_measurement_info* info);

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  void clear_rnti();
  static const int kRntiFieldNumber = 1;
  ::google::protobuf::uint32 rnti() const;
  void set_rnti(::google::protobuf::uint32 value);

  // optional uint32 time_alignment_timer = 3;
  bool has_time_alignment_timer() const;
  void clear_time_alignment_timer();
  static const int kTimeAlignmentTimerFieldNumber = 3;
  ::google::protobuf::uint32 time_alignment_timer() const;
  void set_time_alignment_timer(::google::protobuf::uint32 value);

  // optional uint32 meas_gap_config_pattern = 4;
  bool has_meas_gap_config_pattern() const;
  void clear_meas_gap_config_pattern();
  static const int kMeasGapConfigPatternFieldNumber = 4;
  ::google::protobuf::uint32 meas_gap_config_pattern() const;
  void set_meas_gap_config_pattern(::google::protobuf::uint32 value);

  // optional uint32 meas_gap_config_sf_offset = 5;
  bool has_meas_gap_config_sf_offset() const;
  void clear_meas_gap_config_sf_offset();
  static const int kMeasGapConfigSfOffsetFieldNumber = 5;
  ::google::protobuf::uint32 meas_gap_config_sf_offset() const;
  void set_meas_gap_config_sf_offset(::google::protobuf::uint32 value);

  // optional uint64 ue_aggregated_max_bitrate_UL = 10;
  bool has_ue_aggregated_max_bitrate_ul() const;
  void clear_ue_aggregated_max_bitrate_ul();
  static const int kUeAggregatedMaxBitrateULFieldNumber = 10;
  ::google::protobuf::uint64 ue_aggregated_max_bitrate_ul() const;
  void set_ue_aggregated_max_bitrate_ul(::google::protobuf::uint64 value);

  // optional uint64 ue_aggregated_max_bitrate_DL = 11;
  bool has_ue_aggregated_max_bitrate_dl() const;
  void clear_ue_aggregated_max_bitrate_dl();
  static const int kUeAggregatedMaxBitrateDLFieldNumber = 11;
  ::google::protobuf::uint64 ue_aggregated_max_bitrate_dl() const;
  void set_ue_aggregated_max_bitrate_dl(::google::protobuf::uint64 value);

  // optional uint32 transmission_mode = 9;
  bool has_transmission_mode() const;
  void clear_transmission_mode();
  static const int kTransmissionModeFieldNumber = 9;
  ::google::protobuf::uint32 transmission_mode() const;
  void set_transmission_mode(::google::protobuf::uint32 value);

  // optional uint32 ue_transmission_antenna = 13;
  bool has_ue_transmission_antenna() const;
  void clear_ue_transmission_antenna();
  static const int kUeTransmissionAntennaFieldNumber = 13;
  ::google::protobuf::uint32 ue_transmission_antenna() const;
  void set_ue_transmission_antenna(::google::protobuf::uint32 value);

  // optional uint32 tti_bundling = 14;
  bool has_tti_bundling() const;
  void clear_tti_bundling();
  static const int kTtiBundlingFieldNumber = 14;
  ::google::protobuf::uint32 tti_bundling() const;
  void set_tti_bundling(::google::protobuf::uint32 value);

  // optional uint32 max_HARQ_tx = 15;
  bool has_max_harq_tx() const;
  void clear_max_harq_tx();
  static const int kMaxHARQTxFieldNumber = 15;
  ::google::protobuf::uint32 max_harq_tx() const;
  void set_max_harq_tx(::google::protobuf::uint32 value);

  // optional uint32 beta_offset_ACK_index = 16;
  bool has_beta_offset_ack_index() const;
  void clear_beta_offset_ack_index();
  static const int kBetaOffsetACKIndexFieldNumber = 16;
  ::google::protobuf::uint32 beta_offset_ack_index() const;
  void set_beta_offset_ack_index(::google::protobuf::uint32 value);

  // optional uint32 beta_offset_RI_index = 17;
  bool has_beta_offset_ri_index() const;
  void clear_beta_offset_ri_index();
  static const int kBetaOffsetRIIndexFieldNumber = 17;
  ::google::protobuf::uint32 beta_offset_ri_index() const;
  void set_beta_offset_ri_index(::google::protobuf::uint32 value);

  // optional uint32 beta_offset_CQI_index = 18;
  bool has_beta_offset_cqi_index() const;
  void clear_beta_offset_cqi_index();
  static const int kBetaOffsetCQIIndexFieldNumber = 18;
  ::google::protobuf::uint32 beta_offset_cqi_index() const;
  void set_beta_offset_cqi_index(::google::protobuf::uint32 value);

  // optional uint32 ack_nack_simultaneous_trans = 19;
  bool has_ack_nack_simultaneous_trans() const;
  void clear_ack_nack_simultaneous_trans();
  static const int kAckNackSimultaneousTransFieldNumber = 19;
  ::google::protobuf::uint32 ack_nack_simultaneous_trans() const;
  void set_ack_nack_simultaneous_trans(::google::protobuf::uint32 value);

  // optional uint32 simultaneous_ack_nack_cqi = 20;
  bool has_simultaneous_ack_nack_cqi() const;
  void clear_simultaneous_ack_nack_cqi();
  static const int kSimultaneousAckNackCqiFieldNumber = 20;
  ::google::protobuf::uint32 simultaneous_ack_nack_cqi() const;
  void set_simultaneous_ack_nack_cqi(::google::protobuf::uint32 value);

  // optional uint32 aperiodic_cqi_rep_mode = 21;
  bool has_aperiodic_cqi_rep_mode() const;
  void clear_aperiodic_cqi_rep_mode();
  static const int kAperiodicCqiRepModeFieldNumber = 21;
  ::google::protobuf::uint32 aperiodic_cqi_rep_mode() const;
  void set_aperiodic_cqi_rep_mode(::google::protobuf::uint32 value);

  // optional uint32 tdd_ack_nack_feedback = 22;
  bool has_tdd_ack_nack_feedback() const;
  void clear_tdd_ack_nack_feedback();
  static const int kTddAckNackFeedbackFieldNumber = 22;
  ::google::protobuf::uint32 tdd_ack_nack_feedback() const;
  void set_tdd_ack_nack_feedback(::google::protobuf::uint32 value);

  // optional uint32 ack_nack_repetition_factor = 23;
  bool has_ack_nack_repetition_factor() const;
  void clear_ack_nack_repetition_factor();
  static const int kAckNackRepetitionFactorFieldNumber = 23;
  ::google::protobuf::uint32 ack_nack_repetition_factor() const;
  void set_ack_nack_repetition_factor(::google::protobuf::uint32 value);

  // optional uint32 extended_bsr_size = 24;
  bool has_extended_bsr_size() const;
  void clear_extended_bsr_size();
  static const int kExtendedBsrSizeFieldNumber = 24;
  ::google::protobuf::uint32 extended_bsr_size() const;
  void set_extended_bsr_size(::google::protobuf::uint32 value);

  // optional uint32 ca_support = 25;
  bool has_ca_support() const;
  void clear_ca_support();
  static const int kCaSupportFieldNumber = 25;
  ::google::protobuf::uint32 ca_support() const;
  void set_ca_support(::google::protobuf::uint32 value);

  // optional uint32 cross_carrier_sched_support = 26;
  bool has_cross_carrier_sched_support() const;
  void clear_cross_carrier_sched_support();
  static const int kCrossCarrierSchedSupportFieldNumber = 26;
  ::google::protobuf::uint32 cross_carrier_sched_support() const;
  void set_cross_carrier_sched_support(::google::protobuf::uint32 value);

  // optional uint32 pcell_carrier_index = 27;
  bool has_pcell_carrier_index() const;
  void clear_pcell_carrier_index();
  static const int kPcellCarrierIndexFieldNumber = 27;
  ::google::protobuf::uint32 pcell_carrier_index() const;
  void set_pcell_carrier_index(::google::protobuf::uint32 value);

  // optional uint64 imsi = 30;
  bool has_imsi() const;
  void clear_imsi();
  static const int kImsiFieldNumber = 30;
  ::google::protobuf::uint64 imsi() const;
  void set_imsi(::google::protobuf::uint64 value);

  // optional uint32 scell_deactivation_timer = 29;
  bool has_scell_deactivation_timer() const;
  void clear_scell_deactivation_timer();
  static const int kScellDeactivationTimerFieldNumber = 29;
  ::google::protobuf::uint32 scell_deactivation_timer() const;
  void set_scell_deactivation_timer(::google::protobuf::uint32 value);

  // optional uint32 dl_slice_id = 31;
  bool has_dl_slice_id() const;
  void clear_dl_slice_id();
  static const int kDlSliceIdFieldNumber = 31;
  ::google::protobuf::uint32 dl_slice_id() const;
  void set_dl_slice_id(::google::protobuf::uint32 value);

  // optional uint32 ul_slice_id = 32;
  bool has_ul_slice_id() const;
  void clear_ul_slice_id();
  static const int kUlSliceIdFieldNumber = 32;
  ::google::protobuf::uint32 ul_slice_id() const;
  void set_ul_slice_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.flex_ue_config)
 private:
  void set_has_rnti();
  void clear_has_rnti();
  void set_has_drx_config();
  void clear_has_drx_config();
  void set_has_time_alignment_timer();
  void clear_has_time_alignment_timer();
  void set_has_meas_gap_config_pattern();
  void clear_has_meas_gap_config_pattern();
  void set_has_meas_gap_config_sf_offset();
  void clear_has_meas_gap_config_sf_offset();
  void set_has_sps_config();
  void clear_has_sps_config();
  void set_has_sr_config();
  void clear_has_sr_config();
  void set_has_cqi_config();
  void clear_has_cqi_config();
  void set_has_transmission_mode();
  void clear_has_transmission_mode();
  void set_has_ue_aggregated_max_bitrate_ul();
  void clear_has_ue_aggregated_max_bitrate_ul();
  void set_has_ue_aggregated_max_bitrate_dl();
  void clear_has_ue_aggregated_max_bitrate_dl();
  void set_has_capabilities();
  void clear_has_capabilities();
  void set_has_ue_transmission_antenna();
  void clear_has_ue_transmission_antenna();
  void set_has_tti_bundling();
  void clear_has_tti_bundling();
  void set_has_max_harq_tx();
  void clear_has_max_harq_tx();
  void set_has_beta_offset_ack_index();
  void clear_has_beta_offset_ack_index();
  void set_has_beta_offset_ri_index();
  void clear_has_beta_offset_ri_index();
  void set_has_beta_offset_cqi_index();
  void clear_has_beta_offset_cqi_index();
  void set_has_ack_nack_simultaneous_trans();
  void clear_has_ack_nack_simultaneous_trans();
  void set_has_simultaneous_ack_nack_cqi();
  void clear_has_simultaneous_ack_nack_cqi();
  void set_has_aperiodic_cqi_rep_mode();
  void clear_has_aperiodic_cqi_rep_mode();
  void set_has_tdd_ack_nack_feedback();
  void clear_has_tdd_ack_nack_feedback();
  void set_has_ack_nack_repetition_factor();
  void clear_has_ack_nack_repetition_factor();
  void set_has_extended_bsr_size();
  void clear_has_extended_bsr_size();
  void set_has_ca_support();
  void clear_has_ca_support();
  void set_has_cross_carrier_sched_support();
  void clear_has_cross_carrier_sched_support();
  void set_has_pcell_carrier_index();
  void clear_has_pcell_carrier_index();
  void set_has_scell_deactivation_timer();
  void clear_has_scell_deactivation_timer();
  void set_has_imsi();
  void clear_has_imsi();
  void set_has_dl_slice_id();
  void clear_has_dl_slice_id();
  void set_has_ul_slice_id();
  void clear_has_ul_slice_id();
  void set_has_info();
  void clear_has_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config > scell_config_;
  ::protocol::flex_drx_config* drx_config_;
  ::protocol::flex_sps_config* sps_config_;
  ::protocol::flex_sr_config* sr_config_;
  ::protocol::flex_cqi_config* cqi_config_;
  ::protocol::flex_ue_capabilities* capabilities_;
  ::protocol::flex_measurement_info* info_;
  ::google::protobuf::uint32 rnti_;
  ::google::protobuf::uint32 time_alignment_timer_;
  ::google::protobuf::uint32 meas_gap_config_pattern_;
  ::google::protobuf::uint32 meas_gap_config_sf_offset_;
  ::google::protobuf::uint64 ue_aggregated_max_bitrate_ul_;
  ::google::protobuf::uint64 ue_aggregated_max_bitrate_dl_;
  ::google::protobuf::uint32 transmission_mode_;
  ::google::protobuf::uint32 ue_transmission_antenna_;
  ::google::protobuf::uint32 tti_bundling_;
  ::google::protobuf::uint32 max_harq_tx_;
  ::google::protobuf::uint32 beta_offset_ack_index_;
  ::google::protobuf::uint32 beta_offset_ri_index_;
  ::google::protobuf::uint32 beta_offset_cqi_index_;
  ::google::protobuf::uint32 ack_nack_simultaneous_trans_;
  ::google::protobuf::uint32 simultaneous_ack_nack_cqi_;
  ::google::protobuf::uint32 aperiodic_cqi_rep_mode_;
  ::google::protobuf::uint32 tdd_ack_nack_feedback_;
  ::google::protobuf::uint32 ack_nack_repetition_factor_;
  ::google::protobuf::uint32 extended_bsr_size_;
  ::google::protobuf::uint32 ca_support_;
  ::google::protobuf::uint32 cross_carrier_sched_support_;
  ::google::protobuf::uint32 pcell_carrier_index_;
  ::google::protobuf::uint64 imsi_;
  ::google::protobuf::uint32 scell_deactivation_timer_;
  ::google::protobuf::uint32 dl_slice_id_;
  ::google::protobuf::uint32 ul_slice_id_;
  friend struct protobuf_config_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_lc_ue_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_lc_ue_config) */ {
 public:
  flex_lc_ue_config();
  virtual ~flex_lc_ue_config();

  flex_lc_ue_config(const flex_lc_ue_config& from);

  inline flex_lc_ue_config& operator=(const flex_lc_ue_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_lc_ue_config& default_instance();

  static inline const flex_lc_ue_config* internal_default_instance() {
    return reinterpret_cast<const flex_lc_ue_config*>(
               &_flex_lc_ue_config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(flex_lc_ue_config* other);

  // implements Message ----------------------------------------------

  inline flex_lc_ue_config* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_lc_ue_config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_lc_ue_config& from);
  void MergeFrom(const flex_lc_ue_config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_lc_ue_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.flex_lc_config lc_config = 2;
  int lc_config_size() const;
  void clear_lc_config();
  static const int kLcConfigFieldNumber = 2;
  const ::protocol::flex_lc_config& lc_config(int index) const;
  ::protocol::flex_lc_config* mutable_lc_config(int index);
  ::protocol::flex_lc_config* add_lc_config();
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config >*
      mutable_lc_config();
  const ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config >&
      lc_config() const;

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  void clear_rnti();
  static const int kRntiFieldNumber = 1;
  ::google::protobuf::uint32 rnti() const;
  void set_rnti(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.flex_lc_ue_config)
 private:
  void set_has_rnti();
  void clear_has_rnti();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config > lc_config_;
  ::google::protobuf::uint32 rnti_;
  friend struct protobuf_config_5fmessages_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class flex_s1ap_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.flex_s1ap_config) */ {
 public:
  flex_s1ap_config();
  virtual ~flex_s1ap_config();

  flex_s1ap_config(const flex_s1ap_config& from);

  inline flex_s1ap_config& operator=(const flex_s1ap_config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flex_s1ap_config& default_instance();

  static inline const flex_s1ap_config* internal_default_instance() {
    return reinterpret_cast<const flex_s1ap_config*>(
               &_flex_s1ap_config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(flex_s1ap_config* other);

  // implements Message ----------------------------------------------

  inline flex_s1ap_config* New() const PROTOBUF_FINAL { return New(NULL); }

  flex_s1ap_config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const flex_s1ap_config& from);
  void MergeFrom(const flex_s1ap_config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(flex_s1ap_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.flex_s1ap_mme mme = 5;
  int mme_size() const;
  void clear_mme();
  static const int kMmeFieldNumber = 5;
  const ::protocol::flex_s1ap_mme& mme(int index) const;
  ::protocol::flex_s1ap_mme* mutable_mme(int index);
  ::protocol::flex_s1ap_mme* add_mme();
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme >*
      mutable_mme();
  const ::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme >&
      mme() const;

  // optional string enb_s1_ip = 3;
  bool has_enb_s1_ip() const;
  void clear_enb_s1_ip();
  static const int kEnbS1IpFieldNumber = 3;
  const ::std::string& enb_s1_ip() const;
  void set_enb_s1_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_enb_s1_ip(::std::string&& value);
  #endif
  void set_enb_s1_ip(const char* value);
  void set_enb_s1_ip(const char* value, size_t size);
  ::std::string* mutable_enb_s1_ip();
  ::std::string* release_enb_s1_ip();
  void set_allocated_enb_s1_ip(::std::string* enb_s1_ip);

  // optional string enb_name = 4;
  bool has_enb_name() const;
  void clear_enb_name();
  static const int kEnbNameFieldNumber = 4;
  const ::std::string& enb_name() const;
  void set_enb_name(const ::std::string& value);
  #if LANG_CXX11
  void set_enb_name(::std::string&& value);
  #endif
  void set_enb_name(const char* value);
  void set_enb_name(const char* value, size_t size);
  ::std::string* mutable_enb_name();
  ::std::string* release_enb_name();
  void set_allocated_enb_name(::std::string* enb_name);

  // optional uint32 pending = 1;
  bool has_pending() const;
  void clear_pending();
  static const int kPendingFieldNumber = 1;
  ::google::protobuf::uint32 pending() const;
  void set_pending(::google::protobuf::uint32 value);

  // optional uint32 connected = 2;
  bool has_connected() const;
  void clear_connected();
  static const int kConnectedFieldNumber = 2;
  ::google::protobuf::uint32 connected() const;
  void set_connected(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.flex_s1ap_config)
 private:
  void set_has_pending();
  void clear_has_pending();
  void set_has_connected();
  void clear_has_connected();
  void set_has_enb_s1_ip();
  void clear_has_enb_s1_ip();
  void set_has_enb_name();
  void clear_has_enb_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme > mme_;
  ::google::protobuf::internal::ArenaStringPtr enb_s1_ip_;
  ::google::protobuf::internal::ArenaStringPtr enb_name_;
  ::google::protobuf::uint32 pending_;
  ::google::protobuf::uint32 connected_;
  friend struct protobuf_config_5fmessages_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_cell_config

// optional uint32 phy_cell_id = 1;
inline bool flex_cell_config::has_phy_cell_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flex_cell_config::set_has_phy_cell_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flex_cell_config::clear_has_phy_cell_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flex_cell_config::clear_phy_cell_id() {
  phy_cell_id_ = 0u;
  clear_has_phy_cell_id();
}
inline ::google::protobuf::uint32 flex_cell_config::phy_cell_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phy_cell_id)
  return phy_cell_id_;
}
inline void flex_cell_config::set_phy_cell_id(::google::protobuf::uint32 value) {
  set_has_phy_cell_id();
  phy_cell_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phy_cell_id)
}

// optional uint32 pusch_hopping_offset = 3;
inline bool flex_cell_config::has_pusch_hopping_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flex_cell_config::set_has_pusch_hopping_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flex_cell_config::clear_has_pusch_hopping_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flex_cell_config::clear_pusch_hopping_offset() {
  pusch_hopping_offset_ = 0u;
  clear_has_pusch_hopping_offset();
}
inline ::google::protobuf::uint32 flex_cell_config::pusch_hopping_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.pusch_hopping_offset)
  return pusch_hopping_offset_;
}
inline void flex_cell_config::set_pusch_hopping_offset(::google::protobuf::uint32 value) {
  set_has_pusch_hopping_offset();
  pusch_hopping_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.pusch_hopping_offset)
}

// optional uint32 hopping_mode = 4;
inline bool flex_cell_config::has_hopping_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flex_cell_config::set_has_hopping_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void flex_cell_config::clear_has_hopping_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void flex_cell_config::clear_hopping_mode() {
  hopping_mode_ = 0u;
  clear_has_hopping_mode();
}
inline ::google::protobuf::uint32 flex_cell_config::hopping_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.hopping_mode)
  return hopping_mode_;
}
inline void flex_cell_config::set_hopping_mode(::google::protobuf::uint32 value) {
  set_has_hopping_mode();
  hopping_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.hopping_mode)
}

// optional uint32 n_sb = 5;
inline bool flex_cell_config::has_n_sb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void flex_cell_config::set_has_n_sb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void flex_cell_config::clear_has_n_sb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void flex_cell_config::clear_n_sb() {
  n_sb_ = 0u;
  clear_has_n_sb();
}
inline ::google::protobuf::uint32 flex_cell_config::n_sb() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.n_sb)
  return n_sb_;
}
inline void flex_cell_config::set_n_sb(::google::protobuf::uint32 value) {
  set_has_n_sb();
  n_sb_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.n_sb)
}

// optional uint32 phich_resource = 6;
inline bool flex_cell_config::has_phich_resource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void flex_cell_config::set_has_phich_resource() {
  _has_bits_[0] |= 0x00000040u;
}
inline void flex_cell_config::clear_has_phich_resource() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void flex_cell_config::clear_phich_resource() {
  phich_resource_ = 0u;
  clear_has_phich_resource();
}
inline ::google::protobuf::uint32 flex_cell_config::phich_resource() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phich_resource)
  return phich_resource_;
}
inline void flex_cell_config::set_phich_resource(::google::protobuf::uint32 value) {
  set_has_phich_resource();
  phich_resource_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phich_resource)
}

// optional uint32 phich_duration = 7;
inline bool flex_cell_config::has_phich_duration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void flex_cell_config::set_has_phich_duration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void flex_cell_config::clear_has_phich_duration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void flex_cell_config::clear_phich_duration() {
  phich_duration_ = 0u;
  clear_has_phich_duration();
}
inline ::google::protobuf::uint32 flex_cell_config::phich_duration() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phich_duration)
  return phich_duration_;
}
inline void flex_cell_config::set_phich_duration(::google::protobuf::uint32 value) {
  set_has_phich_duration();
  phich_duration_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phich_duration)
}

// optional uint32 init_nr_PDCCH_OFDM_sym = 8;
inline bool flex_cell_config::has_init_nr_pdcch_ofdm_sym() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void flex_cell_config::set_has_init_nr_pdcch_ofdm_sym() {
  _has_bits_[0] |= 0x00000100u;
}
inline void flex_cell_config::clear_has_init_nr_pdcch_ofdm_sym() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void flex_cell_config::clear_init_nr_pdcch_ofdm_sym() {
  init_nr_pdcch_ofdm_sym_ = 0u;
  clear_has_init_nr_pdcch_ofdm_sym();
}
inline ::google::protobuf::uint32 flex_cell_config::init_nr_pdcch_ofdm_sym() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.init_nr_PDCCH_OFDM_sym)
  return init_nr_pdcch_ofdm_sym_;
}
inline void flex_cell_config::set_init_nr_pdcch_ofdm_sym(::google::protobuf::uint32 value) {
  set_has_init_nr_pdcch_ofdm_sym();
  init_nr_pdcch_ofdm_sym_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.init_nr_PDCCH_OFDM_sym)
}

// optional .protocol.flex_si_config si_config = 9;
inline bool flex_cell_config::has_si_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_cell_config::set_has_si_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_cell_config::clear_has_si_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_cell_config::clear_si_config() {
  if (si_config_ != NULL) si_config_->::protocol::flex_si_config::Clear();
  clear_has_si_config();
}
inline const ::protocol::flex_si_config& flex_cell_config::si_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.si_config)
  return si_config_ != NULL ? *si_config_
                         : *::protocol::flex_si_config::internal_default_instance();
}
inline ::protocol::flex_si_config* flex_cell_config::mutable_si_config() {
  set_has_si_config();
  if (si_config_ == NULL) {
    si_config_ = new ::protocol::flex_si_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.si_config)
  return si_config_;
}
inline ::protocol::flex_si_config* flex_cell_config::release_si_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_config.si_config)
  clear_has_si_config();
  ::protocol::flex_si_config* temp = si_config_;
  si_config_ = NULL;
  return temp;
}
inline void flex_cell_config::set_allocated_si_config(::protocol::flex_si_config* si_config) {
  delete si_config_;
  si_config_ = si_config;
  if (si_config) {
    set_has_si_config();
  } else {
    clear_has_si_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_config.si_config)
}

// optional uint32 dl_bandwidth = 10;
inline bool flex_cell_config::has_dl_bandwidth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void flex_cell_config::set_has_dl_bandwidth() {
  _has_bits_[0] |= 0x00000200u;
}
inline void flex_cell_config::clear_has_dl_bandwidth() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void flex_cell_config::clear_dl_bandwidth() {
  dl_bandwidth_ = 0u;
  clear_has_dl_bandwidth();
}
inline ::google::protobuf::uint32 flex_cell_config::dl_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_bandwidth)
  return dl_bandwidth_;
}
inline void flex_cell_config::set_dl_bandwidth(::google::protobuf::uint32 value) {
  set_has_dl_bandwidth();
  dl_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_bandwidth)
}

// optional uint32 ul_bandwidth = 11;
inline bool flex_cell_config::has_ul_bandwidth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void flex_cell_config::set_has_ul_bandwidth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void flex_cell_config::clear_has_ul_bandwidth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void flex_cell_config::clear_ul_bandwidth() {
  ul_bandwidth_ = 0u;
  clear_has_ul_bandwidth();
}
inline ::google::protobuf::uint32 flex_cell_config::ul_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_bandwidth)
  return ul_bandwidth_;
}
inline void flex_cell_config::set_ul_bandwidth(::google::protobuf::uint32 value) {
  set_has_ul_bandwidth();
  ul_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_bandwidth)
}

// optional uint32 ul_cyclic_prefix_length = 13;
inline bool flex_cell_config::has_ul_cyclic_prefix_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void flex_cell_config::set_has_ul_cyclic_prefix_length() {
  _has_bits_[0] |= 0x00000800u;
}
inline void flex_cell_config::clear_has_ul_cyclic_prefix_length() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void flex_cell_config::clear_ul_cyclic_prefix_length() {
  ul_cyclic_prefix_length_ = 0u;
  clear_has_ul_cyclic_prefix_length();
}
inline ::google::protobuf::uint32 flex_cell_config::ul_cyclic_prefix_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_cyclic_prefix_length)
  return ul_cyclic_prefix_length_;
}
inline void flex_cell_config::set_ul_cyclic_prefix_length(::google::protobuf::uint32 value) {
  set_has_ul_cyclic_prefix_length();
  ul_cyclic_prefix_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_cyclic_prefix_length)
}

// optional uint32 dl_cyclic_prefix_length = 14;
inline bool flex_cell_config::has_dl_cyclic_prefix_length() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void flex_cell_config::set_has_dl_cyclic_prefix_length() {
  _has_bits_[0] |= 0x00001000u;
}
inline void flex_cell_config::clear_has_dl_cyclic_prefix_length() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void flex_cell_config::clear_dl_cyclic_prefix_length() {
  dl_cyclic_prefix_length_ = 0u;
  clear_has_dl_cyclic_prefix_length();
}
inline ::google::protobuf::uint32 flex_cell_config::dl_cyclic_prefix_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_cyclic_prefix_length)
  return dl_cyclic_prefix_length_;
}
inline void flex_cell_config::set_dl_cyclic_prefix_length(::google::protobuf::uint32 value) {
  set_has_dl_cyclic_prefix_length();
  dl_cyclic_prefix_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_cyclic_prefix_length)
}

// optional uint32 antenna_ports_count = 15;
inline bool flex_cell_config::has_antenna_ports_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void flex_cell_config::set_has_antenna_ports_count() {
  _has_bits_[0] |= 0x00002000u;
}
inline void flex_cell_config::clear_has_antenna_ports_count() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void flex_cell_config::clear_antenna_ports_count() {
  antenna_ports_count_ = 0u;
  clear_has_antenna_ports_count();
}
inline ::google::protobuf::uint32 flex_cell_config::antenna_ports_count() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.antenna_ports_count)
  return antenna_ports_count_;
}
inline void flex_cell_config::set_antenna_ports_count(::google::protobuf::uint32 value) {
  set_has_antenna_ports_count();
  antenna_ports_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.antenna_ports_count)
}

// optional uint32 duplex_mode = 16;
inline bool flex_cell_config::has_duplex_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void flex_cell_config::set_has_duplex_mode() {
  _has_bits_[0] |= 0x00004000u;
}
inline void flex_cell_config::clear_has_duplex_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void flex_cell_config::clear_duplex_mode() {
  duplex_mode_ = 0u;
  clear_has_duplex_mode();
}
inline ::google::protobuf::uint32 flex_cell_config::duplex_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.duplex_mode)
  return duplex_mode_;
}
inline void flex_cell_config::set_duplex_mode(::google::protobuf::uint32 value) {
  set_has_duplex_mode();
  duplex_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.duplex_mode)
}

// optional uint32 subframe_assignment = 17;
inline bool flex_cell_config::has_subframe_assignment() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void flex_cell_config::set_has_subframe_assignment() {
  _has_bits_[0] |= 0x00008000u;
}
inline void flex_cell_config::clear_has_subframe_assignment() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void flex_cell_config::clear_subframe_assignment() {
  subframe_assignment_ = 0u;
  clear_has_subframe_assignment();
}
inline ::google::protobuf::uint32 flex_cell_config::subframe_assignment() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.subframe_assignment)
  return subframe_assignment_;
}
inline void flex_cell_config::set_subframe_assignment(::google::protobuf::uint32 value) {
  set_has_subframe_assignment();
  subframe_assignment_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.subframe_assignment)
}

// optional uint32 special_subframe_patterns = 18;
inline bool flex_cell_config::has_special_subframe_patterns() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void flex_cell_config::set_has_special_subframe_patterns() {
  _has_bits_[0] |= 0x00010000u;
}
inline void flex_cell_config::clear_has_special_subframe_patterns() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void flex_cell_config::clear_special_subframe_patterns() {
  special_subframe_patterns_ = 0u;
  clear_has_special_subframe_patterns();
}
inline ::google::protobuf::uint32 flex_cell_config::special_subframe_patterns() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.special_subframe_patterns)
  return special_subframe_patterns_;
}
inline void flex_cell_config::set_special_subframe_patterns(::google::protobuf::uint32 value) {
  set_has_special_subframe_patterns();
  special_subframe_patterns_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.special_subframe_patterns)
}

// repeated uint32 mbsfn_subframe_config_rfperiod = 19;
inline int flex_cell_config::mbsfn_subframe_config_rfperiod_size() const {
  return mbsfn_subframe_config_rfperiod_.size();
}
inline void flex_cell_config::clear_mbsfn_subframe_config_rfperiod() {
  mbsfn_subframe_config_rfperiod_.Clear();
}
inline ::google::protobuf::uint32 flex_cell_config::mbsfn_subframe_config_rfperiod(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return mbsfn_subframe_config_rfperiod_.Get(index);
}
inline void flex_cell_config::set_mbsfn_subframe_config_rfperiod(int index, ::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfperiod_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
}
inline void flex_cell_config::add_mbsfn_subframe_config_rfperiod(::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfperiod_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_config::mbsfn_subframe_config_rfperiod() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return mbsfn_subframe_config_rfperiod_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_rfperiod() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return &mbsfn_subframe_config_rfperiod_;
}

// repeated uint32 mbsfn_subframe_config_rfoffset = 20;
inline int flex_cell_config::mbsfn_subframe_config_rfoffset_size() const {
  return mbsfn_subframe_config_rfoffset_.size();
}
inline void flex_cell_config::clear_mbsfn_subframe_config_rfoffset() {
  mbsfn_subframe_config_rfoffset_.Clear();
}
inline ::google::protobuf::uint32 flex_cell_config::mbsfn_subframe_config_rfoffset(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return mbsfn_subframe_config_rfoffset_.Get(index);
}
inline void flex_cell_config::set_mbsfn_subframe_config_rfoffset(int index, ::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfoffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
}
inline void flex_cell_config::add_mbsfn_subframe_config_rfoffset(::google::protobuf::uint32 value) {
  mbsfn_subframe_config_rfoffset_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_config::mbsfn_subframe_config_rfoffset() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return mbsfn_subframe_config_rfoffset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_rfoffset() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return &mbsfn_subframe_config_rfoffset_;
}

// repeated uint32 mbsfn_subframe_config_sfalloc = 21;
inline int flex_cell_config::mbsfn_subframe_config_sfalloc_size() const {
  return mbsfn_subframe_config_sfalloc_.size();
}
inline void flex_cell_config::clear_mbsfn_subframe_config_sfalloc() {
  mbsfn_subframe_config_sfalloc_.Clear();
}
inline ::google::protobuf::uint32 flex_cell_config::mbsfn_subframe_config_sfalloc(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return mbsfn_subframe_config_sfalloc_.Get(index);
}
inline void flex_cell_config::set_mbsfn_subframe_config_sfalloc(int index, ::google::protobuf::uint32 value) {
  mbsfn_subframe_config_sfalloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
}
inline void flex_cell_config::add_mbsfn_subframe_config_sfalloc(::google::protobuf::uint32 value) {
  mbsfn_subframe_config_sfalloc_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_cell_config::mbsfn_subframe_config_sfalloc() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return mbsfn_subframe_config_sfalloc_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_sfalloc() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return &mbsfn_subframe_config_sfalloc_;
}

// optional uint32 prach_config_index = 22;
inline bool flex_cell_config::has_prach_config_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void flex_cell_config::set_has_prach_config_index() {
  _has_bits_[0] |= 0x00020000u;
}
inline void flex_cell_config::clear_has_prach_config_index() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void flex_cell_config::clear_prach_config_index() {
  prach_config_index_ = 0u;
  clear_has_prach_config_index();
}
inline ::google::protobuf::uint32 flex_cell_config::prach_config_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.prach_config_index)
  return prach_config_index_;
}
inline void flex_cell_config::set_prach_config_index(::google::protobuf::uint32 value) {
  set_has_prach_config_index();
  prach_config_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.prach_config_index)
}

// optional uint32 prach_freq_offset = 23;
inline bool flex_cell_config::has_prach_freq_offset() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void flex_cell_config::set_has_prach_freq_offset() {
  _has_bits_[0] |= 0x00040000u;
}
inline void flex_cell_config::clear_has_prach_freq_offset() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void flex_cell_config::clear_prach_freq_offset() {
  prach_freq_offset_ = 0u;
  clear_has_prach_freq_offset();
}
inline ::google::protobuf::uint32 flex_cell_config::prach_freq_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.prach_freq_offset)
  return prach_freq_offset_;
}
inline void flex_cell_config::set_prach_freq_offset(::google::protobuf::uint32 value) {
  set_has_prach_freq_offset();
  prach_freq_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.prach_freq_offset)
}

// optional uint32 ra_response_window_size = 24;
inline bool flex_cell_config::has_ra_response_window_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void flex_cell_config::set_has_ra_response_window_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void flex_cell_config::clear_has_ra_response_window_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void flex_cell_config::clear_ra_response_window_size() {
  ra_response_window_size_ = 0u;
  clear_has_ra_response_window_size();
}
inline ::google::protobuf::uint32 flex_cell_config::ra_response_window_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ra_response_window_size)
  return ra_response_window_size_;
}
inline void flex_cell_config::set_ra_response_window_size(::google::protobuf::uint32 value) {
  set_has_ra_response_window_size();
  ra_response_window_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ra_response_window_size)
}

// optional uint32 mac_contention_resolution_timer = 25;
inline bool flex_cell_config::has_mac_contention_resolution_timer() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void flex_cell_config::set_has_mac_contention_resolution_timer() {
  _has_bits_[0] |= 0x00100000u;
}
inline void flex_cell_config::clear_has_mac_contention_resolution_timer() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void flex_cell_config::clear_mac_contention_resolution_timer() {
  mac_contention_resolution_timer_ = 0u;
  clear_has_mac_contention_resolution_timer();
}
inline ::google::protobuf::uint32 flex_cell_config::mac_contention_resolution_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mac_contention_resolution_timer)
  return mac_contention_resolution_timer_;
}
inline void flex_cell_config::set_mac_contention_resolution_timer(::google::protobuf::uint32 value) {
  set_has_mac_contention_resolution_timer();
  mac_contention_resolution_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mac_contention_resolution_timer)
}

// optional uint32 max_HARQ_Msg3Tx = 26;
inline bool flex_cell_config::has_max_harq_msg3tx() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void flex_cell_config::set_has_max_harq_msg3tx() {
  _has_bits_[0] |= 0x00200000u;
}
inline void flex_cell_config::clear_has_max_harq_msg3tx() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void flex_cell_config::clear_max_harq_msg3tx() {
  max_harq_msg3tx_ = 0u;
  clear_has_max_harq_msg3tx();
}
inline ::google::protobuf::uint32 flex_cell_config::max_harq_msg3tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.max_HARQ_Msg3Tx)
  return max_harq_msg3tx_;
}
inline void flex_cell_config::set_max_harq_msg3tx(::google::protobuf::uint32 value) {
  set_has_max_harq_msg3tx();
  max_harq_msg3tx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.max_HARQ_Msg3Tx)
}

// optional uint32 n1PUCCH_AN = 27;
inline bool flex_cell_config::has_n1pucch_an() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void flex_cell_config::set_has_n1pucch_an() {
  _has_bits_[0] |= 0x00400000u;
}
inline void flex_cell_config::clear_has_n1pucch_an() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void flex_cell_config::clear_n1pucch_an() {
  n1pucch_an_ = 0u;
  clear_has_n1pucch_an();
}
inline ::google::protobuf::uint32 flex_cell_config::n1pucch_an() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.n1PUCCH_AN)
  return n1pucch_an_;
}
inline void flex_cell_config::set_n1pucch_an(::google::protobuf::uint32 value) {
  set_has_n1pucch_an();
  n1pucch_an_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.n1PUCCH_AN)
}

// optional uint32 deltaPUCCH_shift = 28;
inline bool flex_cell_config::has_deltapucch_shift() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void flex_cell_config::set_has_deltapucch_shift() {
  _has_bits_[0] |= 0x00800000u;
}
inline void flex_cell_config::clear_has_deltapucch_shift() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void flex_cell_config::clear_deltapucch_shift() {
  deltapucch_shift_ = 0u;
  clear_has_deltapucch_shift();
}
inline ::google::protobuf::uint32 flex_cell_config::deltapucch_shift() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.deltaPUCCH_shift)
  return deltapucch_shift_;
}
inline void flex_cell_config::set_deltapucch_shift(::google::protobuf::uint32 value) {
  set_has_deltapucch_shift();
  deltapucch_shift_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.deltaPUCCH_shift)
}

// optional uint32 nRB_cqi = 29;
inline bool flex_cell_config::has_nrb_cqi() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void flex_cell_config::set_has_nrb_cqi() {
  _has_bits_[0] |= 0x01000000u;
}
inline void flex_cell_config::clear_has_nrb_cqi() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void flex_cell_config::clear_nrb_cqi() {
  nrb_cqi_ = 0u;
  clear_has_nrb_cqi();
}
inline ::google::protobuf::uint32 flex_cell_config::nrb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.nRB_cqi)
  return nrb_cqi_;
}
inline void flex_cell_config::set_nrb_cqi(::google::protobuf::uint32 value) {
  set_has_nrb_cqi();
  nrb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.nRB_cqi)
}

// optional uint32 srs_subframe_config = 30;
inline bool flex_cell_config::has_srs_subframe_config() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void flex_cell_config::set_has_srs_subframe_config() {
  _has_bits_[0] |= 0x02000000u;
}
inline void flex_cell_config::clear_has_srs_subframe_config() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void flex_cell_config::clear_srs_subframe_config() {
  srs_subframe_config_ = 0u;
  clear_has_srs_subframe_config();
}
inline ::google::protobuf::uint32 flex_cell_config::srs_subframe_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_subframe_config)
  return srs_subframe_config_;
}
inline void flex_cell_config::set_srs_subframe_config(::google::protobuf::uint32 value) {
  set_has_srs_subframe_config();
  srs_subframe_config_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_subframe_config)
}

// optional uint32 srs_bw_config = 31;
inline bool flex_cell_config::has_srs_bw_config() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void flex_cell_config::set_has_srs_bw_config() {
  _has_bits_[0] |= 0x04000000u;
}
inline void flex_cell_config::clear_has_srs_bw_config() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void flex_cell_config::clear_srs_bw_config() {
  srs_bw_config_ = 0u;
  clear_has_srs_bw_config();
}
inline ::google::protobuf::uint32 flex_cell_config::srs_bw_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_bw_config)
  return srs_bw_config_;
}
inline void flex_cell_config::set_srs_bw_config(::google::protobuf::uint32 value) {
  set_has_srs_bw_config();
  srs_bw_config_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_bw_config)
}

// optional uint32 srs_mac_up_pts = 32;
inline bool flex_cell_config::has_srs_mac_up_pts() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void flex_cell_config::set_has_srs_mac_up_pts() {
  _has_bits_[0] |= 0x08000000u;
}
inline void flex_cell_config::clear_has_srs_mac_up_pts() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void flex_cell_config::clear_srs_mac_up_pts() {
  srs_mac_up_pts_ = 0u;
  clear_has_srs_mac_up_pts();
}
inline ::google::protobuf::uint32 flex_cell_config::srs_mac_up_pts() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_mac_up_pts)
  return srs_mac_up_pts_;
}
inline void flex_cell_config::set_srs_mac_up_pts(::google::protobuf::uint32 value) {
  set_has_srs_mac_up_pts();
  srs_mac_up_pts_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_mac_up_pts)
}

// optional uint32 enable_64QAM = 33;
inline bool flex_cell_config::has_enable_64qam() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void flex_cell_config::set_has_enable_64qam() {
  _has_bits_[0] |= 0x10000000u;
}
inline void flex_cell_config::clear_has_enable_64qam() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void flex_cell_config::clear_enable_64qam() {
  enable_64qam_ = 0u;
  clear_has_enable_64qam();
}
inline ::google::protobuf::uint32 flex_cell_config::enable_64qam() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.enable_64QAM)
  return enable_64qam_;
}
inline void flex_cell_config::set_enable_64qam(::google::protobuf::uint32 value) {
  set_has_enable_64qam();
  enable_64qam_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.enable_64QAM)
}

// optional uint32 carrier_index = 34;
inline bool flex_cell_config::has_carrier_index() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void flex_cell_config::set_has_carrier_index() {
  _has_bits_[0] |= 0x20000000u;
}
inline void flex_cell_config::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void flex_cell_config::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
inline ::google::protobuf::uint32 flex_cell_config::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.carrier_index)
  return carrier_index_;
}
inline void flex_cell_config::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.carrier_index)
}

// optional uint32 dl_freq = 35;
inline bool flex_cell_config::has_dl_freq() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void flex_cell_config::set_has_dl_freq() {
  _has_bits_[0] |= 0x40000000u;
}
inline void flex_cell_config::clear_has_dl_freq() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void flex_cell_config::clear_dl_freq() {
  dl_freq_ = 0u;
  clear_has_dl_freq();
}
inline ::google::protobuf::uint32 flex_cell_config::dl_freq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_freq)
  return dl_freq_;
}
inline void flex_cell_config::set_dl_freq(::google::protobuf::uint32 value) {
  set_has_dl_freq();
  dl_freq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_freq)
}

// optional uint32 ul_freq = 36;
inline bool flex_cell_config::has_ul_freq() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void flex_cell_config::set_has_ul_freq() {
  _has_bits_[0] |= 0x80000000u;
}
inline void flex_cell_config::clear_has_ul_freq() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void flex_cell_config::clear_ul_freq() {
  ul_freq_ = 0u;
  clear_has_ul_freq();
}
inline ::google::protobuf::uint32 flex_cell_config::ul_freq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_freq)
  return ul_freq_;
}
inline void flex_cell_config::set_ul_freq(::google::protobuf::uint32 value) {
  set_has_ul_freq();
  ul_freq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_freq)
}

// optional uint32 eutra_band = 37;
inline bool flex_cell_config::has_eutra_band() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void flex_cell_config::set_has_eutra_band() {
  _has_bits_[1] |= 0x00000001u;
}
inline void flex_cell_config::clear_has_eutra_band() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void flex_cell_config::clear_eutra_band() {
  eutra_band_ = 0u;
  clear_has_eutra_band();
}
inline ::google::protobuf::uint32 flex_cell_config::eutra_band() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.eutra_band)
  return eutra_band_;
}
inline void flex_cell_config::set_eutra_band(::google::protobuf::uint32 value) {
  set_has_eutra_band();
  eutra_band_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.eutra_band)
}

// optional int32 dl_pdsch_power = 38;
inline bool flex_cell_config::has_dl_pdsch_power() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void flex_cell_config::set_has_dl_pdsch_power() {
  _has_bits_[1] |= 0x00000002u;
}
inline void flex_cell_config::clear_has_dl_pdsch_power() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void flex_cell_config::clear_dl_pdsch_power() {
  dl_pdsch_power_ = 0;
  clear_has_dl_pdsch_power();
}
inline ::google::protobuf::int32 flex_cell_config::dl_pdsch_power() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_pdsch_power)
  return dl_pdsch_power_;
}
inline void flex_cell_config::set_dl_pdsch_power(::google::protobuf::int32 value) {
  set_has_dl_pdsch_power();
  dl_pdsch_power_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_pdsch_power)
}

// optional int32 ul_pusch_power = 39;
inline bool flex_cell_config::has_ul_pusch_power() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void flex_cell_config::set_has_ul_pusch_power() {
  _has_bits_[1] |= 0x00000004u;
}
inline void flex_cell_config::clear_has_ul_pusch_power() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void flex_cell_config::clear_ul_pusch_power() {
  ul_pusch_power_ = 0;
  clear_has_ul_pusch_power();
}
inline ::google::protobuf::int32 flex_cell_config::ul_pusch_power() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_pusch_power)
  return ul_pusch_power_;
}
inline void flex_cell_config::set_ul_pusch_power(::google::protobuf::int32 value) {
  set_has_ul_pusch_power();
  ul_pusch_power_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_pusch_power)
}

// repeated .protocol.flex_plmn plmn_id = 40;
inline int flex_cell_config::plmn_id_size() const {
  return plmn_id_.size();
}
inline void flex_cell_config::clear_plmn_id() {
  plmn_id_.Clear();
}
inline const ::protocol::flex_plmn& flex_cell_config::plmn_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Get(index);
}
inline ::protocol::flex_plmn* flex_cell_config::mutable_plmn_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Mutable(index);
}
inline ::protocol::flex_plmn* flex_cell_config::add_plmn_id() {
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >*
flex_cell_config::mutable_plmn_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.plmn_id)
  return &plmn_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >&
flex_cell_config::plmn_id() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.plmn_id)
  return plmn_id_;
}

// optional .protocol.flex_slice_config slice_config = 42;
inline bool flex_cell_config::has_slice_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_cell_config::set_has_slice_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_cell_config::clear_has_slice_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_cell_config::clear_slice_config() {
  if (slice_config_ != NULL) slice_config_->::protocol::flex_slice_config::Clear();
  clear_has_slice_config();
}
inline const ::protocol::flex_slice_config& flex_cell_config::slice_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.slice_config)
  return slice_config_ != NULL ? *slice_config_
                         : *::protocol::flex_slice_config::internal_default_instance();
}
inline ::protocol::flex_slice_config* flex_cell_config::mutable_slice_config() {
  set_has_slice_config();
  if (slice_config_ == NULL) {
    slice_config_ = new ::protocol::flex_slice_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.slice_config)
  return slice_config_;
}
inline ::protocol::flex_slice_config* flex_cell_config::release_slice_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_config.slice_config)
  clear_has_slice_config();
  ::protocol::flex_slice_config* temp = slice_config_;
  slice_config_ = NULL;
  return temp;
}
inline void flex_cell_config::set_allocated_slice_config(::protocol::flex_slice_config* slice_config) {
  delete slice_config_;
  slice_config_ = slice_config;
  if (slice_config) {
    set_has_slice_config();
  } else {
    clear_has_slice_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_config.slice_config)
}

// optional bool x2_ho_net_control = 43;
inline bool flex_cell_config::has_x2_ho_net_control() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void flex_cell_config::set_has_x2_ho_net_control() {
  _has_bits_[1] |= 0x00000008u;
}
inline void flex_cell_config::clear_has_x2_ho_net_control() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void flex_cell_config::clear_x2_ho_net_control() {
  x2_ho_net_control_ = false;
  clear_has_x2_ho_net_control();
}
inline bool flex_cell_config::x2_ho_net_control() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.x2_ho_net_control)
  return x2_ho_net_control_;
}
inline void flex_cell_config::set_x2_ho_net_control(bool value) {
  set_has_x2_ho_net_control();
  x2_ho_net_control_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.x2_ho_net_control)
}

// -------------------------------------------------------------------

// flex_slice_config

// optional .protocol.flex_slice_dl_ul_config dl = 6;
inline bool flex_slice_config::has_dl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_slice_config::set_has_dl() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_slice_config::clear_has_dl() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_slice_config::clear_dl() {
  if (dl_ != NULL) dl_->::protocol::flex_slice_dl_ul_config::Clear();
  clear_has_dl();
}
inline const ::protocol::flex_slice_dl_ul_config& flex_slice_config::dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_config.dl)
  return dl_ != NULL ? *dl_
                         : *::protocol::flex_slice_dl_ul_config::internal_default_instance();
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::mutable_dl() {
  set_has_dl();
  if (dl_ == NULL) {
    dl_ = new ::protocol::flex_slice_dl_ul_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_config.dl)
  return dl_;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::release_dl() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_config.dl)
  clear_has_dl();
  ::protocol::flex_slice_dl_ul_config* temp = dl_;
  dl_ = NULL;
  return temp;
}
inline void flex_slice_config::set_allocated_dl(::protocol::flex_slice_dl_ul_config* dl) {
  delete dl_;
  dl_ = dl;
  if (dl) {
    set_has_dl();
  } else {
    clear_has_dl();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_config.dl)
}

// optional .protocol.flex_slice_dl_ul_config ul = 7;
inline bool flex_slice_config::has_ul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_slice_config::set_has_ul() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_slice_config::clear_has_ul() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_slice_config::clear_ul() {
  if (ul_ != NULL) ul_->::protocol::flex_slice_dl_ul_config::Clear();
  clear_has_ul();
}
inline const ::protocol::flex_slice_dl_ul_config& flex_slice_config::ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_config.ul)
  return ul_ != NULL ? *ul_
                         : *::protocol::flex_slice_dl_ul_config::internal_default_instance();
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::mutable_ul() {
  set_has_ul();
  if (ul_ == NULL) {
    ul_ = new ::protocol::flex_slice_dl_ul_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_config.ul)
  return ul_;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::release_ul() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_config.ul)
  clear_has_ul();
  ::protocol::flex_slice_dl_ul_config* temp = ul_;
  ul_ = NULL;
  return temp;
}
inline void flex_slice_config::set_allocated_ul(::protocol::flex_slice_dl_ul_config* ul) {
  delete ul_;
  ul_ = ul;
  if (ul) {
    set_has_ul();
  } else {
    clear_has_ul();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_config.ul)
}

// -------------------------------------------------------------------

// flex_ue_config

// optional uint32 rnti = 1;
inline bool flex_ue_config::has_rnti() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void flex_ue_config::set_has_rnti() {
  _has_bits_[0] |= 0x00000040u;
}
inline void flex_ue_config::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void flex_ue_config::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
inline ::google::protobuf::uint32 flex_ue_config::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.rnti)
  return rnti_;
}
inline void flex_ue_config::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.rnti)
}

// optional .protocol.flex_drx_config drx_config = 2;
inline bool flex_ue_config::has_drx_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_ue_config::set_has_drx_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_ue_config::clear_has_drx_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_ue_config::clear_drx_config() {
  if (drx_config_ != NULL) drx_config_->::protocol::flex_drx_config::Clear();
  clear_has_drx_config();
}
inline const ::protocol::flex_drx_config& flex_ue_config::drx_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.drx_config)
  return drx_config_ != NULL ? *drx_config_
                         : *::protocol::flex_drx_config::internal_default_instance();
}
inline ::protocol::flex_drx_config* flex_ue_config::mutable_drx_config() {
  set_has_drx_config();
  if (drx_config_ == NULL) {
    drx_config_ = new ::protocol::flex_drx_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.drx_config)
  return drx_config_;
}
inline ::protocol::flex_drx_config* flex_ue_config::release_drx_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.drx_config)
  clear_has_drx_config();
  ::protocol::flex_drx_config* temp = drx_config_;
  drx_config_ = NULL;
  return temp;
}
inline void flex_ue_config::set_allocated_drx_config(::protocol::flex_drx_config* drx_config) {
  delete drx_config_;
  drx_config_ = drx_config;
  if (drx_config) {
    set_has_drx_config();
  } else {
    clear_has_drx_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.drx_config)
}

// optional uint32 time_alignment_timer = 3;
inline bool flex_ue_config::has_time_alignment_timer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void flex_ue_config::set_has_time_alignment_timer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void flex_ue_config::clear_has_time_alignment_timer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void flex_ue_config::clear_time_alignment_timer() {
  time_alignment_timer_ = 0u;
  clear_has_time_alignment_timer();
}
inline ::google::protobuf::uint32 flex_ue_config::time_alignment_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.time_alignment_timer)
  return time_alignment_timer_;
}
inline void flex_ue_config::set_time_alignment_timer(::google::protobuf::uint32 value) {
  set_has_time_alignment_timer();
  time_alignment_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.time_alignment_timer)
}

// optional uint32 meas_gap_config_pattern = 4;
inline bool flex_ue_config::has_meas_gap_config_pattern() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void flex_ue_config::set_has_meas_gap_config_pattern() {
  _has_bits_[0] |= 0x00000100u;
}
inline void flex_ue_config::clear_has_meas_gap_config_pattern() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void flex_ue_config::clear_meas_gap_config_pattern() {
  meas_gap_config_pattern_ = 0u;
  clear_has_meas_gap_config_pattern();
}
inline ::google::protobuf::uint32 flex_ue_config::meas_gap_config_pattern() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.meas_gap_config_pattern)
  return meas_gap_config_pattern_;
}
inline void flex_ue_config::set_meas_gap_config_pattern(::google::protobuf::uint32 value) {
  set_has_meas_gap_config_pattern();
  meas_gap_config_pattern_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.meas_gap_config_pattern)
}

// optional uint32 meas_gap_config_sf_offset = 5;
inline bool flex_ue_config::has_meas_gap_config_sf_offset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void flex_ue_config::set_has_meas_gap_config_sf_offset() {
  _has_bits_[0] |= 0x00000200u;
}
inline void flex_ue_config::clear_has_meas_gap_config_sf_offset() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void flex_ue_config::clear_meas_gap_config_sf_offset() {
  meas_gap_config_sf_offset_ = 0u;
  clear_has_meas_gap_config_sf_offset();
}
inline ::google::protobuf::uint32 flex_ue_config::meas_gap_config_sf_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.meas_gap_config_sf_offset)
  return meas_gap_config_sf_offset_;
}
inline void flex_ue_config::set_meas_gap_config_sf_offset(::google::protobuf::uint32 value) {
  set_has_meas_gap_config_sf_offset();
  meas_gap_config_sf_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.meas_gap_config_sf_offset)
}

// optional .protocol.flex_sps_config sps_config = 6;
inline bool flex_ue_config::has_sps_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_ue_config::set_has_sps_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_ue_config::clear_has_sps_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_ue_config::clear_sps_config() {
  if (sps_config_ != NULL) sps_config_->::protocol::flex_sps_config::Clear();
  clear_has_sps_config();
}
inline const ::protocol::flex_sps_config& flex_ue_config::sps_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.sps_config)
  return sps_config_ != NULL ? *sps_config_
                         : *::protocol::flex_sps_config::internal_default_instance();
}
inline ::protocol::flex_sps_config* flex_ue_config::mutable_sps_config() {
  set_has_sps_config();
  if (sps_config_ == NULL) {
    sps_config_ = new ::protocol::flex_sps_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.sps_config)
  return sps_config_;
}
inline ::protocol::flex_sps_config* flex_ue_config::release_sps_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.sps_config)
  clear_has_sps_config();
  ::protocol::flex_sps_config* temp = sps_config_;
  sps_config_ = NULL;
  return temp;
}
inline void flex_ue_config::set_allocated_sps_config(::protocol::flex_sps_config* sps_config) {
  delete sps_config_;
  sps_config_ = sps_config;
  if (sps_config) {
    set_has_sps_config();
  } else {
    clear_has_sps_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.sps_config)
}

// optional .protocol.flex_sr_config sr_config = 7;
inline bool flex_ue_config::has_sr_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flex_ue_config::set_has_sr_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flex_ue_config::clear_has_sr_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flex_ue_config::clear_sr_config() {
  if (sr_config_ != NULL) sr_config_->::protocol::flex_sr_config::Clear();
  clear_has_sr_config();
}
inline const ::protocol::flex_sr_config& flex_ue_config::sr_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.sr_config)
  return sr_config_ != NULL ? *sr_config_
                         : *::protocol::flex_sr_config::internal_default_instance();
}
inline ::protocol::flex_sr_config* flex_ue_config::mutable_sr_config() {
  set_has_sr_config();
  if (sr_config_ == NULL) {
    sr_config_ = new ::protocol::flex_sr_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.sr_config)
  return sr_config_;
}
inline ::protocol::flex_sr_config* flex_ue_config::release_sr_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.sr_config)
  clear_has_sr_config();
  ::protocol::flex_sr_config* temp = sr_config_;
  sr_config_ = NULL;
  return temp;
}
inline void flex_ue_config::set_allocated_sr_config(::protocol::flex_sr_config* sr_config) {
  delete sr_config_;
  sr_config_ = sr_config;
  if (sr_config) {
    set_has_sr_config();
  } else {
    clear_has_sr_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.sr_config)
}

// optional .protocol.flex_cqi_config cqi_config = 8;
inline bool flex_ue_config::has_cqi_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flex_ue_config::set_has_cqi_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flex_ue_config::clear_has_cqi_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flex_ue_config::clear_cqi_config() {
  if (cqi_config_ != NULL) cqi_config_->::protocol::flex_cqi_config::Clear();
  clear_has_cqi_config();
}
inline const ::protocol::flex_cqi_config& flex_ue_config::cqi_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.cqi_config)
  return cqi_config_ != NULL ? *cqi_config_
                         : *::protocol::flex_cqi_config::internal_default_instance();
}
inline ::protocol::flex_cqi_config* flex_ue_config::mutable_cqi_config() {
  set_has_cqi_config();
  if (cqi_config_ == NULL) {
    cqi_config_ = new ::protocol::flex_cqi_config;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.cqi_config)
  return cqi_config_;
}
inline ::protocol::flex_cqi_config* flex_ue_config::release_cqi_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.cqi_config)
  clear_has_cqi_config();
  ::protocol::flex_cqi_config* temp = cqi_config_;
  cqi_config_ = NULL;
  return temp;
}
inline void flex_ue_config::set_allocated_cqi_config(::protocol::flex_cqi_config* cqi_config) {
  delete cqi_config_;
  cqi_config_ = cqi_config;
  if (cqi_config) {
    set_has_cqi_config();
  } else {
    clear_has_cqi_config();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.cqi_config)
}

// optional uint32 transmission_mode = 9;
inline bool flex_ue_config::has_transmission_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void flex_ue_config::set_has_transmission_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void flex_ue_config::clear_has_transmission_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void flex_ue_config::clear_transmission_mode() {
  transmission_mode_ = 0u;
  clear_has_transmission_mode();
}
inline ::google::protobuf::uint32 flex_ue_config::transmission_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.transmission_mode)
  return transmission_mode_;
}
inline void flex_ue_config::set_transmission_mode(::google::protobuf::uint32 value) {
  set_has_transmission_mode();
  transmission_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.transmission_mode)
}

// optional uint64 ue_aggregated_max_bitrate_UL = 10;
inline bool flex_ue_config::has_ue_aggregated_max_bitrate_ul() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void flex_ue_config::set_has_ue_aggregated_max_bitrate_ul() {
  _has_bits_[0] |= 0x00000400u;
}
inline void flex_ue_config::clear_has_ue_aggregated_max_bitrate_ul() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void flex_ue_config::clear_ue_aggregated_max_bitrate_ul() {
  ue_aggregated_max_bitrate_ul_ = GOOGLE_ULONGLONG(0);
  clear_has_ue_aggregated_max_bitrate_ul();
}
inline ::google::protobuf::uint64 flex_ue_config::ue_aggregated_max_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_aggregated_max_bitrate_UL)
  return ue_aggregated_max_bitrate_ul_;
}
inline void flex_ue_config::set_ue_aggregated_max_bitrate_ul(::google::protobuf::uint64 value) {
  set_has_ue_aggregated_max_bitrate_ul();
  ue_aggregated_max_bitrate_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_aggregated_max_bitrate_UL)
}

// optional uint64 ue_aggregated_max_bitrate_DL = 11;
inline bool flex_ue_config::has_ue_aggregated_max_bitrate_dl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void flex_ue_config::set_has_ue_aggregated_max_bitrate_dl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void flex_ue_config::clear_has_ue_aggregated_max_bitrate_dl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void flex_ue_config::clear_ue_aggregated_max_bitrate_dl() {
  ue_aggregated_max_bitrate_dl_ = GOOGLE_ULONGLONG(0);
  clear_has_ue_aggregated_max_bitrate_dl();
}
inline ::google::protobuf::uint64 flex_ue_config::ue_aggregated_max_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_aggregated_max_bitrate_DL)
  return ue_aggregated_max_bitrate_dl_;
}
inline void flex_ue_config::set_ue_aggregated_max_bitrate_dl(::google::protobuf::uint64 value) {
  set_has_ue_aggregated_max_bitrate_dl();
  ue_aggregated_max_bitrate_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_aggregated_max_bitrate_DL)
}

// optional .protocol.flex_ue_capabilities capabilities = 12;
inline bool flex_ue_config::has_capabilities() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flex_ue_config::set_has_capabilities() {
  _has_bits_[0] |= 0x00000010u;
}
inline void flex_ue_config::clear_has_capabilities() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void flex_ue_config::clear_capabilities() {
  if (capabilities_ != NULL) capabilities_->::protocol::flex_ue_capabilities::Clear();
  clear_has_capabilities();
}
inline const ::protocol::flex_ue_capabilities& flex_ue_config::capabilities() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.capabilities)
  return capabilities_ != NULL ? *capabilities_
                         : *::protocol::flex_ue_capabilities::internal_default_instance();
}
inline ::protocol::flex_ue_capabilities* flex_ue_config::mutable_capabilities() {
  set_has_capabilities();
  if (capabilities_ == NULL) {
    capabilities_ = new ::protocol::flex_ue_capabilities;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.capabilities)
  return capabilities_;
}
inline ::protocol::flex_ue_capabilities* flex_ue_config::release_capabilities() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.capabilities)
  clear_has_capabilities();
  ::protocol::flex_ue_capabilities* temp = capabilities_;
  capabilities_ = NULL;
  return temp;
}
inline void flex_ue_config::set_allocated_capabilities(::protocol::flex_ue_capabilities* capabilities) {
  delete capabilities_;
  capabilities_ = capabilities;
  if (capabilities) {
    set_has_capabilities();
  } else {
    clear_has_capabilities();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.capabilities)
}

// optional uint32 ue_transmission_antenna = 13;
inline bool flex_ue_config::has_ue_transmission_antenna() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void flex_ue_config::set_has_ue_transmission_antenna() {
  _has_bits_[0] |= 0x00002000u;
}
inline void flex_ue_config::clear_has_ue_transmission_antenna() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void flex_ue_config::clear_ue_transmission_antenna() {
  ue_transmission_antenna_ = 0u;
  clear_has_ue_transmission_antenna();
}
inline ::google::protobuf::uint32 flex_ue_config::ue_transmission_antenna() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_transmission_antenna)
  return ue_transmission_antenna_;
}
inline void flex_ue_config::set_ue_transmission_antenna(::google::protobuf::uint32 value) {
  set_has_ue_transmission_antenna();
  ue_transmission_antenna_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_transmission_antenna)
}

// optional uint32 tti_bundling = 14;
inline bool flex_ue_config::has_tti_bundling() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void flex_ue_config::set_has_tti_bundling() {
  _has_bits_[0] |= 0x00004000u;
}
inline void flex_ue_config::clear_has_tti_bundling() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void flex_ue_config::clear_tti_bundling() {
  tti_bundling_ = 0u;
  clear_has_tti_bundling();
}
inline ::google::protobuf::uint32 flex_ue_config::tti_bundling() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.tti_bundling)
  return tti_bundling_;
}
inline void flex_ue_config::set_tti_bundling(::google::protobuf::uint32 value) {
  set_has_tti_bundling();
  tti_bundling_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.tti_bundling)
}

// optional uint32 max_HARQ_tx = 15;
inline bool flex_ue_config::has_max_harq_tx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void flex_ue_config::set_has_max_harq_tx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void flex_ue_config::clear_has_max_harq_tx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void flex_ue_config::clear_max_harq_tx() {
  max_harq_tx_ = 0u;
  clear_has_max_harq_tx();
}
inline ::google::protobuf::uint32 flex_ue_config::max_harq_tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.max_HARQ_tx)
  return max_harq_tx_;
}
inline void flex_ue_config::set_max_harq_tx(::google::protobuf::uint32 value) {
  set_has_max_harq_tx();
  max_harq_tx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.max_HARQ_tx)
}

// optional uint32 beta_offset_ACK_index = 16;
inline bool flex_ue_config::has_beta_offset_ack_index() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void flex_ue_config::set_has_beta_offset_ack_index() {
  _has_bits_[0] |= 0x00010000u;
}
inline void flex_ue_config::clear_has_beta_offset_ack_index() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void flex_ue_config::clear_beta_offset_ack_index() {
  beta_offset_ack_index_ = 0u;
  clear_has_beta_offset_ack_index();
}
inline ::google::protobuf::uint32 flex_ue_config::beta_offset_ack_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_ACK_index)
  return beta_offset_ack_index_;
}
inline void flex_ue_config::set_beta_offset_ack_index(::google::protobuf::uint32 value) {
  set_has_beta_offset_ack_index();
  beta_offset_ack_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_ACK_index)
}

// optional uint32 beta_offset_RI_index = 17;
inline bool flex_ue_config::has_beta_offset_ri_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void flex_ue_config::set_has_beta_offset_ri_index() {
  _has_bits_[0] |= 0x00020000u;
}
inline void flex_ue_config::clear_has_beta_offset_ri_index() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void flex_ue_config::clear_beta_offset_ri_index() {
  beta_offset_ri_index_ = 0u;
  clear_has_beta_offset_ri_index();
}
inline ::google::protobuf::uint32 flex_ue_config::beta_offset_ri_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_RI_index)
  return beta_offset_ri_index_;
}
inline void flex_ue_config::set_beta_offset_ri_index(::google::protobuf::uint32 value) {
  set_has_beta_offset_ri_index();
  beta_offset_ri_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_RI_index)
}

// optional uint32 beta_offset_CQI_index = 18;
inline bool flex_ue_config::has_beta_offset_cqi_index() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void flex_ue_config::set_has_beta_offset_cqi_index() {
  _has_bits_[0] |= 0x00040000u;
}
inline void flex_ue_config::clear_has_beta_offset_cqi_index() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void flex_ue_config::clear_beta_offset_cqi_index() {
  beta_offset_cqi_index_ = 0u;
  clear_has_beta_offset_cqi_index();
}
inline ::google::protobuf::uint32 flex_ue_config::beta_offset_cqi_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_CQI_index)
  return beta_offset_cqi_index_;
}
inline void flex_ue_config::set_beta_offset_cqi_index(::google::protobuf::uint32 value) {
  set_has_beta_offset_cqi_index();
  beta_offset_cqi_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_CQI_index)
}

// optional uint32 ack_nack_simultaneous_trans = 19;
inline bool flex_ue_config::has_ack_nack_simultaneous_trans() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void flex_ue_config::set_has_ack_nack_simultaneous_trans() {
  _has_bits_[0] |= 0x00080000u;
}
inline void flex_ue_config::clear_has_ack_nack_simultaneous_trans() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void flex_ue_config::clear_ack_nack_simultaneous_trans() {
  ack_nack_simultaneous_trans_ = 0u;
  clear_has_ack_nack_simultaneous_trans();
}
inline ::google::protobuf::uint32 flex_ue_config::ack_nack_simultaneous_trans() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ack_nack_simultaneous_trans)
  return ack_nack_simultaneous_trans_;
}
inline void flex_ue_config::set_ack_nack_simultaneous_trans(::google::protobuf::uint32 value) {
  set_has_ack_nack_simultaneous_trans();
  ack_nack_simultaneous_trans_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ack_nack_simultaneous_trans)
}

// optional uint32 simultaneous_ack_nack_cqi = 20;
inline bool flex_ue_config::has_simultaneous_ack_nack_cqi() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void flex_ue_config::set_has_simultaneous_ack_nack_cqi() {
  _has_bits_[0] |= 0x00100000u;
}
inline void flex_ue_config::clear_has_simultaneous_ack_nack_cqi() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void flex_ue_config::clear_simultaneous_ack_nack_cqi() {
  simultaneous_ack_nack_cqi_ = 0u;
  clear_has_simultaneous_ack_nack_cqi();
}
inline ::google::protobuf::uint32 flex_ue_config::simultaneous_ack_nack_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.simultaneous_ack_nack_cqi)
  return simultaneous_ack_nack_cqi_;
}
inline void flex_ue_config::set_simultaneous_ack_nack_cqi(::google::protobuf::uint32 value) {
  set_has_simultaneous_ack_nack_cqi();
  simultaneous_ack_nack_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.simultaneous_ack_nack_cqi)
}

// optional uint32 aperiodic_cqi_rep_mode = 21;
inline bool flex_ue_config::has_aperiodic_cqi_rep_mode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void flex_ue_config::set_has_aperiodic_cqi_rep_mode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void flex_ue_config::clear_has_aperiodic_cqi_rep_mode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void flex_ue_config::clear_aperiodic_cqi_rep_mode() {
  aperiodic_cqi_rep_mode_ = 0u;
  clear_has_aperiodic_cqi_rep_mode();
}
inline ::google::protobuf::uint32 flex_ue_config::aperiodic_cqi_rep_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.aperiodic_cqi_rep_mode)
  return aperiodic_cqi_rep_mode_;
}
inline void flex_ue_config::set_aperiodic_cqi_rep_mode(::google::protobuf::uint32 value) {
  set_has_aperiodic_cqi_rep_mode();
  aperiodic_cqi_rep_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.aperiodic_cqi_rep_mode)
}

// optional uint32 tdd_ack_nack_feedback = 22;
inline bool flex_ue_config::has_tdd_ack_nack_feedback() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void flex_ue_config::set_has_tdd_ack_nack_feedback() {
  _has_bits_[0] |= 0x00400000u;
}
inline void flex_ue_config::clear_has_tdd_ack_nack_feedback() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void flex_ue_config::clear_tdd_ack_nack_feedback() {
  tdd_ack_nack_feedback_ = 0u;
  clear_has_tdd_ack_nack_feedback();
}
inline ::google::protobuf::uint32 flex_ue_config::tdd_ack_nack_feedback() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.tdd_ack_nack_feedback)
  return tdd_ack_nack_feedback_;
}
inline void flex_ue_config::set_tdd_ack_nack_feedback(::google::protobuf::uint32 value) {
  set_has_tdd_ack_nack_feedback();
  tdd_ack_nack_feedback_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.tdd_ack_nack_feedback)
}

// optional uint32 ack_nack_repetition_factor = 23;
inline bool flex_ue_config::has_ack_nack_repetition_factor() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void flex_ue_config::set_has_ack_nack_repetition_factor() {
  _has_bits_[0] |= 0x00800000u;
}
inline void flex_ue_config::clear_has_ack_nack_repetition_factor() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void flex_ue_config::clear_ack_nack_repetition_factor() {
  ack_nack_repetition_factor_ = 0u;
  clear_has_ack_nack_repetition_factor();
}
inline ::google::protobuf::uint32 flex_ue_config::ack_nack_repetition_factor() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ack_nack_repetition_factor)
  return ack_nack_repetition_factor_;
}
inline void flex_ue_config::set_ack_nack_repetition_factor(::google::protobuf::uint32 value) {
  set_has_ack_nack_repetition_factor();
  ack_nack_repetition_factor_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ack_nack_repetition_factor)
}

// optional uint32 extended_bsr_size = 24;
inline bool flex_ue_config::has_extended_bsr_size() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void flex_ue_config::set_has_extended_bsr_size() {
  _has_bits_[0] |= 0x01000000u;
}
inline void flex_ue_config::clear_has_extended_bsr_size() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void flex_ue_config::clear_extended_bsr_size() {
  extended_bsr_size_ = 0u;
  clear_has_extended_bsr_size();
}
inline ::google::protobuf::uint32 flex_ue_config::extended_bsr_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.extended_bsr_size)
  return extended_bsr_size_;
}
inline void flex_ue_config::set_extended_bsr_size(::google::protobuf::uint32 value) {
  set_has_extended_bsr_size();
  extended_bsr_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.extended_bsr_size)
}

// optional uint32 ca_support = 25;
inline bool flex_ue_config::has_ca_support() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void flex_ue_config::set_has_ca_support() {
  _has_bits_[0] |= 0x02000000u;
}
inline void flex_ue_config::clear_has_ca_support() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void flex_ue_config::clear_ca_support() {
  ca_support_ = 0u;
  clear_has_ca_support();
}
inline ::google::protobuf::uint32 flex_ue_config::ca_support() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ca_support)
  return ca_support_;
}
inline void flex_ue_config::set_ca_support(::google::protobuf::uint32 value) {
  set_has_ca_support();
  ca_support_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ca_support)
}

// optional uint32 cross_carrier_sched_support = 26;
inline bool flex_ue_config::has_cross_carrier_sched_support() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void flex_ue_config::set_has_cross_carrier_sched_support() {
  _has_bits_[0] |= 0x04000000u;
}
inline void flex_ue_config::clear_has_cross_carrier_sched_support() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void flex_ue_config::clear_cross_carrier_sched_support() {
  cross_carrier_sched_support_ = 0u;
  clear_has_cross_carrier_sched_support();
}
inline ::google::protobuf::uint32 flex_ue_config::cross_carrier_sched_support() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.cross_carrier_sched_support)
  return cross_carrier_sched_support_;
}
inline void flex_ue_config::set_cross_carrier_sched_support(::google::protobuf::uint32 value) {
  set_has_cross_carrier_sched_support();
  cross_carrier_sched_support_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.cross_carrier_sched_support)
}

// optional uint32 pcell_carrier_index = 27;
inline bool flex_ue_config::has_pcell_carrier_index() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void flex_ue_config::set_has_pcell_carrier_index() {
  _has_bits_[0] |= 0x08000000u;
}
inline void flex_ue_config::clear_has_pcell_carrier_index() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void flex_ue_config::clear_pcell_carrier_index() {
  pcell_carrier_index_ = 0u;
  clear_has_pcell_carrier_index();
}
inline ::google::protobuf::uint32 flex_ue_config::pcell_carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.pcell_carrier_index)
  return pcell_carrier_index_;
}
inline void flex_ue_config::set_pcell_carrier_index(::google::protobuf::uint32 value) {
  set_has_pcell_carrier_index();
  pcell_carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.pcell_carrier_index)
}

// repeated .protocol.flex_scell_config scell_config = 28;
inline int flex_ue_config::scell_config_size() const {
  return scell_config_.size();
}
inline void flex_ue_config::clear_scell_config() {
  scell_config_.Clear();
}
inline const ::protocol::flex_scell_config& flex_ue_config::scell_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.scell_config)
  return scell_config_.Get(index);
}
inline ::protocol::flex_scell_config* flex_ue_config::mutable_scell_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.scell_config)
  return scell_config_.Mutable(index);
}
inline ::protocol::flex_scell_config* flex_ue_config::add_scell_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_config.scell_config)
  return scell_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config >*
flex_ue_config::mutable_scell_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_config.scell_config)
  return &scell_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::flex_scell_config >&
flex_ue_config::scell_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_config.scell_config)
  return scell_config_;
}

// optional uint32 scell_deactivation_timer = 29;
inline bool flex_ue_config::has_scell_deactivation_timer() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void flex_ue_config::set_has_scell_deactivation_timer() {
  _has_bits_[0] |= 0x20000000u;
}
inline void flex_ue_config::clear_has_scell_deactivation_timer() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void flex_ue_config::clear_scell_deactivation_timer() {
  scell_deactivation_timer_ = 0u;
  clear_has_scell_deactivation_timer();
}
inline ::google::protobuf::uint32 flex_ue_config::scell_deactivation_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.scell_deactivation_timer)
  return scell_deactivation_timer_;
}
inline void flex_ue_config::set_scell_deactivation_timer(::google::protobuf::uint32 value) {
  set_has_scell_deactivation_timer();
  scell_deactivation_timer_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.scell_deactivation_timer)
}

// optional uint64 imsi = 30;
inline bool flex_ue_config::has_imsi() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void flex_ue_config::set_has_imsi() {
  _has_bits_[0] |= 0x10000000u;
}
inline void flex_ue_config::clear_has_imsi() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void flex_ue_config::clear_imsi() {
  imsi_ = GOOGLE_ULONGLONG(0);
  clear_has_imsi();
}
inline ::google::protobuf::uint64 flex_ue_config::imsi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.imsi)
  return imsi_;
}
inline void flex_ue_config::set_imsi(::google::protobuf::uint64 value) {
  set_has_imsi();
  imsi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.imsi)
}

// optional uint32 dl_slice_id = 31;
inline bool flex_ue_config::has_dl_slice_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void flex_ue_config::set_has_dl_slice_id() {
  _has_bits_[0] |= 0x40000000u;
}
inline void flex_ue_config::clear_has_dl_slice_id() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void flex_ue_config::clear_dl_slice_id() {
  dl_slice_id_ = 0u;
  clear_has_dl_slice_id();
}
inline ::google::protobuf::uint32 flex_ue_config::dl_slice_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.dl_slice_id)
  return dl_slice_id_;
}
inline void flex_ue_config::set_dl_slice_id(::google::protobuf::uint32 value) {
  set_has_dl_slice_id();
  dl_slice_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.dl_slice_id)
}

// optional uint32 ul_slice_id = 32;
inline bool flex_ue_config::has_ul_slice_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void flex_ue_config::set_has_ul_slice_id() {
  _has_bits_[0] |= 0x80000000u;
}
inline void flex_ue_config::clear_has_ul_slice_id() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void flex_ue_config::clear_ul_slice_id() {
  ul_slice_id_ = 0u;
  clear_has_ul_slice_id();
}
inline ::google::protobuf::uint32 flex_ue_config::ul_slice_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ul_slice_id)
  return ul_slice_id_;
}
inline void flex_ue_config::set_ul_slice_id(::google::protobuf::uint32 value) {
  set_has_ul_slice_id();
  ul_slice_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ul_slice_id)
}

// optional .protocol.flex_measurement_info info = 33;
inline bool flex_ue_config::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void flex_ue_config::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void flex_ue_config::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void flex_ue_config::clear_info() {
  if (info_ != NULL) info_->::protocol::flex_measurement_info::Clear();
  clear_has_info();
}
inline const ::protocol::flex_measurement_info& flex_ue_config::info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.info)
  return info_ != NULL ? *info_
                         : *::protocol::flex_measurement_info::internal_default_instance();
}
inline ::protocol::flex_measurement_info* flex_ue_config::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::protocol::flex_measurement_info;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.info)
  return info_;
}
inline ::protocol::flex_measurement_info* flex_ue_config::release_info() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.info)
  clear_has_info();
  ::protocol::flex_measurement_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void flex_ue_config::set_allocated_info(::protocol::flex_measurement_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.info)
}

// -------------------------------------------------------------------

// flex_lc_ue_config

// optional uint32 rnti = 1;
inline bool flex_lc_ue_config::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_lc_ue_config::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_lc_ue_config::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_lc_ue_config::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
inline ::google::protobuf::uint32 flex_lc_ue_config::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_ue_config.rnti)
  return rnti_;
}
inline void flex_lc_ue_config::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_lc_ue_config.rnti)
}

// repeated .protocol.flex_lc_config lc_config = 2;
inline int flex_lc_ue_config::lc_config_size() const {
  return lc_config_.size();
}
inline void flex_lc_ue_config::clear_lc_config() {
  lc_config_.Clear();
}
inline const ::protocol::flex_lc_config& flex_lc_ue_config::lc_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Get(index);
}
inline ::protocol::flex_lc_config* flex_lc_ue_config::mutable_lc_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Mutable(index);
}
inline ::protocol::flex_lc_config* flex_lc_ue_config::add_lc_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config >*
flex_lc_ue_config::mutable_lc_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_lc_ue_config.lc_config)
  return &lc_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::flex_lc_config >&
flex_lc_ue_config::lc_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_lc_ue_config.lc_config)
  return lc_config_;
}

// -------------------------------------------------------------------

// flex_s1ap_config

// optional uint32 pending = 1;
inline bool flex_s1ap_config::has_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flex_s1ap_config::set_has_pending() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flex_s1ap_config::clear_has_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flex_s1ap_config::clear_pending() {
  pending_ = 0u;
  clear_has_pending();
}
inline ::google::protobuf::uint32 flex_s1ap_config::pending() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.pending)
  return pending_;
}
inline void flex_s1ap_config::set_pending(::google::protobuf::uint32 value) {
  set_has_pending();
  pending_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.pending)
}

// optional uint32 connected = 2;
inline bool flex_s1ap_config::has_connected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flex_s1ap_config::set_has_connected() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flex_s1ap_config::clear_has_connected() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flex_s1ap_config::clear_connected() {
  connected_ = 0u;
  clear_has_connected();
}
inline ::google::protobuf::uint32 flex_s1ap_config::connected() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.connected)
  return connected_;
}
inline void flex_s1ap_config::set_connected(::google::protobuf::uint32 value) {
  set_has_connected();
  connected_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.connected)
}

// optional string enb_s1_ip = 3;
inline bool flex_s1ap_config::has_enb_s1_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flex_s1ap_config::set_has_enb_s1_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flex_s1ap_config::clear_has_enb_s1_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flex_s1ap_config::clear_enb_s1_ip() {
  enb_s1_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enb_s1_ip();
}
inline const ::std::string& flex_s1ap_config::enb_s1_ip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.enb_s1_ip)
  return enb_s1_ip_.GetNoArena();
}
inline void flex_s1ap_config::set_enb_s1_ip(const ::std::string& value) {
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.enb_s1_ip)
}
#if LANG_CXX11
inline void flex_s1ap_config::set_enb_s1_ip(::std::string&& value) {
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_config.enb_s1_ip)
}
#endif
inline void flex_s1ap_config::set_enb_s1_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_config.enb_s1_ip)
}
inline void flex_s1ap_config::set_enb_s1_ip(const char* value, size_t size) {
  set_has_enb_s1_ip();
  enb_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_config.enb_s1_ip)
}
inline ::std::string* flex_s1ap_config::mutable_enb_s1_ip() {
  set_has_enb_s1_ip();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.enb_s1_ip)
  return enb_s1_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* flex_s1ap_config::release_enb_s1_ip() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_config.enb_s1_ip)
  clear_has_enb_s1_ip();
  return enb_s1_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void flex_s1ap_config::set_allocated_enb_s1_ip(::std::string* enb_s1_ip) {
  if (enb_s1_ip != NULL) {
    set_has_enb_s1_ip();
  } else {
    clear_has_enb_s1_ip();
  }
  enb_s1_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enb_s1_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_config.enb_s1_ip)
}

// optional string enb_name = 4;
inline bool flex_s1ap_config::has_enb_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flex_s1ap_config::set_has_enb_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flex_s1ap_config::clear_has_enb_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flex_s1ap_config::clear_enb_name() {
  enb_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enb_name();
}
inline const ::std::string& flex_s1ap_config::enb_name() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.enb_name)
  return enb_name_.GetNoArena();
}
inline void flex_s1ap_config::set_enb_name(const ::std::string& value) {
  set_has_enb_name();
  enb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.enb_name)
}
#if LANG_CXX11
inline void flex_s1ap_config::set_enb_name(::std::string&& value) {
  set_has_enb_name();
  enb_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_config.enb_name)
}
#endif
inline void flex_s1ap_config::set_enb_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enb_name();
  enb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_config.enb_name)
}
inline void flex_s1ap_config::set_enb_name(const char* value, size_t size) {
  set_has_enb_name();
  enb_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_config.enb_name)
}
inline ::std::string* flex_s1ap_config::mutable_enb_name() {
  set_has_enb_name();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.enb_name)
  return enb_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* flex_s1ap_config::release_enb_name() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_config.enb_name)
  clear_has_enb_name();
  return enb_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void flex_s1ap_config::set_allocated_enb_name(::std::string* enb_name) {
  if (enb_name != NULL) {
    set_has_enb_name();
  } else {
    clear_has_enb_name();
  }
  enb_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enb_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_config.enb_name)
}

// repeated .protocol.flex_s1ap_mme mme = 5;
inline int flex_s1ap_config::mme_size() const {
  return mme_.size();
}
inline void flex_s1ap_config::clear_mme() {
  mme_.Clear();
}
inline const ::protocol::flex_s1ap_mme& flex_s1ap_config::mme(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.mme)
  return mme_.Get(index);
}
inline ::protocol::flex_s1ap_mme* flex_s1ap_config::mutable_mme(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.mme)
  return mme_.Mutable(index);
}
inline ::protocol::flex_s1ap_mme* flex_s1ap_config::add_mme() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_config.mme)
  return mme_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme >*
flex_s1ap_config::mutable_mme() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_config.mme)
  return &mme_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::flex_s1ap_mme >&
flex_s1ap_config::mme() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_config.mme)
  return mme_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_config_5fmessages_2eproto__INCLUDED
