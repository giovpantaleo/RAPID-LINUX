// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mac_primitives.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mac_primitives.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_dl_dciDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_dci> {
} _flex_dl_dci_default_instance_;
class flex_ul_dciDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_dci> {
} _flex_ul_dci_default_instance_;
class flex_rlc_pduDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_rlc_pdu> {
} _flex_rlc_pdu_default_instance_;
class flex_rlc_pdu_tbDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_rlc_pdu_tb> {
} _flex_rlc_pdu_tb_default_instance_;

namespace protobuf_mac_5fprimitives_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, res_alloc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, rb_bitmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, rb_shift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, tbs_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, ndi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, rv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, cce_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, aggr_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, precoding_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, tpc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, harq_process_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, dai_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, vrb_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, tb_swap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, sps_release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, pdcch_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, preamble_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, prach_mask_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, n_gap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, tbs_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, dl_power_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, pdcch_power_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, cif_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_dci, cif_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, rnti_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, rb_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, rb_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, mcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, cyclic_shift2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, freq_hop_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, freq_hop_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, ndi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, rv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, harq_pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, ultx_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, tbs_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, n_srs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, res_alloc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_dci, dai_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu, rlc_pdu_tb_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu_tb, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu_tb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu_tb, logical_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_pdu_tb, size_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 32, sizeof(flex_dl_dci)},
  { 59, 80, sizeof(flex_ul_dci)},
  { 96, 102, sizeof(flex_rlc_pdu)},
  { 103, 110, sizeof(flex_rlc_pdu_tb)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_dci_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_dci_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_rlc_pdu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_rlc_pdu_tb_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mac_primitives.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_dl_dci_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_ul_dci_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_rlc_pdu_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_rlc_pdu_tb_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _flex_dl_dci_default_instance_.DefaultConstruct();
  _flex_ul_dci_default_instance_.DefaultConstruct();
  _flex_rlc_pdu_default_instance_.DefaultConstruct();
  _flex_rlc_pdu_tb_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024mac_primitives.proto\022\010protocol\"\202\004\n\013fle"
      "x_dl_dci\022\014\n\004rnti\030\001 \001(\r\022\021\n\tres_alloc\030\002 \001("
      "\r\022\021\n\trb_bitmap\030\003 \001(\r\022\020\n\010rb_shift\030\004 \001(\r\022\020"
      "\n\010tbs_size\030\005 \003(\r\022\013\n\003mcs\030\006 \003(\r\022\013\n\003ndi\030\007 \003"
      "(\r\022\n\n\002rv\030\010 \003(\r\022\021\n\tcce_index\030\t \001(\r\022\022\n\nagg"
      "r_level\030\n \001(\r\022\026\n\016precoding_info\030\013 \001(\r\022\016\n"
      "\006format\030\014 \001(\r\022\013\n\003tpc\030\r \001(\r\022\024\n\014harq_proce"
      "ss\030\016 \001(\r\022\013\n\003dai\030\017 \001(\r\022\022\n\nvrb_format\030\020 \001("
      "\r\022\017\n\007tb_swap\030\021 \001(\r\022\023\n\013sps_release\030\022 \001(\r\022"
      "\023\n\013pdcch_order\030\023 \001(\r\022\026\n\016preamble_index\030\024"
      " \001(\r\022\030\n\020prach_mask_index\030\025 \001(\r\022\r\n\005n_gap\030"
      "\026 \001(\r\022\017\n\007tbs_idx\030\027 \001(\r\022\027\n\017dl_power_offse"
      "t\030\030 \001(\r\022\032\n\022pdcch_power_offset\030\031 \001(\r\022\023\n\013c"
      "if_present\030\032 \001(\r\022\013\n\003cif\030\033 \001(\r\"\233\002\n\013flex_u"
      "l_dci\022\014\n\004rnti\030\001 \001(\r\022\020\n\010rb_start\030\002 \001(\r\022\016\n"
      "\006rb_len\030\003 \001(\r\022\013\n\003mcs\030\004 \001(\r\022\025\n\rcyclic_shi"
      "ft2\030\005 \001(\r\022\025\n\rfreq_hop_flag\030\006 \001(\r\022\024\n\014freq"
      "_hop_map\030\007 \001(\r\022\013\n\003ndi\030\010 \001(\r\022\n\n\002rv\030\t \001(\r\022"
      "\020\n\010harq_pid\030\n \001(\r\022\021\n\tultx_mode\030\013 \001(\r\022\020\n\010"
      "tbs_size\030\014 \001(\r\022\r\n\005n_srs\030\r \001(\r\022\021\n\tres_all"
      "oc\030\016 \001(\r\022\014\n\004size\030\017 \001(\r\022\013\n\003dai\030\020 \001(\r\"=\n\014f"
      "lex_rlc_pdu\022-\n\nrlc_pdu_tb\030\001 \003(\0132\031.protoc"
      "ol.flex_rlc_pdu_tb\";\n\017flex_rlc_pdu_tb\022\032\n"
      "\022logical_channel_id\030\001 \001(\r\022\014\n\004size\030\002 \001(\r*"
      "\244\001\n\017flex_dci_format\022\014\n\010FLDCIF_1\020\000\022\r\n\tFLD"
      "CIF_1A\020\001\022\r\n\tFLDCIF_1B\020\002\022\r\n\tFLDCIF_1C\020\003\022\r"
      "\n\tFLDCIF_1D\020\004\022\014\n\010FLDCIF_2\020\005\022\r\n\tFLDCIF_2A"
      "\020\006\022\r\n\tFLDCIF_2B\020\007\022\014\n\010FLDCIF_3\020\010\022\r\n\tFLDCI"
      "F_3A\020\t*\?\n\017flex_vrb_format\022\024\n\020FLVRBF_LOCA"
      "LIZED\020\000\022\026\n\022FLVRBF_DISTRIBUTED\020\001*)\n\rflex_"
      "ngap_val\022\013\n\007FLNGV_1\020\000\022\013\n\007FLNGV_2\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mac_primitives.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mac_5fprimitives_2eproto

const ::google::protobuf::EnumDescriptor* flex_dci_format_descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_enum_descriptors[0];
}
bool flex_dci_format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_vrb_format_descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_enum_descriptors[1];
}
bool flex_vrb_format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_ngap_val_descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_enum_descriptors[2];
}
bool flex_ngap_val_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_dci::kRntiFieldNumber;
const int flex_dl_dci::kResAllocFieldNumber;
const int flex_dl_dci::kRbBitmapFieldNumber;
const int flex_dl_dci::kRbShiftFieldNumber;
const int flex_dl_dci::kTbsSizeFieldNumber;
const int flex_dl_dci::kMcsFieldNumber;
const int flex_dl_dci::kNdiFieldNumber;
const int flex_dl_dci::kRvFieldNumber;
const int flex_dl_dci::kCceIndexFieldNumber;
const int flex_dl_dci::kAggrLevelFieldNumber;
const int flex_dl_dci::kPrecodingInfoFieldNumber;
const int flex_dl_dci::kFormatFieldNumber;
const int flex_dl_dci::kTpcFieldNumber;
const int flex_dl_dci::kHarqProcessFieldNumber;
const int flex_dl_dci::kDaiFieldNumber;
const int flex_dl_dci::kVrbFormatFieldNumber;
const int flex_dl_dci::kTbSwapFieldNumber;
const int flex_dl_dci::kSpsReleaseFieldNumber;
const int flex_dl_dci::kPdcchOrderFieldNumber;
const int flex_dl_dci::kPreambleIndexFieldNumber;
const int flex_dl_dci::kPrachMaskIndexFieldNumber;
const int flex_dl_dci::kNGapFieldNumber;
const int flex_dl_dci::kTbsIdxFieldNumber;
const int flex_dl_dci::kDlPowerOffsetFieldNumber;
const int flex_dl_dci::kPdcchPowerOffsetFieldNumber;
const int flex_dl_dci::kCifPresentFieldNumber;
const int flex_dl_dci::kCifFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_dci::flex_dl_dci()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mac_5fprimitives_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_dci)
}
flex_dl_dci::flex_dl_dci(const flex_dl_dci& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tbs_size_(from.tbs_size_),
      mcs_(from.mcs_),
      ndi_(from.ndi_),
      rv_(from.rv_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&cif_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(cif_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_dci)
}

void flex_dl_dci::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rnti_, 0, reinterpret_cast<char*>(&cif_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(cif_));
}

flex_dl_dci::~flex_dl_dci() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_dci)
  SharedDtor();
}

void flex_dl_dci::SharedDtor() {
}

void flex_dl_dci::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_dci::descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_dci& flex_dl_dci::default_instance() {
  protobuf_mac_5fprimitives_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_dci* flex_dl_dci::New(::google::protobuf::Arena* arena) const {
  flex_dl_dci* n = new flex_dl_dci;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_dci::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_dci)
  tbs_size_.Clear();
  mcs_.Clear();
  ndi_.Clear();
  rv_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(format_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&tpc_, 0, reinterpret_cast<char*>(&preamble_index_) -
      reinterpret_cast<char*>(&tpc_) + sizeof(preamble_index_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&prach_mask_index_, 0, reinterpret_cast<char*>(&cif_) -
      reinterpret_cast<char*>(&prach_mask_index_) + sizeof(cif_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_dci::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_dci)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 res_alloc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_res_alloc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_alloc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rb_bitmap = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rb_bitmap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_bitmap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rb_shift = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rb_shift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_shift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tbs_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_tbs_size())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tbs_size())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mcs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_mcs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mcs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ndi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_ndi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ndi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rv = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_rv())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cce_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_cce_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cce_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 aggr_level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_aggr_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aggr_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 precoding_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_precoding_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precoding_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 format = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_format();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tpc = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_tpc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tpc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 harq_process = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_harq_process();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harq_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dai = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_dai();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vrb_format = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_vrb_format();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vrb_format_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tb_swap = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_tb_swap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tb_swap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sps_release = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_sps_release();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sps_release_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pdcch_order = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_pdcch_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdcch_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 preamble_index = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_preamble_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preamble_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prach_mask_index = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_prach_mask_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prach_mask_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_gap = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_n_gap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tbs_idx = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_tbs_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbs_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dl_power_offset = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_dl_power_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dl_power_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pdcch_power_offset = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_pdcch_power_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pdcch_power_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cif_present = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_cif_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cif_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cif = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_cif();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cif_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_dci)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_dci)
  return false;
#undef DO_
}

void flex_dl_dci::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_dci)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional uint32 res_alloc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->res_alloc(), output);
  }

  // optional uint32 rb_bitmap = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rb_bitmap(), output);
  }

  // optional uint32 rb_shift = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rb_shift(), output);
  }

  // repeated uint32 tbs_size = 5;
  for (int i = 0, n = this->tbs_size_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->tbs_size(i), output);
  }

  // repeated uint32 mcs = 6;
  for (int i = 0, n = this->mcs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->mcs(i), output);
  }

  // repeated uint32 ndi = 7;
  for (int i = 0, n = this->ndi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->ndi(i), output);
  }

  // repeated uint32 rv = 8;
  for (int i = 0, n = this->rv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->rv(i), output);
  }

  // optional uint32 cce_index = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cce_index(), output);
  }

  // optional uint32 aggr_level = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->aggr_level(), output);
  }

  // optional uint32 precoding_info = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->precoding_info(), output);
  }

  // optional uint32 format = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->format(), output);
  }

  // optional uint32 tpc = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tpc(), output);
  }

  // optional uint32 harq_process = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->harq_process(), output);
  }

  // optional uint32 dai = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dai(), output);
  }

  // optional uint32 vrb_format = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->vrb_format(), output);
  }

  // optional uint32 tb_swap = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->tb_swap(), output);
  }

  // optional uint32 sps_release = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sps_release(), output);
  }

  // optional uint32 pdcch_order = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->pdcch_order(), output);
  }

  // optional uint32 preamble_index = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->preamble_index(), output);
  }

  // optional uint32 prach_mask_index = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->prach_mask_index(), output);
  }

  // optional uint32 n_gap = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->n_gap(), output);
  }

  // optional uint32 tbs_idx = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->tbs_idx(), output);
  }

  // optional uint32 dl_power_offset = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->dl_power_offset(), output);
  }

  // optional uint32 pdcch_power_offset = 25;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->pdcch_power_offset(), output);
  }

  // optional uint32 cif_present = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->cif_present(), output);
  }

  // optional uint32 cif = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->cif(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_dci)
}

::google::protobuf::uint8* flex_dl_dci::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_dci)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional uint32 res_alloc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->res_alloc(), target);
  }

  // optional uint32 rb_bitmap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rb_bitmap(), target);
  }

  // optional uint32 rb_shift = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rb_shift(), target);
  }

  // repeated uint32 tbs_size = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->tbs_size_, target);

  // repeated uint32 mcs = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->mcs_, target);

  // repeated uint32 ndi = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->ndi_, target);

  // repeated uint32 rv = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->rv_, target);

  // optional uint32 cce_index = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cce_index(), target);
  }

  // optional uint32 aggr_level = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->aggr_level(), target);
  }

  // optional uint32 precoding_info = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->precoding_info(), target);
  }

  // optional uint32 format = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->format(), target);
  }

  // optional uint32 tpc = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->tpc(), target);
  }

  // optional uint32 harq_process = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->harq_process(), target);
  }

  // optional uint32 dai = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dai(), target);
  }

  // optional uint32 vrb_format = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->vrb_format(), target);
  }

  // optional uint32 tb_swap = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->tb_swap(), target);
  }

  // optional uint32 sps_release = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sps_release(), target);
  }

  // optional uint32 pdcch_order = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->pdcch_order(), target);
  }

  // optional uint32 preamble_index = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->preamble_index(), target);
  }

  // optional uint32 prach_mask_index = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->prach_mask_index(), target);
  }

  // optional uint32 n_gap = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->n_gap(), target);
  }

  // optional uint32 tbs_idx = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->tbs_idx(), target);
  }

  // optional uint32 dl_power_offset = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->dl_power_offset(), target);
  }

  // optional uint32 pdcch_power_offset = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->pdcch_power_offset(), target);
  }

  // optional uint32 cif_present = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->cif_present(), target);
  }

  // optional uint32 cif = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->cif(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_dci)
  return target;
}

size_t flex_dl_dci::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_dci)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 tbs_size = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tbs_size_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tbs_size_size());
    total_size += data_size;
  }

  // repeated uint32 mcs = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mcs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mcs_size());
    total_size += data_size;
  }

  // repeated uint32 ndi = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ndi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ndi_size());
    total_size += data_size;
  }

  // repeated uint32 rv = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rv_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rv_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 res_alloc = 2;
    if (has_res_alloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_alloc());
    }

    // optional uint32 rb_bitmap = 3;
    if (has_rb_bitmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rb_bitmap());
    }

    // optional uint32 rb_shift = 4;
    if (has_rb_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rb_shift());
    }

    // optional uint32 cce_index = 9;
    if (has_cce_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cce_index());
    }

    // optional uint32 aggr_level = 10;
    if (has_aggr_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aggr_level());
    }

    // optional uint32 precoding_info = 11;
    if (has_precoding_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precoding_info());
    }

    // optional uint32 format = 12;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->format());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 tpc = 13;
    if (has_tpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tpc());
    }

    // optional uint32 harq_process = 14;
    if (has_harq_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harq_process());
    }

    // optional uint32 dai = 15;
    if (has_dai()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dai());
    }

    // optional uint32 vrb_format = 16;
    if (has_vrb_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vrb_format());
    }

    // optional uint32 tb_swap = 17;
    if (has_tb_swap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tb_swap());
    }

    // optional uint32 sps_release = 18;
    if (has_sps_release()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sps_release());
    }

    // optional uint32 pdcch_order = 19;
    if (has_pdcch_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdcch_order());
    }

    // optional uint32 preamble_index = 20;
    if (has_preamble_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preamble_index());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 prach_mask_index = 21;
    if (has_prach_mask_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prach_mask_index());
    }

    // optional uint32 n_gap = 22;
    if (has_n_gap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_gap());
    }

    // optional uint32 tbs_idx = 23;
    if (has_tbs_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbs_idx());
    }

    // optional uint32 dl_power_offset = 24;
    if (has_dl_power_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dl_power_offset());
    }

    // optional uint32 pdcch_power_offset = 25;
    if (has_pdcch_power_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pdcch_power_offset());
    }

    // optional uint32 cif_present = 26;
    if (has_cif_present()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cif_present());
    }

    // optional uint32 cif = 27;
    if (has_cif()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cif());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_dci::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_dci)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_dci* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_dci>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_dci)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_dci)
    MergeFrom(*source);
  }
}

void flex_dl_dci::MergeFrom(const flex_dl_dci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_dci)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tbs_size_.MergeFrom(from.tbs_size_);
  mcs_.MergeFrom(from.mcs_);
  ndi_.MergeFrom(from.ndi_);
  rv_.MergeFrom(from.rv_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      res_alloc_ = from.res_alloc_;
    }
    if (cached_has_bits & 0x00000004u) {
      rb_bitmap_ = from.rb_bitmap_;
    }
    if (cached_has_bits & 0x00000008u) {
      rb_shift_ = from.rb_shift_;
    }
    if (cached_has_bits & 0x00000010u) {
      cce_index_ = from.cce_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      aggr_level_ = from.aggr_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      precoding_info_ = from.precoding_info_;
    }
    if (cached_has_bits & 0x00000080u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      tpc_ = from.tpc_;
    }
    if (cached_has_bits & 0x00000200u) {
      harq_process_ = from.harq_process_;
    }
    if (cached_has_bits & 0x00000400u) {
      dai_ = from.dai_;
    }
    if (cached_has_bits & 0x00000800u) {
      vrb_format_ = from.vrb_format_;
    }
    if (cached_has_bits & 0x00001000u) {
      tb_swap_ = from.tb_swap_;
    }
    if (cached_has_bits & 0x00002000u) {
      sps_release_ = from.sps_release_;
    }
    if (cached_has_bits & 0x00004000u) {
      pdcch_order_ = from.pdcch_order_;
    }
    if (cached_has_bits & 0x00008000u) {
      preamble_index_ = from.preamble_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      prach_mask_index_ = from.prach_mask_index_;
    }
    if (cached_has_bits & 0x00020000u) {
      n_gap_ = from.n_gap_;
    }
    if (cached_has_bits & 0x00040000u) {
      tbs_idx_ = from.tbs_idx_;
    }
    if (cached_has_bits & 0x00080000u) {
      dl_power_offset_ = from.dl_power_offset_;
    }
    if (cached_has_bits & 0x00100000u) {
      pdcch_power_offset_ = from.pdcch_power_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      cif_present_ = from.cif_present_;
    }
    if (cached_has_bits & 0x00400000u) {
      cif_ = from.cif_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_dci::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_dci::CopyFrom(const flex_dl_dci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_dci::IsInitialized() const {
  return true;
}

void flex_dl_dci::Swap(flex_dl_dci* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_dci::InternalSwap(flex_dl_dci* other) {
  tbs_size_.InternalSwap(&other->tbs_size_);
  mcs_.InternalSwap(&other->mcs_);
  ndi_.InternalSwap(&other->ndi_);
  rv_.InternalSwap(&other->rv_);
  std::swap(rnti_, other->rnti_);
  std::swap(res_alloc_, other->res_alloc_);
  std::swap(rb_bitmap_, other->rb_bitmap_);
  std::swap(rb_shift_, other->rb_shift_);
  std::swap(cce_index_, other->cce_index_);
  std::swap(aggr_level_, other->aggr_level_);
  std::swap(precoding_info_, other->precoding_info_);
  std::swap(format_, other->format_);
  std::swap(tpc_, other->tpc_);
  std::swap(harq_process_, other->harq_process_);
  std::swap(dai_, other->dai_);
  std::swap(vrb_format_, other->vrb_format_);
  std::swap(tb_swap_, other->tb_swap_);
  std::swap(sps_release_, other->sps_release_);
  std::swap(pdcch_order_, other->pdcch_order_);
  std::swap(preamble_index_, other->preamble_index_);
  std::swap(prach_mask_index_, other->prach_mask_index_);
  std::swap(n_gap_, other->n_gap_);
  std::swap(tbs_idx_, other->tbs_idx_);
  std::swap(dl_power_offset_, other->dl_power_offset_);
  std::swap(pdcch_power_offset_, other->pdcch_power_offset_);
  std::swap(cif_present_, other->cif_present_);
  std::swap(cif_, other->cif_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_dci::GetMetadata() const {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_dci

// optional uint32 rnti = 1;
bool flex_dl_dci::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_dci::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_dci::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_dci::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_dl_dci::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rnti)
  return rnti_;
}
void flex_dl_dci::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rnti)
}

// optional uint32 res_alloc = 2;
bool flex_dl_dci::has_res_alloc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_dci::set_has_res_alloc() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_dci::clear_has_res_alloc() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_dci::clear_res_alloc() {
  res_alloc_ = 0u;
  clear_has_res_alloc();
}
::google::protobuf::uint32 flex_dl_dci::res_alloc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.res_alloc)
  return res_alloc_;
}
void flex_dl_dci::set_res_alloc(::google::protobuf::uint32 value) {
  set_has_res_alloc();
  res_alloc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.res_alloc)
}

// optional uint32 rb_bitmap = 3;
bool flex_dl_dci::has_rb_bitmap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_dl_dci::set_has_rb_bitmap() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_dl_dci::clear_has_rb_bitmap() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_dl_dci::clear_rb_bitmap() {
  rb_bitmap_ = 0u;
  clear_has_rb_bitmap();
}
::google::protobuf::uint32 flex_dl_dci::rb_bitmap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rb_bitmap)
  return rb_bitmap_;
}
void flex_dl_dci::set_rb_bitmap(::google::protobuf::uint32 value) {
  set_has_rb_bitmap();
  rb_bitmap_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rb_bitmap)
}

// optional uint32 rb_shift = 4;
bool flex_dl_dci::has_rb_shift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_dl_dci::set_has_rb_shift() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_dl_dci::clear_has_rb_shift() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_dl_dci::clear_rb_shift() {
  rb_shift_ = 0u;
  clear_has_rb_shift();
}
::google::protobuf::uint32 flex_dl_dci::rb_shift() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rb_shift)
  return rb_shift_;
}
void flex_dl_dci::set_rb_shift(::google::protobuf::uint32 value) {
  set_has_rb_shift();
  rb_shift_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rb_shift)
}

// repeated uint32 tbs_size = 5;
int flex_dl_dci::tbs_size_size() const {
  return tbs_size_.size();
}
void flex_dl_dci::clear_tbs_size() {
  tbs_size_.Clear();
}
::google::protobuf::uint32 flex_dl_dci::tbs_size(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tbs_size)
  return tbs_size_.Get(index);
}
void flex_dl_dci::set_tbs_size(int index, ::google::protobuf::uint32 value) {
  tbs_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tbs_size)
}
void flex_dl_dci::add_tbs_size(::google::protobuf::uint32 value) {
  tbs_size_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.tbs_size)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::tbs_size() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.tbs_size)
  return tbs_size_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_tbs_size() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.tbs_size)
  return &tbs_size_;
}

// repeated uint32 mcs = 6;
int flex_dl_dci::mcs_size() const {
  return mcs_.size();
}
void flex_dl_dci::clear_mcs() {
  mcs_.Clear();
}
::google::protobuf::uint32 flex_dl_dci::mcs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.mcs)
  return mcs_.Get(index);
}
void flex_dl_dci::set_mcs(int index, ::google::protobuf::uint32 value) {
  mcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.mcs)
}
void flex_dl_dci::add_mcs(::google::protobuf::uint32 value) {
  mcs_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.mcs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::mcs() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.mcs)
  return mcs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_mcs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.mcs)
  return &mcs_;
}

// repeated uint32 ndi = 7;
int flex_dl_dci::ndi_size() const {
  return ndi_.size();
}
void flex_dl_dci::clear_ndi() {
  ndi_.Clear();
}
::google::protobuf::uint32 flex_dl_dci::ndi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.ndi)
  return ndi_.Get(index);
}
void flex_dl_dci::set_ndi(int index, ::google::protobuf::uint32 value) {
  ndi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.ndi)
}
void flex_dl_dci::add_ndi(::google::protobuf::uint32 value) {
  ndi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.ndi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::ndi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.ndi)
  return ndi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_ndi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.ndi)
  return &ndi_;
}

// repeated uint32 rv = 8;
int flex_dl_dci::rv_size() const {
  return rv_.size();
}
void flex_dl_dci::clear_rv() {
  rv_.Clear();
}
::google::protobuf::uint32 flex_dl_dci::rv(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rv)
  return rv_.Get(index);
}
void flex_dl_dci::set_rv(int index, ::google::protobuf::uint32 value) {
  rv_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rv)
}
void flex_dl_dci::add_rv(::google::protobuf::uint32 value) {
  rv_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.rv)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_dl_dci::rv() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.rv)
  return rv_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_dl_dci::mutable_rv() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.rv)
  return &rv_;
}

// optional uint32 cce_index = 9;
bool flex_dl_dci::has_cce_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_dl_dci::set_has_cce_index() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_dl_dci::clear_has_cce_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_dl_dci::clear_cce_index() {
  cce_index_ = 0u;
  clear_has_cce_index();
}
::google::protobuf::uint32 flex_dl_dci::cce_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cce_index)
  return cce_index_;
}
void flex_dl_dci::set_cce_index(::google::protobuf::uint32 value) {
  set_has_cce_index();
  cce_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cce_index)
}

// optional uint32 aggr_level = 10;
bool flex_dl_dci::has_aggr_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_dl_dci::set_has_aggr_level() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_dl_dci::clear_has_aggr_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_dl_dci::clear_aggr_level() {
  aggr_level_ = 0u;
  clear_has_aggr_level();
}
::google::protobuf::uint32 flex_dl_dci::aggr_level() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.aggr_level)
  return aggr_level_;
}
void flex_dl_dci::set_aggr_level(::google::protobuf::uint32 value) {
  set_has_aggr_level();
  aggr_level_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.aggr_level)
}

// optional uint32 precoding_info = 11;
bool flex_dl_dci::has_precoding_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_dl_dci::set_has_precoding_info() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_dl_dci::clear_has_precoding_info() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_dl_dci::clear_precoding_info() {
  precoding_info_ = 0u;
  clear_has_precoding_info();
}
::google::protobuf::uint32 flex_dl_dci::precoding_info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.precoding_info)
  return precoding_info_;
}
void flex_dl_dci::set_precoding_info(::google::protobuf::uint32 value) {
  set_has_precoding_info();
  precoding_info_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.precoding_info)
}

// optional uint32 format = 12;
bool flex_dl_dci::has_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_dl_dci::set_has_format() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_dl_dci::clear_has_format() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_dl_dci::clear_format() {
  format_ = 0u;
  clear_has_format();
}
::google::protobuf::uint32 flex_dl_dci::format() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.format)
  return format_;
}
void flex_dl_dci::set_format(::google::protobuf::uint32 value) {
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.format)
}

// optional uint32 tpc = 13;
bool flex_dl_dci::has_tpc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_dl_dci::set_has_tpc() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_dl_dci::clear_has_tpc() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_dl_dci::clear_tpc() {
  tpc_ = 0u;
  clear_has_tpc();
}
::google::protobuf::uint32 flex_dl_dci::tpc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tpc)
  return tpc_;
}
void flex_dl_dci::set_tpc(::google::protobuf::uint32 value) {
  set_has_tpc();
  tpc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tpc)
}

// optional uint32 harq_process = 14;
bool flex_dl_dci::has_harq_process() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_dl_dci::set_has_harq_process() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_dl_dci::clear_has_harq_process() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_dl_dci::clear_harq_process() {
  harq_process_ = 0u;
  clear_has_harq_process();
}
::google::protobuf::uint32 flex_dl_dci::harq_process() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.harq_process)
  return harq_process_;
}
void flex_dl_dci::set_harq_process(::google::protobuf::uint32 value) {
  set_has_harq_process();
  harq_process_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.harq_process)
}

// optional uint32 dai = 15;
bool flex_dl_dci::has_dai() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_dl_dci::set_has_dai() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_dl_dci::clear_has_dai() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_dl_dci::clear_dai() {
  dai_ = 0u;
  clear_has_dai();
}
::google::protobuf::uint32 flex_dl_dci::dai() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.dai)
  return dai_;
}
void flex_dl_dci::set_dai(::google::protobuf::uint32 value) {
  set_has_dai();
  dai_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.dai)
}

// optional uint32 vrb_format = 16;
bool flex_dl_dci::has_vrb_format() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void flex_dl_dci::set_has_vrb_format() {
  _has_bits_[0] |= 0x00000800u;
}
void flex_dl_dci::clear_has_vrb_format() {
  _has_bits_[0] &= ~0x00000800u;
}
void flex_dl_dci::clear_vrb_format() {
  vrb_format_ = 0u;
  clear_has_vrb_format();
}
::google::protobuf::uint32 flex_dl_dci::vrb_format() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.vrb_format)
  return vrb_format_;
}
void flex_dl_dci::set_vrb_format(::google::protobuf::uint32 value) {
  set_has_vrb_format();
  vrb_format_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.vrb_format)
}

// optional uint32 tb_swap = 17;
bool flex_dl_dci::has_tb_swap() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void flex_dl_dci::set_has_tb_swap() {
  _has_bits_[0] |= 0x00001000u;
}
void flex_dl_dci::clear_has_tb_swap() {
  _has_bits_[0] &= ~0x00001000u;
}
void flex_dl_dci::clear_tb_swap() {
  tb_swap_ = 0u;
  clear_has_tb_swap();
}
::google::protobuf::uint32 flex_dl_dci::tb_swap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tb_swap)
  return tb_swap_;
}
void flex_dl_dci::set_tb_swap(::google::protobuf::uint32 value) {
  set_has_tb_swap();
  tb_swap_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tb_swap)
}

// optional uint32 sps_release = 18;
bool flex_dl_dci::has_sps_release() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void flex_dl_dci::set_has_sps_release() {
  _has_bits_[0] |= 0x00002000u;
}
void flex_dl_dci::clear_has_sps_release() {
  _has_bits_[0] &= ~0x00002000u;
}
void flex_dl_dci::clear_sps_release() {
  sps_release_ = 0u;
  clear_has_sps_release();
}
::google::protobuf::uint32 flex_dl_dci::sps_release() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.sps_release)
  return sps_release_;
}
void flex_dl_dci::set_sps_release(::google::protobuf::uint32 value) {
  set_has_sps_release();
  sps_release_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.sps_release)
}

// optional uint32 pdcch_order = 19;
bool flex_dl_dci::has_pdcch_order() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void flex_dl_dci::set_has_pdcch_order() {
  _has_bits_[0] |= 0x00004000u;
}
void flex_dl_dci::clear_has_pdcch_order() {
  _has_bits_[0] &= ~0x00004000u;
}
void flex_dl_dci::clear_pdcch_order() {
  pdcch_order_ = 0u;
  clear_has_pdcch_order();
}
::google::protobuf::uint32 flex_dl_dci::pdcch_order() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.pdcch_order)
  return pdcch_order_;
}
void flex_dl_dci::set_pdcch_order(::google::protobuf::uint32 value) {
  set_has_pdcch_order();
  pdcch_order_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.pdcch_order)
}

// optional uint32 preamble_index = 20;
bool flex_dl_dci::has_preamble_index() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void flex_dl_dci::set_has_preamble_index() {
  _has_bits_[0] |= 0x00008000u;
}
void flex_dl_dci::clear_has_preamble_index() {
  _has_bits_[0] &= ~0x00008000u;
}
void flex_dl_dci::clear_preamble_index() {
  preamble_index_ = 0u;
  clear_has_preamble_index();
}
::google::protobuf::uint32 flex_dl_dci::preamble_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.preamble_index)
  return preamble_index_;
}
void flex_dl_dci::set_preamble_index(::google::protobuf::uint32 value) {
  set_has_preamble_index();
  preamble_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.preamble_index)
}

// optional uint32 prach_mask_index = 21;
bool flex_dl_dci::has_prach_mask_index() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void flex_dl_dci::set_has_prach_mask_index() {
  _has_bits_[0] |= 0x00010000u;
}
void flex_dl_dci::clear_has_prach_mask_index() {
  _has_bits_[0] &= ~0x00010000u;
}
void flex_dl_dci::clear_prach_mask_index() {
  prach_mask_index_ = 0u;
  clear_has_prach_mask_index();
}
::google::protobuf::uint32 flex_dl_dci::prach_mask_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.prach_mask_index)
  return prach_mask_index_;
}
void flex_dl_dci::set_prach_mask_index(::google::protobuf::uint32 value) {
  set_has_prach_mask_index();
  prach_mask_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.prach_mask_index)
}

// optional uint32 n_gap = 22;
bool flex_dl_dci::has_n_gap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void flex_dl_dci::set_has_n_gap() {
  _has_bits_[0] |= 0x00020000u;
}
void flex_dl_dci::clear_has_n_gap() {
  _has_bits_[0] &= ~0x00020000u;
}
void flex_dl_dci::clear_n_gap() {
  n_gap_ = 0u;
  clear_has_n_gap();
}
::google::protobuf::uint32 flex_dl_dci::n_gap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.n_gap)
  return n_gap_;
}
void flex_dl_dci::set_n_gap(::google::protobuf::uint32 value) {
  set_has_n_gap();
  n_gap_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.n_gap)
}

// optional uint32 tbs_idx = 23;
bool flex_dl_dci::has_tbs_idx() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void flex_dl_dci::set_has_tbs_idx() {
  _has_bits_[0] |= 0x00040000u;
}
void flex_dl_dci::clear_has_tbs_idx() {
  _has_bits_[0] &= ~0x00040000u;
}
void flex_dl_dci::clear_tbs_idx() {
  tbs_idx_ = 0u;
  clear_has_tbs_idx();
}
::google::protobuf::uint32 flex_dl_dci::tbs_idx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tbs_idx)
  return tbs_idx_;
}
void flex_dl_dci::set_tbs_idx(::google::protobuf::uint32 value) {
  set_has_tbs_idx();
  tbs_idx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tbs_idx)
}

// optional uint32 dl_power_offset = 24;
bool flex_dl_dci::has_dl_power_offset() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void flex_dl_dci::set_has_dl_power_offset() {
  _has_bits_[0] |= 0x00080000u;
}
void flex_dl_dci::clear_has_dl_power_offset() {
  _has_bits_[0] &= ~0x00080000u;
}
void flex_dl_dci::clear_dl_power_offset() {
  dl_power_offset_ = 0u;
  clear_has_dl_power_offset();
}
::google::protobuf::uint32 flex_dl_dci::dl_power_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.dl_power_offset)
  return dl_power_offset_;
}
void flex_dl_dci::set_dl_power_offset(::google::protobuf::uint32 value) {
  set_has_dl_power_offset();
  dl_power_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.dl_power_offset)
}

// optional uint32 pdcch_power_offset = 25;
bool flex_dl_dci::has_pdcch_power_offset() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void flex_dl_dci::set_has_pdcch_power_offset() {
  _has_bits_[0] |= 0x00100000u;
}
void flex_dl_dci::clear_has_pdcch_power_offset() {
  _has_bits_[0] &= ~0x00100000u;
}
void flex_dl_dci::clear_pdcch_power_offset() {
  pdcch_power_offset_ = 0u;
  clear_has_pdcch_power_offset();
}
::google::protobuf::uint32 flex_dl_dci::pdcch_power_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.pdcch_power_offset)
  return pdcch_power_offset_;
}
void flex_dl_dci::set_pdcch_power_offset(::google::protobuf::uint32 value) {
  set_has_pdcch_power_offset();
  pdcch_power_offset_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.pdcch_power_offset)
}

// optional uint32 cif_present = 26;
bool flex_dl_dci::has_cif_present() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void flex_dl_dci::set_has_cif_present() {
  _has_bits_[0] |= 0x00200000u;
}
void flex_dl_dci::clear_has_cif_present() {
  _has_bits_[0] &= ~0x00200000u;
}
void flex_dl_dci::clear_cif_present() {
  cif_present_ = 0u;
  clear_has_cif_present();
}
::google::protobuf::uint32 flex_dl_dci::cif_present() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cif_present)
  return cif_present_;
}
void flex_dl_dci::set_cif_present(::google::protobuf::uint32 value) {
  set_has_cif_present();
  cif_present_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cif_present)
}

// optional uint32 cif = 27;
bool flex_dl_dci::has_cif() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void flex_dl_dci::set_has_cif() {
  _has_bits_[0] |= 0x00400000u;
}
void flex_dl_dci::clear_has_cif() {
  _has_bits_[0] &= ~0x00400000u;
}
void flex_dl_dci::clear_cif() {
  cif_ = 0u;
  clear_has_cif();
}
::google::protobuf::uint32 flex_dl_dci::cif() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cif)
  return cif_;
}
void flex_dl_dci::set_cif(::google::protobuf::uint32 value) {
  set_has_cif();
  cif_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cif)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_dci::kRntiFieldNumber;
const int flex_ul_dci::kRbStartFieldNumber;
const int flex_ul_dci::kRbLenFieldNumber;
const int flex_ul_dci::kMcsFieldNumber;
const int flex_ul_dci::kCyclicShift2FieldNumber;
const int flex_ul_dci::kFreqHopFlagFieldNumber;
const int flex_ul_dci::kFreqHopMapFieldNumber;
const int flex_ul_dci::kNdiFieldNumber;
const int flex_ul_dci::kRvFieldNumber;
const int flex_ul_dci::kHarqPidFieldNumber;
const int flex_ul_dci::kUltxModeFieldNumber;
const int flex_ul_dci::kTbsSizeFieldNumber;
const int flex_ul_dci::kNSrsFieldNumber;
const int flex_ul_dci::kResAllocFieldNumber;
const int flex_ul_dci::kSizeFieldNumber;
const int flex_ul_dci::kDaiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_dci::flex_ul_dci()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mac_5fprimitives_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_dci)
}
flex_ul_dci::flex_ul_dci(const flex_ul_dci& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    reinterpret_cast<char*>(&dai_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(dai_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_dci)
}

void flex_ul_dci::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rnti_, 0, reinterpret_cast<char*>(&dai_) -
    reinterpret_cast<char*>(&rnti_) + sizeof(dai_));
}

flex_ul_dci::~flex_ul_dci() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_dci)
  SharedDtor();
}

void flex_ul_dci::SharedDtor() {
}

void flex_ul_dci::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_dci::descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_dci& flex_ul_dci::default_instance() {
  protobuf_mac_5fprimitives_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_dci* flex_ul_dci::New(::google::protobuf::Arena* arena) const {
  flex_ul_dci* n = new flex_ul_dci;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_dci::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_dci)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&rnti_, 0, reinterpret_cast<char*>(&ndi_) -
      reinterpret_cast<char*>(&rnti_) + sizeof(ndi_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&rv_, 0, reinterpret_cast<char*>(&dai_) -
      reinterpret_cast<char*>(&rv_) + sizeof(dai_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_dci::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_dci)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rnti = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rnti();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rb_start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rb_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rb_len = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rb_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rb_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mcs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_mcs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cyclic_shift2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cyclic_shift2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cyclic_shift2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 freq_hop_flag = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_freq_hop_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_hop_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 freq_hop_map = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_freq_hop_map();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freq_hop_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ndi = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ndi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ndi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rv = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_rv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 harq_pid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_harq_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harq_pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ultx_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_ultx_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultx_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tbs_size = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_tbs_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbs_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 n_srs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_n_srs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_srs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 res_alloc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_res_alloc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &res_alloc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dai = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_dai();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dai_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_dci)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_dci)
  return false;
#undef DO_
}

void flex_ul_dci::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_dci)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rnti(), output);
  }

  // optional uint32 rb_start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rb_start(), output);
  }

  // optional uint32 rb_len = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rb_len(), output);
  }

  // optional uint32 mcs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mcs(), output);
  }

  // optional uint32 cyclic_shift2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cyclic_shift2(), output);
  }

  // optional uint32 freq_hop_flag = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->freq_hop_flag(), output);
  }

  // optional uint32 freq_hop_map = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->freq_hop_map(), output);
  }

  // optional uint32 ndi = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ndi(), output);
  }

  // optional uint32 rv = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rv(), output);
  }

  // optional uint32 harq_pid = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->harq_pid(), output);
  }

  // optional uint32 ultx_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->ultx_mode(), output);
  }

  // optional uint32 tbs_size = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tbs_size(), output);
  }

  // optional uint32 n_srs = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->n_srs(), output);
  }

  // optional uint32 res_alloc = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->res_alloc(), output);
  }

  // optional uint32 size = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->size(), output);
  }

  // optional uint32 dai = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dai(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_dci)
}

::google::protobuf::uint8* flex_ul_dci::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_dci)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rnti(), target);
  }

  // optional uint32 rb_start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rb_start(), target);
  }

  // optional uint32 rb_len = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rb_len(), target);
  }

  // optional uint32 mcs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mcs(), target);
  }

  // optional uint32 cyclic_shift2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cyclic_shift2(), target);
  }

  // optional uint32 freq_hop_flag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->freq_hop_flag(), target);
  }

  // optional uint32 freq_hop_map = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->freq_hop_map(), target);
  }

  // optional uint32 ndi = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ndi(), target);
  }

  // optional uint32 rv = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rv(), target);
  }

  // optional uint32 harq_pid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->harq_pid(), target);
  }

  // optional uint32 ultx_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->ultx_mode(), target);
  }

  // optional uint32 tbs_size = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tbs_size(), target);
  }

  // optional uint32 n_srs = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->n_srs(), target);
  }

  // optional uint32 res_alloc = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->res_alloc(), target);
  }

  // optional uint32 size = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->size(), target);
  }

  // optional uint32 dai = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dai(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_dci)
  return target;
}

size_t flex_ul_dci::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_dci)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 rnti = 1;
    if (has_rnti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rnti());
    }

    // optional uint32 rb_start = 2;
    if (has_rb_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rb_start());
    }

    // optional uint32 rb_len = 3;
    if (has_rb_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rb_len());
    }

    // optional uint32 mcs = 4;
    if (has_mcs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcs());
    }

    // optional uint32 cyclic_shift2 = 5;
    if (has_cyclic_shift2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cyclic_shift2());
    }

    // optional uint32 freq_hop_flag = 6;
    if (has_freq_hop_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freq_hop_flag());
    }

    // optional uint32 freq_hop_map = 7;
    if (has_freq_hop_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freq_hop_map());
    }

    // optional uint32 ndi = 8;
    if (has_ndi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ndi());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 rv = 9;
    if (has_rv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rv());
    }

    // optional uint32 harq_pid = 10;
    if (has_harq_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harq_pid());
    }

    // optional uint32 ultx_mode = 11;
    if (has_ultx_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultx_mode());
    }

    // optional uint32 tbs_size = 12;
    if (has_tbs_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbs_size());
    }

    // optional uint32 n_srs = 13;
    if (has_n_srs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_srs());
    }

    // optional uint32 res_alloc = 14;
    if (has_res_alloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->res_alloc());
    }

    // optional uint32 size = 15;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint32 dai = 16;
    if (has_dai()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dai());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_dci::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_dci)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_dci* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_dci>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_dci)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_dci)
    MergeFrom(*source);
  }
}

void flex_ul_dci::MergeFrom(const flex_ul_dci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_dci)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      rb_start_ = from.rb_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      rb_len_ = from.rb_len_;
    }
    if (cached_has_bits & 0x00000008u) {
      mcs_ = from.mcs_;
    }
    if (cached_has_bits & 0x00000010u) {
      cyclic_shift2_ = from.cyclic_shift2_;
    }
    if (cached_has_bits & 0x00000020u) {
      freq_hop_flag_ = from.freq_hop_flag_;
    }
    if (cached_has_bits & 0x00000040u) {
      freq_hop_map_ = from.freq_hop_map_;
    }
    if (cached_has_bits & 0x00000080u) {
      ndi_ = from.ndi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      rv_ = from.rv_;
    }
    if (cached_has_bits & 0x00000200u) {
      harq_pid_ = from.harq_pid_;
    }
    if (cached_has_bits & 0x00000400u) {
      ultx_mode_ = from.ultx_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      tbs_size_ = from.tbs_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      n_srs_ = from.n_srs_;
    }
    if (cached_has_bits & 0x00002000u) {
      res_alloc_ = from.res_alloc_;
    }
    if (cached_has_bits & 0x00004000u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00008000u) {
      dai_ = from.dai_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_dci::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_dci::CopyFrom(const flex_ul_dci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_dci::IsInitialized() const {
  return true;
}

void flex_ul_dci::Swap(flex_ul_dci* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_dci::InternalSwap(flex_ul_dci* other) {
  std::swap(rnti_, other->rnti_);
  std::swap(rb_start_, other->rb_start_);
  std::swap(rb_len_, other->rb_len_);
  std::swap(mcs_, other->mcs_);
  std::swap(cyclic_shift2_, other->cyclic_shift2_);
  std::swap(freq_hop_flag_, other->freq_hop_flag_);
  std::swap(freq_hop_map_, other->freq_hop_map_);
  std::swap(ndi_, other->ndi_);
  std::swap(rv_, other->rv_);
  std::swap(harq_pid_, other->harq_pid_);
  std::swap(ultx_mode_, other->ultx_mode_);
  std::swap(tbs_size_, other->tbs_size_);
  std::swap(n_srs_, other->n_srs_);
  std::swap(res_alloc_, other->res_alloc_);
  std::swap(size_, other->size_);
  std::swap(dai_, other->dai_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_dci::GetMetadata() const {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_dci

// optional uint32 rnti = 1;
bool flex_ul_dci::has_rnti() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_dci::set_has_rnti() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_dci::clear_has_rnti() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_dci::clear_rnti() {
  rnti_ = 0u;
  clear_has_rnti();
}
::google::protobuf::uint32 flex_ul_dci::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rnti)
  return rnti_;
}
void flex_ul_dci::set_rnti(::google::protobuf::uint32 value) {
  set_has_rnti();
  rnti_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rnti)
}

// optional uint32 rb_start = 2;
bool flex_ul_dci::has_rb_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ul_dci::set_has_rb_start() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ul_dci::clear_has_rb_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ul_dci::clear_rb_start() {
  rb_start_ = 0u;
  clear_has_rb_start();
}
::google::protobuf::uint32 flex_ul_dci::rb_start() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rb_start)
  return rb_start_;
}
void flex_ul_dci::set_rb_start(::google::protobuf::uint32 value) {
  set_has_rb_start();
  rb_start_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rb_start)
}

// optional uint32 rb_len = 3;
bool flex_ul_dci::has_rb_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_ul_dci::set_has_rb_len() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_ul_dci::clear_has_rb_len() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ul_dci::clear_rb_len() {
  rb_len_ = 0u;
  clear_has_rb_len();
}
::google::protobuf::uint32 flex_ul_dci::rb_len() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rb_len)
  return rb_len_;
}
void flex_ul_dci::set_rb_len(::google::protobuf::uint32 value) {
  set_has_rb_len();
  rb_len_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rb_len)
}

// optional uint32 mcs = 4;
bool flex_ul_dci::has_mcs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_ul_dci::set_has_mcs() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_ul_dci::clear_has_mcs() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ul_dci::clear_mcs() {
  mcs_ = 0u;
  clear_has_mcs();
}
::google::protobuf::uint32 flex_ul_dci::mcs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.mcs)
  return mcs_;
}
void flex_ul_dci::set_mcs(::google::protobuf::uint32 value) {
  set_has_mcs();
  mcs_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.mcs)
}

// optional uint32 cyclic_shift2 = 5;
bool flex_ul_dci::has_cyclic_shift2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_ul_dci::set_has_cyclic_shift2() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_ul_dci::clear_has_cyclic_shift2() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ul_dci::clear_cyclic_shift2() {
  cyclic_shift2_ = 0u;
  clear_has_cyclic_shift2();
}
::google::protobuf::uint32 flex_ul_dci::cyclic_shift2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.cyclic_shift2)
  return cyclic_shift2_;
}
void flex_ul_dci::set_cyclic_shift2(::google::protobuf::uint32 value) {
  set_has_cyclic_shift2();
  cyclic_shift2_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.cyclic_shift2)
}

// optional uint32 freq_hop_flag = 6;
bool flex_ul_dci::has_freq_hop_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_ul_dci::set_has_freq_hop_flag() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_ul_dci::clear_has_freq_hop_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_ul_dci::clear_freq_hop_flag() {
  freq_hop_flag_ = 0u;
  clear_has_freq_hop_flag();
}
::google::protobuf::uint32 flex_ul_dci::freq_hop_flag() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.freq_hop_flag)
  return freq_hop_flag_;
}
void flex_ul_dci::set_freq_hop_flag(::google::protobuf::uint32 value) {
  set_has_freq_hop_flag();
  freq_hop_flag_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.freq_hop_flag)
}

// optional uint32 freq_hop_map = 7;
bool flex_ul_dci::has_freq_hop_map() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_ul_dci::set_has_freq_hop_map() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_ul_dci::clear_has_freq_hop_map() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_ul_dci::clear_freq_hop_map() {
  freq_hop_map_ = 0u;
  clear_has_freq_hop_map();
}
::google::protobuf::uint32 flex_ul_dci::freq_hop_map() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.freq_hop_map)
  return freq_hop_map_;
}
void flex_ul_dci::set_freq_hop_map(::google::protobuf::uint32 value) {
  set_has_freq_hop_map();
  freq_hop_map_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.freq_hop_map)
}

// optional uint32 ndi = 8;
bool flex_ul_dci::has_ndi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_ul_dci::set_has_ndi() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_ul_dci::clear_has_ndi() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_ul_dci::clear_ndi() {
  ndi_ = 0u;
  clear_has_ndi();
}
::google::protobuf::uint32 flex_ul_dci::ndi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.ndi)
  return ndi_;
}
void flex_ul_dci::set_ndi(::google::protobuf::uint32 value) {
  set_has_ndi();
  ndi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.ndi)
}

// optional uint32 rv = 9;
bool flex_ul_dci::has_rv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_ul_dci::set_has_rv() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_ul_dci::clear_has_rv() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_ul_dci::clear_rv() {
  rv_ = 0u;
  clear_has_rv();
}
::google::protobuf::uint32 flex_ul_dci::rv() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rv)
  return rv_;
}
void flex_ul_dci::set_rv(::google::protobuf::uint32 value) {
  set_has_rv();
  rv_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rv)
}

// optional uint32 harq_pid = 10;
bool flex_ul_dci::has_harq_pid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_ul_dci::set_has_harq_pid() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_ul_dci::clear_has_harq_pid() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_ul_dci::clear_harq_pid() {
  harq_pid_ = 0u;
  clear_has_harq_pid();
}
::google::protobuf::uint32 flex_ul_dci::harq_pid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.harq_pid)
  return harq_pid_;
}
void flex_ul_dci::set_harq_pid(::google::protobuf::uint32 value) {
  set_has_harq_pid();
  harq_pid_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.harq_pid)
}

// optional uint32 ultx_mode = 11;
bool flex_ul_dci::has_ultx_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_ul_dci::set_has_ultx_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_ul_dci::clear_has_ultx_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_ul_dci::clear_ultx_mode() {
  ultx_mode_ = 0u;
  clear_has_ultx_mode();
}
::google::protobuf::uint32 flex_ul_dci::ultx_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.ultx_mode)
  return ultx_mode_;
}
void flex_ul_dci::set_ultx_mode(::google::protobuf::uint32 value) {
  set_has_ultx_mode();
  ultx_mode_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.ultx_mode)
}

// optional uint32 tbs_size = 12;
bool flex_ul_dci::has_tbs_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void flex_ul_dci::set_has_tbs_size() {
  _has_bits_[0] |= 0x00000800u;
}
void flex_ul_dci::clear_has_tbs_size() {
  _has_bits_[0] &= ~0x00000800u;
}
void flex_ul_dci::clear_tbs_size() {
  tbs_size_ = 0u;
  clear_has_tbs_size();
}
::google::protobuf::uint32 flex_ul_dci::tbs_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.tbs_size)
  return tbs_size_;
}
void flex_ul_dci::set_tbs_size(::google::protobuf::uint32 value) {
  set_has_tbs_size();
  tbs_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.tbs_size)
}

// optional uint32 n_srs = 13;
bool flex_ul_dci::has_n_srs() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void flex_ul_dci::set_has_n_srs() {
  _has_bits_[0] |= 0x00001000u;
}
void flex_ul_dci::clear_has_n_srs() {
  _has_bits_[0] &= ~0x00001000u;
}
void flex_ul_dci::clear_n_srs() {
  n_srs_ = 0u;
  clear_has_n_srs();
}
::google::protobuf::uint32 flex_ul_dci::n_srs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.n_srs)
  return n_srs_;
}
void flex_ul_dci::set_n_srs(::google::protobuf::uint32 value) {
  set_has_n_srs();
  n_srs_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.n_srs)
}

// optional uint32 res_alloc = 14;
bool flex_ul_dci::has_res_alloc() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void flex_ul_dci::set_has_res_alloc() {
  _has_bits_[0] |= 0x00002000u;
}
void flex_ul_dci::clear_has_res_alloc() {
  _has_bits_[0] &= ~0x00002000u;
}
void flex_ul_dci::clear_res_alloc() {
  res_alloc_ = 0u;
  clear_has_res_alloc();
}
::google::protobuf::uint32 flex_ul_dci::res_alloc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.res_alloc)
  return res_alloc_;
}
void flex_ul_dci::set_res_alloc(::google::protobuf::uint32 value) {
  set_has_res_alloc();
  res_alloc_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.res_alloc)
}

// optional uint32 size = 15;
bool flex_ul_dci::has_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void flex_ul_dci::set_has_size() {
  _has_bits_[0] |= 0x00004000u;
}
void flex_ul_dci::clear_has_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void flex_ul_dci::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 flex_ul_dci::size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.size)
  return size_;
}
void flex_ul_dci::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.size)
}

// optional uint32 dai = 16;
bool flex_ul_dci::has_dai() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void flex_ul_dci::set_has_dai() {
  _has_bits_[0] |= 0x00008000u;
}
void flex_ul_dci::clear_has_dai() {
  _has_bits_[0] &= ~0x00008000u;
}
void flex_ul_dci::clear_dai() {
  dai_ = 0u;
  clear_has_dai();
}
::google::protobuf::uint32 flex_ul_dci::dai() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.dai)
  return dai_;
}
void flex_ul_dci::set_dai(::google::protobuf::uint32 value) {
  set_has_dai();
  dai_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.dai)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_rlc_pdu::kRlcPduTbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_rlc_pdu::flex_rlc_pdu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mac_5fprimitives_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_rlc_pdu)
}
flex_rlc_pdu::flex_rlc_pdu(const flex_rlc_pdu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rlc_pdu_tb_(from.rlc_pdu_tb_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rlc_pdu)
}

void flex_rlc_pdu::SharedCtor() {
  _cached_size_ = 0;
}

flex_rlc_pdu::~flex_rlc_pdu() {
  // @@protoc_insertion_point(destructor:protocol.flex_rlc_pdu)
  SharedDtor();
}

void flex_rlc_pdu::SharedDtor() {
}

void flex_rlc_pdu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_rlc_pdu::descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_rlc_pdu& flex_rlc_pdu::default_instance() {
  protobuf_mac_5fprimitives_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_rlc_pdu* flex_rlc_pdu::New(::google::protobuf::Arena* arena) const {
  flex_rlc_pdu* n = new flex_rlc_pdu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_rlc_pdu::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rlc_pdu)
  rlc_pdu_tb_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_rlc_pdu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_rlc_pdu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rlc_pdu_tb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_rlc_pdu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_rlc_pdu)
  return false;
#undef DO_
}

void flex_rlc_pdu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_rlc_pdu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  for (unsigned int i = 0, n = this->rlc_pdu_tb_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rlc_pdu_tb(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_rlc_pdu)
}

::google::protobuf::uint8* flex_rlc_pdu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rlc_pdu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  for (unsigned int i = 0, n = this->rlc_pdu_tb_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rlc_pdu_tb(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rlc_pdu)
  return target;
}

size_t flex_rlc_pdu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rlc_pdu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  {
    unsigned int count = this->rlc_pdu_tb_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rlc_pdu_tb(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_rlc_pdu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rlc_pdu)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rlc_pdu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_rlc_pdu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rlc_pdu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rlc_pdu)
    MergeFrom(*source);
  }
}

void flex_rlc_pdu::MergeFrom(const flex_rlc_pdu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rlc_pdu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rlc_pdu_tb_.MergeFrom(from.rlc_pdu_tb_);
}

void flex_rlc_pdu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rlc_pdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rlc_pdu::CopyFrom(const flex_rlc_pdu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rlc_pdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rlc_pdu::IsInitialized() const {
  return true;
}

void flex_rlc_pdu::Swap(flex_rlc_pdu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_rlc_pdu::InternalSwap(flex_rlc_pdu* other) {
  rlc_pdu_tb_.InternalSwap(&other->rlc_pdu_tb_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_rlc_pdu::GetMetadata() const {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_rlc_pdu

// repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
int flex_rlc_pdu::rlc_pdu_tb_size() const {
  return rlc_pdu_tb_.size();
}
void flex_rlc_pdu::clear_rlc_pdu_tb() {
  rlc_pdu_tb_.Clear();
}
const ::protocol::flex_rlc_pdu_tb& flex_rlc_pdu::rlc_pdu_tb(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Get(index);
}
::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::mutable_rlc_pdu_tb(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Mutable(index);
}
::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::add_rlc_pdu_tb() {
  // @@protoc_insertion_point(field_add:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >*
flex_rlc_pdu::mutable_rlc_pdu_tb() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return &rlc_pdu_tb_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >&
flex_rlc_pdu::rlc_pdu_tb() const {
  // @@protoc_insertion_point(field_list:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_rlc_pdu_tb::kLogicalChannelIdFieldNumber;
const int flex_rlc_pdu_tb::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_rlc_pdu_tb::flex_rlc_pdu_tb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mac_5fprimitives_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_rlc_pdu_tb)
}
flex_rlc_pdu_tb::flex_rlc_pdu_tb(const flex_rlc_pdu_tb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logical_channel_id_, &from.logical_channel_id_,
    reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&logical_channel_id_) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rlc_pdu_tb)
}

void flex_rlc_pdu_tb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&logical_channel_id_, 0, reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&logical_channel_id_) + sizeof(size_));
}

flex_rlc_pdu_tb::~flex_rlc_pdu_tb() {
  // @@protoc_insertion_point(destructor:protocol.flex_rlc_pdu_tb)
  SharedDtor();
}

void flex_rlc_pdu_tb::SharedDtor() {
}

void flex_rlc_pdu_tb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_rlc_pdu_tb::descriptor() {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_rlc_pdu_tb& flex_rlc_pdu_tb::default_instance() {
  protobuf_mac_5fprimitives_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_rlc_pdu_tb* flex_rlc_pdu_tb::New(::google::protobuf::Arena* arena) const {
  flex_rlc_pdu_tb* n = new flex_rlc_pdu_tb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_rlc_pdu_tb::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rlc_pdu_tb)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&logical_channel_id_, 0, reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&logical_channel_id_) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_rlc_pdu_tb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_rlc_pdu_tb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logical_channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_logical_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_rlc_pdu_tb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_rlc_pdu_tb)
  return false;
#undef DO_
}

void flex_rlc_pdu_tb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_rlc_pdu_tb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logical_channel_id(), output);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_rlc_pdu_tb)
}

::google::protobuf::uint8* flex_rlc_pdu_tb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rlc_pdu_tb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logical_channel_id(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rlc_pdu_tb)
  return target;
}

size_t flex_rlc_pdu_tb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rlc_pdu_tb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 logical_channel_id = 1;
    if (has_logical_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logical_channel_id());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_rlc_pdu_tb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rlc_pdu_tb)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rlc_pdu_tb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_rlc_pdu_tb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rlc_pdu_tb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rlc_pdu_tb)
    MergeFrom(*source);
  }
}

void flex_rlc_pdu_tb::MergeFrom(const flex_rlc_pdu_tb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rlc_pdu_tb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      logical_channel_id_ = from.logical_channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_rlc_pdu_tb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rlc_pdu_tb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rlc_pdu_tb::CopyFrom(const flex_rlc_pdu_tb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rlc_pdu_tb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rlc_pdu_tb::IsInitialized() const {
  return true;
}

void flex_rlc_pdu_tb::Swap(flex_rlc_pdu_tb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_rlc_pdu_tb::InternalSwap(flex_rlc_pdu_tb* other) {
  std::swap(logical_channel_id_, other->logical_channel_id_);
  std::swap(size_, other->size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_rlc_pdu_tb::GetMetadata() const {
  protobuf_mac_5fprimitives_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mac_5fprimitives_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_rlc_pdu_tb

// optional uint32 logical_channel_id = 1;
bool flex_rlc_pdu_tb::has_logical_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_rlc_pdu_tb::set_has_logical_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_rlc_pdu_tb::clear_has_logical_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_rlc_pdu_tb::clear_logical_channel_id() {
  logical_channel_id_ = 0u;
  clear_has_logical_channel_id();
}
::google::protobuf::uint32 flex_rlc_pdu_tb::logical_channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu_tb.logical_channel_id)
  return logical_channel_id_;
}
void flex_rlc_pdu_tb::set_logical_channel_id(::google::protobuf::uint32 value) {
  set_has_logical_channel_id();
  logical_channel_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_pdu_tb.logical_channel_id)
}

// optional uint32 size = 2;
bool flex_rlc_pdu_tb::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_rlc_pdu_tb::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_rlc_pdu_tb::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_rlc_pdu_tb::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 flex_rlc_pdu_tb::size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu_tb.size)
  return size_;
}
void flex_rlc_pdu_tb::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_pdu_tb.size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
