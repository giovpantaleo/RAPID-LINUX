// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_headerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_header> {
} _flex_header_default_instance_;

namespace protobuf_header_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_header, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_header, xid_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(flex_header)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_header_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "header.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_header_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _flex_header_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014header.proto\022\010protocol\"9\n\013flex_header\022"
      "\017\n\007version\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\013\n\003xid\030\004 "
      "\001(\r*\237\004\n\tflex_type\022\016\n\nFLPT_HELLO\020\000\022\025\n\021FLP"
      "T_ECHO_REQUEST\020\001\022\023\n\017FLPT_ECHO_REPLY\020\002\022\023\n"
      "\017FLPT_DISCONNECT\020\024\022\026\n\022FLPT_STATS_REQUEST"
      "\020\003\022\024\n\020FLPT_STATS_REPLY\020\004\022\023\n\017FLPT_SF_TRIG"
      "GER\020\005\022\023\n\017FLPT_UL_SR_INFO\020\006\022\037\n\033FLPT_GET_E"
      "NB_CONFIG_REQUEST\020\007\022\035\n\031FLPT_GET_ENB_CONF"
      "IG_REPLY\020\010\022\036\n\032FLPT_GET_UE_CONFIG_REQUEST"
      "\020\t\022\034\n\030FLPT_GET_UE_CONFIG_REPLY\020\n\022\036\n\032FLPT"
      "_GET_LC_CONFIG_REQUEST\020\013\022\034\n\030FLPT_GET_LC_"
      "CONFIG_REPLY\020\014\022\026\n\022FLPT_DL_MAC_CONFIG\020\r\022\023"
      "\n\017FLPT_HO_COMMAND\020\025\022\030\n\024FLPT_UE_STATE_CHA"
      "NGE\020\016\022\031\n\025FLPT_DELEGATE_CONTROL\020\017\022\032\n\026FLPT"
      "_RECONFIGURE_AGENT\020\020\022\027\n\023FLPT_RRC_TRIGGER"
      "ING\020\021\022\026\n\022FLPT_UL_MAC_CONFIG\020\022"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "header.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_header_2eproto

const ::google::protobuf::EnumDescriptor* flex_type_descriptor() {
  protobuf_header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_header_2eproto::file_level_enum_descriptors[0];
}
bool flex_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_header::kVersionFieldNumber;
const int flex_header::kTypeFieldNumber;
const int flex_header::kXidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_header::flex_header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_header_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_header)
}
flex_header::flex_header(const flex_header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&xid_) -
    reinterpret_cast<char*>(&version_) + sizeof(xid_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_header)
}

void flex_header::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, reinterpret_cast<char*>(&xid_) -
    reinterpret_cast<char*>(&version_) + sizeof(xid_));
}

flex_header::~flex_header() {
  // @@protoc_insertion_point(destructor:protocol.flex_header)
  SharedDtor();
}

void flex_header::SharedDtor() {
}

void flex_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_header::descriptor() {
  protobuf_header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_header_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_header& flex_header::default_instance() {
  protobuf_header_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_header* flex_header::New(::google::protobuf::Arena* arena) const {
  flex_header* n = new flex_header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_header::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_header)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&xid_) -
      reinterpret_cast<char*>(&version_) + sizeof(xid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_xid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_header)
  return false;
#undef DO_
}

void flex_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 xid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->xid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_header)
}

::google::protobuf::uint8* flex_header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 xid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->xid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_header)
  return target;
}

size_t flex_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 xid = 4;
    if (has_xid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_header)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_header)
    MergeFrom(*source);
  }
}

void flex_header::MergeFrom(const flex_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      xid_ = from.xid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_header::CopyFrom(const flex_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_header::IsInitialized() const {
  return true;
}

void flex_header::Swap(flex_header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_header::InternalSwap(flex_header* other) {
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(xid_, other->xid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_header::GetMetadata() const {
  protobuf_header_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_header_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_header

// optional uint32 version = 1;
bool flex_header::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_header::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_header::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_header::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 flex_header::version() const {
  // @@protoc_insertion_point(field_get:protocol.flex_header.version)
  return version_;
}
void flex_header::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_header.version)
}

// optional uint32 type = 2;
bool flex_header::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_header::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_header::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_header::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 flex_header::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_header.type)
  return type_;
}
void flex_header::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_header.type)
}

// optional uint32 xid = 4;
bool flex_header::has_xid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_header::set_has_xid() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_header::clear_has_xid() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_header::clear_xid() {
  xid_ = 0u;
  clear_has_xid();
}
::google::protobuf::uint32 flex_header::xid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_header.xid)
  return xid_;
}
void flex_header::set_xid(::google::protobuf::uint32 value) {
  set_has_xid();
  xid_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_header.xid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
