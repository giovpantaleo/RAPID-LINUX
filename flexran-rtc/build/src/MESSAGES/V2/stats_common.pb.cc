// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stats_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {
class flex_rlc_bsrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_rlc_bsr> {
} _flex_rlc_bsr_default_instance_;
class flex_csi_p10DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_p10> {
} _flex_csi_p10_default_instance_;
class flex_csi_p11DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_p11> {
} _flex_csi_p11_default_instance_;
class flex_csi_p20DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_p20> {
} _flex_csi_p20_default_instance_;
class flex_csi_p21DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_p21> {
} _flex_csi_p21_default_instance_;
class flex_csi_a12DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_a12> {
} _flex_csi_a12_default_instance_;
class flex_csi_a22DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_a22> {
} _flex_csi_a22_default_instance_;
class flex_csi_a20DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_a20> {
} _flex_csi_a20_default_instance_;
class flex_csi_a30DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_a30> {
} _flex_csi_a30_default_instance_;
class flex_csi_a31DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_csi_a31> {
} _flex_csi_a31_default_instance_;
class flex_msb_cqiDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_msb_cqi> {
} _flex_msb_cqi_default_instance_;
class flex_dl_csiDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_csi> {
  public:
  const ::protocol::flex_csi_p10* p10csi_;
  const ::protocol::flex_csi_p11* p11csi_;
  const ::protocol::flex_csi_p20* p20csi_;
  const ::protocol::flex_csi_p21* p21csi_;
  const ::protocol::flex_csi_a12* a12csi_;
  const ::protocol::flex_csi_a22* a22csi_;
  const ::protocol::flex_csi_a20* a20csi_;
  const ::protocol::flex_csi_a30* a30csi_;
  const ::protocol::flex_csi_a31* a31csi_;
} _flex_dl_csi_default_instance_;
class flex_dl_cqi_reportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_dl_cqi_report> {
} _flex_dl_cqi_report_default_instance_;
class flex_paging_infoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_paging_info> {
} _flex_paging_info_default_instance_;
class flex_paging_buffer_reportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_paging_buffer_report> {
} _flex_paging_buffer_report_default_instance_;
class flex_ul_cqiDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_cqi> {
} _flex_ul_cqi_default_instance_;
class flex_ul_cqi_reportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_ul_cqi_report> {
} _flex_ul_cqi_report_default_instance_;
class flex_pucch_dbmDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_pucch_dbm> {
} _flex_pucch_dbm_default_instance_;
class flex_noise_interference_reportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_noise_interference_report> {
} _flex_noise_interference_report_default_instance_;
class flex_rrc_measurementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_rrc_measurements> {
} _flex_rrc_measurements_default_instance_;
class flex_neigh_cells_measurementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_neigh_cells_measurements> {
} _flex_neigh_cells_measurements_default_instance_;
class flex_eutra_measurementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_eutra_measurements> {
} _flex_eutra_measurements_default_instance_;
class flex_eutra_cgi_measurementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_eutra_cgi_measurements> {
} _flex_eutra_cgi_measurements_default_instance_;
class flex_cell_global_eutra_idDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_cell_global_eutra_id> {
} _flex_cell_global_eutra_id_default_instance_;
class flex_eutra_ref_signal_measDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_eutra_ref_signal_meas> {
} _flex_eutra_ref_signal_meas_default_instance_;
class flex_pdcp_statsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_pdcp_stats> {
} _flex_pdcp_stats_default_instance_;
class flex_mac_statsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_mac_stats> {
} _flex_mac_stats_default_instance_;
class flex_mac_sdus_dlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_mac_sdus_dl> {
} _flex_mac_sdus_dl_default_instance_;
class flex_gtp_statsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_gtp_stats> {
} _flex_gtp_stats_default_instance_;
class flex_s1ap_ueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<flex_s1ap_ue> {
} _flex_s1ap_ue_default_instance_;

namespace protobuf_stats_5fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, lc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, tx_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, tx_queue_hol_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, retransmission_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, retransmission_queue_hol_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rlc_bsr, status_pdu_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p10, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p10, wb_cqi_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p11, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p11, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p11, wb_pmi_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p20, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p20, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p20, sb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p20, bandwidth_part_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p20, sb_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, wb_pmi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, sb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, badwidth_part_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_p21, sb_index_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a12, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a12, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a12, sb_pmi_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, sb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, wb_pmi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, sb_pmi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a22, sb_list_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a20, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a20, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a20, sb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a20, sb_list_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a30, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a30, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a30, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a30, sb_cqi_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a31, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a31, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a31, wb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a31, sb_cqi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_csi_a31, wb_pmi_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_msb_cqi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_msb_cqi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_msb_cqi, sb_cqi_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, serv_cell_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, ri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), p10csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), p11csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), p20csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), p21csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), a12csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), a22csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), a20csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), a30csi_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_flex_dl_csi_default_instance_), a31csi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_csi, report_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_cqi_report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_cqi_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_cqi_report, sfn_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_dl_cqi_report, csi_report_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_info, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_info, paging_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_info, paging_message_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_info, paging_subframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_info, carrier_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_buffer_report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_buffer_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_paging_buffer_report, paging_info_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi, sinr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi, serv_cell_index_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi_report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi_report, sfn_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi_report, cqi_meas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_ul_cqi_report, pucch_dbm_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pucch_dbm, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pucch_dbm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pucch_dbm, p0_pucch_dbm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pucch_dbm, serv_cell_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pucch_dbm, p0_pucch_updated_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_noise_interference_report, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_noise_interference_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_noise_interference_report, sfn_sf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_noise_interference_report, rip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_noise_interference_report, tnp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_noise_interference_report, p0_nominal_pucch_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_measurements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_measurements, measid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_measurements, pcell_rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_measurements, pcell_rsrq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_rrc_measurements, neigh_meas_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_neigh_cells_measurements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_neigh_cells_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_neigh_cells_measurements, eutra_meas_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_measurements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_measurements, phys_cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_measurements, cgi_meas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_measurements, meas_result_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_cgi_measurements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_cgi_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_cgi_measurements, cgi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_cgi_measurements, tracking_area_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_cgi_measurements, plmn_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_global_eutra_id, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_global_eutra_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_global_eutra_id, plmn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_cell_global_eutra_id, cell_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_ref_signal_meas, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_ref_signal_meas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_ref_signal_meas, rsrp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_eutra_ref_signal_meas, rsrq_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_bytes_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_aiat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_aiat_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_bytes_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_aiat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_aiat_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_oo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_pdcp_stats, sfn_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, tbs_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, tbs_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, prb_retx_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, prb_retx_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, prb_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, prb_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, mcs1_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, mcs2_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, mcs1_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, mcs2_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_bytes_sdus_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_bytes_sdus_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_prb_retx_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_prb_retx_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_prb_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_prb_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_pdu_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_pdu_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_tbs_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, total_tbs_ul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, mac_sdus_dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_stats, harq_round_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_sdus_dl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_sdus_dl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_sdus_dl, sdu_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_mac_sdus_dl, lcid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, e_rab_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, teid_enb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, addr_enb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, teid_sgw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_gtp_stats, addr_sgw_),
  2,
  3,
  0,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_ue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_ue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_ue, mme_s1_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_ue, enb_ue_s1ap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_ue, mme_ue_s1ap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flex_s1ap_ue, selected_plmn_),
  0,
  2,
  3,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(flex_rlc_bsr)},
  { 17, 23, sizeof(flex_csi_p10)},
  { 24, 31, sizeof(flex_csi_p11)},
  { 33, 42, sizeof(flex_csi_p20)},
  { 46, 56, sizeof(flex_csi_p21)},
  { 61, 68, sizeof(flex_csi_a12)},
  { 70, 80, sizeof(flex_csi_a22)},
  { 85, 93, sizeof(flex_csi_a20)},
  { 96, 103, sizeof(flex_csi_a30)},
  { 105, 113, sizeof(flex_csi_a31)},
  { 116, 122, sizeof(flex_msb_cqi)},
  { 123, 141, sizeof(flex_dl_csi)},
  { 153, 160, sizeof(flex_dl_cqi_report)},
  { 162, 171, sizeof(flex_paging_info)},
  { 175, 181, sizeof(flex_paging_buffer_report)},
  { 182, 190, sizeof(flex_ul_cqi)},
  { 193, 201, sizeof(flex_ul_cqi_report)},
  { 204, 212, sizeof(flex_pucch_dbm)},
  { 215, 224, sizeof(flex_noise_interference_report)},
  { 228, 237, sizeof(flex_rrc_measurements)},
  { 241, 247, sizeof(flex_neigh_cells_measurements)},
  { 248, 256, sizeof(flex_eutra_measurements)},
  { 259, 267, sizeof(flex_eutra_cgi_measurements)},
  { 270, 277, sizeof(flex_cell_global_eutra_id)},
  { 279, 286, sizeof(flex_eutra_ref_signal_meas)},
  { 288, 309, sizeof(flex_pdcp_stats)},
  { 325, 352, sizeof(flex_mac_stats)},
  { 374, 381, sizeof(flex_mac_sdus_dl)},
  { 383, 393, sizeof(flex_gtp_stats)},
  { 398, 407, sizeof(flex_s1ap_ue)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_rlc_bsr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_p10_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_p11_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_p20_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_p21_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_a12_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_a22_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_a20_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_a30_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_csi_a31_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_msb_cqi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_csi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_dl_cqi_report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_paging_info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_paging_buffer_report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_cqi_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_ul_cqi_report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_pucch_dbm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_noise_interference_report_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_rrc_measurements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_neigh_cells_measurements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_eutra_measurements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_eutra_cgi_measurements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_cell_global_eutra_id_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_eutra_ref_signal_meas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_pdcp_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_mac_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_mac_sdus_dl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_gtp_stats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_flex_s1ap_ue_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "stats_common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace

void TableStruct::Shutdown() {
  _flex_rlc_bsr_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _flex_csi_p10_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _flex_csi_p11_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _flex_csi_p20_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _flex_csi_p21_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _flex_csi_a12_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _flex_csi_a22_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _flex_csi_a20_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _flex_csi_a30_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _flex_csi_a31_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _flex_msb_cqi_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _flex_dl_csi_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _flex_dl_cqi_report_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _flex_paging_info_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _flex_paging_buffer_report_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _flex_ul_cqi_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _flex_ul_cqi_report_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _flex_pucch_dbm_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _flex_noise_interference_report_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _flex_rrc_measurements_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _flex_neigh_cells_measurements_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _flex_eutra_measurements_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _flex_eutra_cgi_measurements_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _flex_cell_global_eutra_id_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _flex_eutra_ref_signal_meas_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _flex_pdcp_stats_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _flex_mac_stats_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _flex_mac_sdus_dl_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _flex_gtp_stats_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _flex_s1ap_ue_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protocol::protobuf_config_5fcommon_2eproto::InitDefaults();
  _flex_rlc_bsr_default_instance_.DefaultConstruct();
  _flex_csi_p10_default_instance_.DefaultConstruct();
  _flex_csi_p11_default_instance_.DefaultConstruct();
  _flex_csi_p20_default_instance_.DefaultConstruct();
  _flex_csi_p21_default_instance_.DefaultConstruct();
  _flex_csi_a12_default_instance_.DefaultConstruct();
  _flex_csi_a22_default_instance_.DefaultConstruct();
  _flex_csi_a20_default_instance_.DefaultConstruct();
  _flex_csi_a30_default_instance_.DefaultConstruct();
  _flex_csi_a31_default_instance_.DefaultConstruct();
  _flex_msb_cqi_default_instance_.DefaultConstruct();
  _flex_dl_csi_default_instance_.DefaultConstruct();
  _flex_dl_cqi_report_default_instance_.DefaultConstruct();
  _flex_paging_info_default_instance_.DefaultConstruct();
  _flex_paging_buffer_report_default_instance_.DefaultConstruct();
  _flex_ul_cqi_default_instance_.DefaultConstruct();
  _flex_ul_cqi_report_default_instance_.DefaultConstruct();
  _flex_pucch_dbm_default_instance_.DefaultConstruct();
  _flex_noise_interference_report_default_instance_.DefaultConstruct();
  _flex_rrc_measurements_default_instance_.DefaultConstruct();
  _flex_neigh_cells_measurements_default_instance_.DefaultConstruct();
  _flex_eutra_measurements_default_instance_.DefaultConstruct();
  _flex_eutra_cgi_measurements_default_instance_.DefaultConstruct();
  _flex_cell_global_eutra_id_default_instance_.DefaultConstruct();
  _flex_eutra_ref_signal_meas_default_instance_.DefaultConstruct();
  _flex_pdcp_stats_default_instance_.DefaultConstruct();
  _flex_mac_stats_default_instance_.DefaultConstruct();
  _flex_mac_sdus_dl_default_instance_.DefaultConstruct();
  _flex_gtp_stats_default_instance_.DefaultConstruct();
  _flex_s1ap_ue_default_instance_.DefaultConstruct();
  _flex_dl_csi_default_instance_.p10csi_ = const_cast< ::protocol::flex_csi_p10*>(
      ::protocol::flex_csi_p10::internal_default_instance());
  _flex_dl_csi_default_instance_.p11csi_ = const_cast< ::protocol::flex_csi_p11*>(
      ::protocol::flex_csi_p11::internal_default_instance());
  _flex_dl_csi_default_instance_.p20csi_ = const_cast< ::protocol::flex_csi_p20*>(
      ::protocol::flex_csi_p20::internal_default_instance());
  _flex_dl_csi_default_instance_.p21csi_ = const_cast< ::protocol::flex_csi_p21*>(
      ::protocol::flex_csi_p21::internal_default_instance());
  _flex_dl_csi_default_instance_.a12csi_ = const_cast< ::protocol::flex_csi_a12*>(
      ::protocol::flex_csi_a12::internal_default_instance());
  _flex_dl_csi_default_instance_.a22csi_ = const_cast< ::protocol::flex_csi_a22*>(
      ::protocol::flex_csi_a22::internal_default_instance());
  _flex_dl_csi_default_instance_.a20csi_ = const_cast< ::protocol::flex_csi_a20*>(
      ::protocol::flex_csi_a20::internal_default_instance());
  _flex_dl_csi_default_instance_.a30csi_ = const_cast< ::protocol::flex_csi_a30*>(
      ::protocol::flex_csi_a30::internal_default_instance());
  _flex_dl_csi_default_instance_.a31csi_ = const_cast< ::protocol::flex_csi_a31*>(
      ::protocol::flex_csi_a31::internal_default_instance());
  _flex_rrc_measurements_default_instance_.get_mutable()->neigh_meas_ = const_cast< ::protocol::flex_neigh_cells_measurements*>(
      ::protocol::flex_neigh_cells_measurements::internal_default_instance());
  _flex_eutra_measurements_default_instance_.get_mutable()->cgi_meas_ = const_cast< ::protocol::flex_eutra_cgi_measurements*>(
      ::protocol::flex_eutra_cgi_measurements::internal_default_instance());
  _flex_eutra_measurements_default_instance_.get_mutable()->meas_result_ = const_cast< ::protocol::flex_eutra_ref_signal_meas*>(
      ::protocol::flex_eutra_ref_signal_meas::internal_default_instance());
  _flex_eutra_cgi_measurements_default_instance_.get_mutable()->cgi_ = const_cast< ::protocol::flex_cell_global_eutra_id*>(
      ::protocol::flex_cell_global_eutra_id::internal_default_instance());
  _flex_cell_global_eutra_id_default_instance_.get_mutable()->plmn_ = const_cast< ::protocol::flex_plmn*>(
      ::protocol::flex_plmn::internal_default_instance());
  _flex_s1ap_ue_default_instance_.get_mutable()->selected_plmn_ = const_cast< ::protocol::flex_plmn*>(
      ::protocol::flex_plmn::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022stats_common.proto\022\010protocol\032\023config_c"
      "ommon.proto\"\264\001\n\014flex_rlc_bsr\022\r\n\005lc_id\030\001 "
      "\001(\r\022\025\n\rtx_queue_size\030\002 \001(\r\022\032\n\022tx_queue_h"
      "ol_delay\030\003 \001(\r\022!\n\031retransmission_queue_s"
      "ize\030\004 \001(\r\022&\n\036retransmission_queue_hol_de"
      "lay\030\005 \001(\r\022\027\n\017status_pdu_size\030\006 \001(\r\"\036\n\014fl"
      "ex_csi_p10\022\016\n\006wb_cqi\030\001 \001(\r\".\n\014flex_csi_p"
      "11\022\016\n\006wb_cqi\030\001 \003(\r\022\016\n\006wb_pmi\030\002 \001(\r\"^\n\014fl"
      "ex_csi_p20\022\016\n\006wb_cqi\030\001 \001(\r\022\016\n\006sb_cqi\030\002 \001"
      "(\r\022\034\n\024bandwidth_part_index\030\003 \001(\r\022\020\n\010sb_i"
      "ndex\030\004 \001(\r\"m\n\014flex_csi_p21\022\016\n\006wb_cqi\030\001 \003"
      "(\r\022\016\n\006wb_pmi\030\002 \001(\r\022\016\n\006sb_cqi\030\003 \003(\r\022\033\n\023ba"
      "dwidth_part_index\030\004 \001(\r\022\020\n\010sb_index\030\005 \001("
      "\r\".\n\014flex_csi_a12\022\016\n\006wb_cqi\030\001 \003(\r\022\016\n\006sb_"
      "pmi\030\002 \003(\r\"_\n\014flex_csi_a22\022\016\n\006wb_cqi\030\001 \003("
      "\r\022\016\n\006sb_cqi\030\002 \003(\r\022\016\n\006wb_pmi\030\003 \001(\r\022\016\n\006sb_"
      "pmi\030\004 \001(\r\022\017\n\007sb_list\030\005 \003(\r\"\?\n\014flex_csi_a"
      "20\022\016\n\006wb_cqi\030\001 \001(\r\022\016\n\006sb_cqi\030\002 \001(\r\022\017\n\007sb"
      "_list\030\003 \003(\r\".\n\014flex_csi_a30\022\016\n\006wb_cqi\030\001 "
      "\001(\r\022\016\n\006sb_cqi\030\002 \003(\r\"V\n\014flex_csi_a31\022\016\n\006w"
      "b_cqi\030\001 \003(\r\022&\n\006sb_cqi\030\002 \003(\0132\026.protocol.f"
      "lex_msb_cqi\022\016\n\006wb_pmi\030\003 \001(\r\"\036\n\014flex_msb_"
      "cqi\022\016\n\006sb_cqi\030\001 \003(\r\"\335\003\n\013flex_dl_csi\022\027\n\017s"
      "erv_cell_index\030\001 \001(\r\022\n\n\002ri\030\002 \001(\r\022%\n\004type"
      "\030\003 \001(\0162\027.protocol.flex_csi_type\022(\n\006p10cs"
      "i\030\004 \001(\0132\026.protocol.flex_csi_p10H\000\022(\n\006p11"
      "csi\030\005 \001(\0132\026.protocol.flex_csi_p11H\000\022(\n\006p"
      "20csi\030\006 \001(\0132\026.protocol.flex_csi_p20H\000\022(\n"
      "\006p21csi\030\007 \001(\0132\026.protocol.flex_csi_p21H\000\022"
      "(\n\006a12csi\030\010 \001(\0132\026.protocol.flex_csi_a12H"
      "\000\022(\n\006a22csi\030\t \001(\0132\026.protocol.flex_csi_a2"
      "2H\000\022(\n\006a20csi\030\n \001(\0132\026.protocol.flex_csi_"
      "a20H\000\022(\n\006a30csi\030\013 \001(\0132\026.protocol.flex_cs"
      "i_a30H\000\022(\n\006a31csi\030\014 \001(\0132\026.protocol.flex_"
      "csi_a31H\000B\010\n\006report\"O\n\022flex_dl_cqi_repor"
      "t\022\016\n\006sfn_sn\030\001 \001(\r\022)\n\ncsi_report\030\002 \003(\0132\025."
      "protocol.flex_dl_csi\"u\n\020flex_paging_info"
      "\022\024\n\014paging_index\030\001 \001(\r\022\033\n\023paging_message"
      "_size\030\002 \001(\r\022\027\n\017paging_subframe\030\003 \001(\r\022\025\n\r"
      "carrier_index\030\004 \001(\r\"L\n\031flex_paging_buffe"
      "r_report\022/\n\013paging_info\030\001 \003(\0132\032.protocol"
      ".flex_paging_info\"^\n\013flex_ul_cqi\022(\n\004type"
      "\030\001 \001(\0162\032.protocol.flex_ul_cqi_type\022\014\n\004si"
      "nr\030\002 \003(\r\022\027\n\017serv_cell_index\030\003 \001(\r\"z\n\022fle"
      "x_ul_cqi_report\022\016\n\006sfn_sn\030\001 \001(\r\022\'\n\010cqi_m"
      "eas\030\002 \003(\0132\025.protocol.flex_ul_cqi\022+\n\tpucc"
      "h_dbm\030\003 \003(\0132\030.protocol.flex_pucch_dbm\"Y\n"
      "\016flex_pucch_dbm\022\024\n\014p0_pucch_dbm\030\001 \001(\005\022\027\n"
      "\017serv_cell_index\030\002 \001(\r\022\030\n\020p0_pucch_updat"
      "ed\030\003 \001(\r\"d\n\036flex_noise_interference_repo"
      "rt\022\016\n\006sfn_sf\030\001 \001(\r\022\013\n\003rip\030\002 \001(\r\022\013\n\003tnp\030\003"
      " \001(\r\022\030\n\020p0_nominal_pucch\030\004 \001(\005\"\214\001\n\025flex_"
      "rrc_measurements\022\016\n\006measid\030\001 \001(\005\022\022\n\npcel"
      "l_rsrp\030\002 \001(\005\022\022\n\npcell_rsrq\030\003 \001(\005\022;\n\nneig"
      "h_meas\030\004 \001(\0132\'.protocol.flex_neigh_cells"
      "_measurements\"V\n\035flex_neigh_cells_measur"
      "ements\0225\n\neutra_meas\030\001 \003(\0132!.protocol.fl"
      "ex_eutra_measurements\"\243\001\n\027flex_eutra_mea"
      "surements\022\024\n\014phys_cell_id\030\001 \001(\005\0227\n\010cgi_m"
      "eas\030\002 \001(\0132%.protocol.flex_eutra_cgi_meas"
      "urements\0229\n\013meas_result\030\003 \001(\0132$.protocol"
      ".flex_eutra_ref_signal_meas\"\216\001\n\033flex_eut"
      "ra_cgi_measurements\0220\n\003cgi\030\001 \001(\0132#.proto"
      "col.flex_cell_global_eutra_id\022\032\n\022trackin"
      "g_area_code\030\002 \001(\r\022!\n\004plmn\030\003 \003(\0132\023.protoc"
      "ol.flex_plmn\"O\n\031flex_cell_global_eutra_i"
      "d\022!\n\004plmn\030\001 \001(\0132\023.protocol.flex_plmn\022\017\n\007"
      "cell_id\030\002 \001(\r\"8\n\032flex_eutra_ref_signal_m"
      "eas\022\014\n\004rsrp\030\001 \001(\005\022\014\n\004rsrq\030\002 \001(\005\"\317\002\n\017flex"
      "_pdcp_stats\022\016\n\006pkt_tx\030\001 \001(\r\022\024\n\014pkt_tx_by"
      "tes\030\002 \001(\r\022\021\n\tpkt_tx_sn\030\003 \001(\r\022\020\n\010pkt_tx_w"
      "\030\004 \001(\r\022\026\n\016pkt_tx_bytes_w\030\005 \001(\r\022\023\n\013pkt_tx"
      "_aiat\030\007 \001(\r\022\025\n\rpkt_tx_aiat_w\030\010 \001(\r\022\016\n\006pk"
      "t_rx\030\t \001(\r\022\024\n\014pkt_rx_bytes\030\n \001(\r\022\021\n\tpkt_"
      "rx_sn\030\013 \001(\r\022\020\n\010pkt_rx_w\030\014 \001(\r\022\026\n\016pkt_rx_"
      "bytes_w\030\r \001(\r\022\023\n\013pkt_rx_aiat\030\016 \001(\r\022\025\n\rpk"
      "t_rx_aiat_w\030\017 \001(\r\022\021\n\tpkt_rx_oo\030\020 \001(\r\022\013\n\003"
      "sfn\030\021 \001(\004\"\367\003\n\016flex_mac_stats\022\016\n\006tbs_dl\030\001"
      " \001(\r\022\016\n\006tbs_ul\030\002 \001(\r\022\023\n\013prb_retx_dl\030\003 \001("
      "\r\022\023\n\013prb_retx_ul\030\004 \001(\r\022\016\n\006prb_dl\030\005 \001(\r\022\016"
      "\n\006prb_ul\030\006 \001(\r\022\017\n\007mcs1_dl\030\007 \001(\r\022\017\n\007mcs2_"
      "dl\030\010 \001(\r\022\017\n\007mcs1_ul\030\t \001(\r\022\017\n\007mcs2_ul\030\n \001"
      "(\r\022\033\n\023total_bytes_sdus_ul\030\013 \001(\r\022\033\n\023total"
      "_bytes_sdus_dl\030\014 \001(\r\022\031\n\021total_prb_retx_d"
      "l\030\r \001(\r\022\031\n\021total_prb_retx_ul\030\016 \001(\r\022\024\n\014to"
      "tal_prb_dl\030\017 \001(\r\022\024\n\014total_prb_ul\030\020 \001(\r\022\024"
      "\n\014total_pdu_dl\030\021 \001(\r\022\024\n\014total_pdu_ul\030\022 \001"
      "(\r\022\024\n\014total_tbs_dl\030\023 \001(\r\022\024\n\014total_tbs_ul"
      "\030\024 \001(\r\022/\n\013mac_sdus_dl\030\025 \003(\0132\032.protocol.f"
      "lex_mac_sdus_dl\022\022\n\nharq_round\030\026 \001(\r\"4\n\020f"
      "lex_mac_sdus_dl\022\022\n\nsdu_length\030\001 \001(\r\022\014\n\004l"
      "cid\030\002 \001(\r\"j\n\016flex_gtp_stats\022\020\n\010e_rab_id\030"
      "\001 \001(\r\022\020\n\010teid_enb\030\002 \001(\r\022\020\n\010addr_enb\030\003 \001("
      "\t\022\020\n\010teid_sgw\030\004 \001(\r\022\020\n\010addr_sgw\030\005 \001(\t\"}\n"
      "\014flex_s1ap_ue\022\021\n\tmme_s1_ip\030\001 \001(\t\022\026\n\016enb_"
      "ue_s1ap_id\030\002 \001(\r\022\026\n\016mme_ue_s1ap_id\030\003 \001(\r"
      "\022*\n\rselected_plmn\030\004 \001(\0132\023.protocol.flex_"
      "plmn*K\n\014flex_ce_type\022\r\n\tFLPCET_TA\020\001\022\016\n\nF"
      "LPCET_DRX\020\002\022\r\n\tFLPCET_CR\020\004\022\r\n\tFLPCET_CA\020"
      "\010*\237\001\n\rflex_csi_type\022\016\n\nFLCSIT_P10\020\000\022\016\n\nF"
      "LCSIT_P11\020\001\022\016\n\nFLCSIT_P20\020\002\022\016\n\nFLCSIT_P2"
      "1\020\003\022\016\n\nFLCSIT_A12\020\004\022\016\n\nFLCSIT_A22\020\005\022\016\n\nF"
      "LCSIT_A20\020\006\022\016\n\nFLCSIT_A30\020\007\022\016\n\nFLCSIT_A3"
      "1\020\010*i\n\020flex_ul_cqi_type\022\r\n\tFLUCT_SRS\020\000\022\017"
      "\n\013FLUCT_PUSCH\020\001\022\021\n\rFLUCT_PUCCH_1\020\002\022\021\n\rFL"
      "UCT_PUCCH_2\020\003\022\017\n\013FLUCT_PRACH\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stats_common.proto", &protobuf_RegisterTypes);
  ::protocol::protobuf_config_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_stats_5fcommon_2eproto

const ::google::protobuf::EnumDescriptor* flex_ce_type_descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_enum_descriptors[0];
}
bool flex_ce_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_csi_type_descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_enum_descriptors[1];
}
bool flex_csi_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flex_ul_cqi_type_descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_enum_descriptors[2];
}
bool flex_ul_cqi_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_rlc_bsr::kLcIdFieldNumber;
const int flex_rlc_bsr::kTxQueueSizeFieldNumber;
const int flex_rlc_bsr::kTxQueueHolDelayFieldNumber;
const int flex_rlc_bsr::kRetransmissionQueueSizeFieldNumber;
const int flex_rlc_bsr::kRetransmissionQueueHolDelayFieldNumber;
const int flex_rlc_bsr::kStatusPduSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_rlc_bsr::flex_rlc_bsr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_rlc_bsr)
}
flex_rlc_bsr::flex_rlc_bsr(const flex_rlc_bsr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lc_id_, &from.lc_id_,
    reinterpret_cast<char*>(&status_pdu_size_) -
    reinterpret_cast<char*>(&lc_id_) + sizeof(status_pdu_size_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rlc_bsr)
}

void flex_rlc_bsr::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lc_id_, 0, reinterpret_cast<char*>(&status_pdu_size_) -
    reinterpret_cast<char*>(&lc_id_) + sizeof(status_pdu_size_));
}

flex_rlc_bsr::~flex_rlc_bsr() {
  // @@protoc_insertion_point(destructor:protocol.flex_rlc_bsr)
  SharedDtor();
}

void flex_rlc_bsr::SharedDtor() {
}

void flex_rlc_bsr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_rlc_bsr::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_rlc_bsr& flex_rlc_bsr::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_rlc_bsr* flex_rlc_bsr::New(::google::protobuf::Arena* arena) const {
  flex_rlc_bsr* n = new flex_rlc_bsr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_rlc_bsr::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rlc_bsr)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&lc_id_, 0, reinterpret_cast<char*>(&status_pdu_size_) -
      reinterpret_cast<char*>(&lc_id_) + sizeof(status_pdu_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_rlc_bsr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_rlc_bsr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lc_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_queue_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tx_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tx_queue_hol_delay = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tx_queue_hol_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_queue_hol_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retransmission_queue_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_retransmission_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retransmission_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 retransmission_queue_hol_delay = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_retransmission_queue_hol_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retransmission_queue_hol_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status_pdu_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_status_pdu_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_pdu_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_rlc_bsr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_rlc_bsr)
  return false;
#undef DO_
}

void flex_rlc_bsr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_rlc_bsr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lc_id(), output);
  }

  // optional uint32 tx_queue_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tx_queue_size(), output);
  }

  // optional uint32 tx_queue_hol_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tx_queue_hol_delay(), output);
  }

  // optional uint32 retransmission_queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->retransmission_queue_size(), output);
  }

  // optional uint32 retransmission_queue_hol_delay = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->retransmission_queue_hol_delay(), output);
  }

  // optional uint32 status_pdu_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status_pdu_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_rlc_bsr)
}

::google::protobuf::uint8* flex_rlc_bsr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rlc_bsr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lc_id(), target);
  }

  // optional uint32 tx_queue_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tx_queue_size(), target);
  }

  // optional uint32 tx_queue_hol_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tx_queue_hol_delay(), target);
  }

  // optional uint32 retransmission_queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->retransmission_queue_size(), target);
  }

  // optional uint32 retransmission_queue_hol_delay = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->retransmission_queue_hol_delay(), target);
  }

  // optional uint32 status_pdu_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status_pdu_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rlc_bsr)
  return target;
}

size_t flex_rlc_bsr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rlc_bsr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 lc_id = 1;
    if (has_lc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lc_id());
    }

    // optional uint32 tx_queue_size = 2;
    if (has_tx_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_queue_size());
    }

    // optional uint32 tx_queue_hol_delay = 3;
    if (has_tx_queue_hol_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tx_queue_hol_delay());
    }

    // optional uint32 retransmission_queue_size = 4;
    if (has_retransmission_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retransmission_queue_size());
    }

    // optional uint32 retransmission_queue_hol_delay = 5;
    if (has_retransmission_queue_hol_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retransmission_queue_hol_delay());
    }

    // optional uint32 status_pdu_size = 6;
    if (has_status_pdu_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_pdu_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_rlc_bsr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rlc_bsr)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rlc_bsr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_rlc_bsr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rlc_bsr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rlc_bsr)
    MergeFrom(*source);
  }
}

void flex_rlc_bsr::MergeFrom(const flex_rlc_bsr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rlc_bsr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      lc_id_ = from.lc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tx_queue_size_ = from.tx_queue_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      tx_queue_hol_delay_ = from.tx_queue_hol_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      retransmission_queue_size_ = from.retransmission_queue_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      retransmission_queue_hol_delay_ = from.retransmission_queue_hol_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_pdu_size_ = from.status_pdu_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_rlc_bsr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rlc_bsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rlc_bsr::CopyFrom(const flex_rlc_bsr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rlc_bsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rlc_bsr::IsInitialized() const {
  return true;
}

void flex_rlc_bsr::Swap(flex_rlc_bsr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_rlc_bsr::InternalSwap(flex_rlc_bsr* other) {
  std::swap(lc_id_, other->lc_id_);
  std::swap(tx_queue_size_, other->tx_queue_size_);
  std::swap(tx_queue_hol_delay_, other->tx_queue_hol_delay_);
  std::swap(retransmission_queue_size_, other->retransmission_queue_size_);
  std::swap(retransmission_queue_hol_delay_, other->retransmission_queue_hol_delay_);
  std::swap(status_pdu_size_, other->status_pdu_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_rlc_bsr::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_rlc_bsr

// optional uint32 lc_id = 1;
bool flex_rlc_bsr::has_lc_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_rlc_bsr::set_has_lc_id() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_rlc_bsr::clear_has_lc_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_rlc_bsr::clear_lc_id() {
  lc_id_ = 0u;
  clear_has_lc_id();
}
::google::protobuf::uint32 flex_rlc_bsr::lc_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_bsr.lc_id)
  return lc_id_;
}
void flex_rlc_bsr::set_lc_id(::google::protobuf::uint32 value) {
  set_has_lc_id();
  lc_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_bsr.lc_id)
}

// optional uint32 tx_queue_size = 2;
bool flex_rlc_bsr::has_tx_queue_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_rlc_bsr::set_has_tx_queue_size() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_rlc_bsr::clear_has_tx_queue_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_rlc_bsr::clear_tx_queue_size() {
  tx_queue_size_ = 0u;
  clear_has_tx_queue_size();
}
::google::protobuf::uint32 flex_rlc_bsr::tx_queue_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_bsr.tx_queue_size)
  return tx_queue_size_;
}
void flex_rlc_bsr::set_tx_queue_size(::google::protobuf::uint32 value) {
  set_has_tx_queue_size();
  tx_queue_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_bsr.tx_queue_size)
}

// optional uint32 tx_queue_hol_delay = 3;
bool flex_rlc_bsr::has_tx_queue_hol_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_rlc_bsr::set_has_tx_queue_hol_delay() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_rlc_bsr::clear_has_tx_queue_hol_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_rlc_bsr::clear_tx_queue_hol_delay() {
  tx_queue_hol_delay_ = 0u;
  clear_has_tx_queue_hol_delay();
}
::google::protobuf::uint32 flex_rlc_bsr::tx_queue_hol_delay() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_bsr.tx_queue_hol_delay)
  return tx_queue_hol_delay_;
}
void flex_rlc_bsr::set_tx_queue_hol_delay(::google::protobuf::uint32 value) {
  set_has_tx_queue_hol_delay();
  tx_queue_hol_delay_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_bsr.tx_queue_hol_delay)
}

// optional uint32 retransmission_queue_size = 4;
bool flex_rlc_bsr::has_retransmission_queue_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_rlc_bsr::set_has_retransmission_queue_size() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_rlc_bsr::clear_has_retransmission_queue_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_rlc_bsr::clear_retransmission_queue_size() {
  retransmission_queue_size_ = 0u;
  clear_has_retransmission_queue_size();
}
::google::protobuf::uint32 flex_rlc_bsr::retransmission_queue_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_bsr.retransmission_queue_size)
  return retransmission_queue_size_;
}
void flex_rlc_bsr::set_retransmission_queue_size(::google::protobuf::uint32 value) {
  set_has_retransmission_queue_size();
  retransmission_queue_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_bsr.retransmission_queue_size)
}

// optional uint32 retransmission_queue_hol_delay = 5;
bool flex_rlc_bsr::has_retransmission_queue_hol_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_rlc_bsr::set_has_retransmission_queue_hol_delay() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_rlc_bsr::clear_has_retransmission_queue_hol_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_rlc_bsr::clear_retransmission_queue_hol_delay() {
  retransmission_queue_hol_delay_ = 0u;
  clear_has_retransmission_queue_hol_delay();
}
::google::protobuf::uint32 flex_rlc_bsr::retransmission_queue_hol_delay() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_bsr.retransmission_queue_hol_delay)
  return retransmission_queue_hol_delay_;
}
void flex_rlc_bsr::set_retransmission_queue_hol_delay(::google::protobuf::uint32 value) {
  set_has_retransmission_queue_hol_delay();
  retransmission_queue_hol_delay_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_bsr.retransmission_queue_hol_delay)
}

// optional uint32 status_pdu_size = 6;
bool flex_rlc_bsr::has_status_pdu_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_rlc_bsr::set_has_status_pdu_size() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_rlc_bsr::clear_has_status_pdu_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_rlc_bsr::clear_status_pdu_size() {
  status_pdu_size_ = 0u;
  clear_has_status_pdu_size();
}
::google::protobuf::uint32 flex_rlc_bsr::status_pdu_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_bsr.status_pdu_size)
  return status_pdu_size_;
}
void flex_rlc_bsr::set_status_pdu_size(::google::protobuf::uint32 value) {
  set_has_status_pdu_size();
  status_pdu_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_bsr.status_pdu_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_p10::kWbCqiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_p10::flex_csi_p10()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_p10)
}
flex_csi_p10::flex_csi_p10(const flex_csi_p10& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wb_cqi_ = from.wb_cqi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p10)
}

void flex_csi_p10::SharedCtor() {
  _cached_size_ = 0;
  wb_cqi_ = 0u;
}

flex_csi_p10::~flex_csi_p10() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p10)
  SharedDtor();
}

void flex_csi_p10::SharedDtor() {
}

void flex_csi_p10::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_p10::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_p10& flex_csi_p10::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_p10* flex_csi_p10::New(::google::protobuf::Arena* arena) const {
  flex_csi_p10* n = new flex_csi_p10;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_p10::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p10)
  wb_cqi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_p10::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_p10)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_p10)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_p10)
  return false;
#undef DO_
}

void flex_csi_p10::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_p10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wb_cqi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_p10)
}

::google::protobuf::uint8* flex_csi_p10::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p10)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wb_cqi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p10)
  return target;
}

size_t flex_csi_p10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p10)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 wb_cqi = 1;
  if (has_wb_cqi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wb_cqi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_p10::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p10)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p10* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_p10>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p10)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p10)
    MergeFrom(*source);
  }
}

void flex_csi_p10::MergeFrom(const flex_csi_p10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wb_cqi()) {
    set_wb_cqi(from.wb_cqi());
  }
}

void flex_csi_p10::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p10::CopyFrom(const flex_csi_p10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p10::IsInitialized() const {
  return true;
}

void flex_csi_p10::Swap(flex_csi_p10* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_p10::InternalSwap(flex_csi_p10* other) {
  std::swap(wb_cqi_, other->wb_cqi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_p10::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_p10

// optional uint32 wb_cqi = 1;
bool flex_csi_p10::has_wb_cqi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_p10::set_has_wb_cqi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_p10::clear_has_wb_cqi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_p10::clear_wb_cqi() {
  wb_cqi_ = 0u;
  clear_has_wb_cqi();
}
::google::protobuf::uint32 flex_csi_p10::wb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p10.wb_cqi)
  return wb_cqi_;
}
void flex_csi_p10::set_wb_cqi(::google::protobuf::uint32 value) {
  set_has_wb_cqi();
  wb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p10.wb_cqi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_p11::kWbCqiFieldNumber;
const int flex_csi_p11::kWbPmiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_p11::flex_csi_p11()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_p11)
}
flex_csi_p11::flex_csi_p11(const flex_csi_p11& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wb_cqi_(from.wb_cqi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wb_pmi_ = from.wb_pmi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p11)
}

void flex_csi_p11::SharedCtor() {
  _cached_size_ = 0;
  wb_pmi_ = 0u;
}

flex_csi_p11::~flex_csi_p11() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p11)
  SharedDtor();
}

void flex_csi_p11::SharedDtor() {
}

void flex_csi_p11::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_p11::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_p11& flex_csi_p11::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_p11* flex_csi_p11::New(::google::protobuf::Arena* arena) const {
  flex_csi_p11* n = new flex_csi_p11;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_p11::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p11)
  wb_cqi_.Clear();
  wb_pmi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_p11::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_p11)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_wb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wb_pmi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_wb_pmi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_pmi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_p11)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_p11)
  return false;
#undef DO_
}

void flex_csi_p11::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_p11)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->wb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->wb_cqi(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wb_pmi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_p11)
}

::google::protobuf::uint8* flex_csi_p11::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p11)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->wb_cqi_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wb_pmi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p11)
  return target;
}

size_t flex_csi_p11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p11)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wb_cqi_size());
    total_size += data_size;
  }

  // optional uint32 wb_pmi = 2;
  if (has_wb_pmi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wb_pmi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_p11::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p11)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p11* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_p11>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p11)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p11)
    MergeFrom(*source);
  }
}

void flex_csi_p11::MergeFrom(const flex_csi_p11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  if (from.has_wb_pmi()) {
    set_wb_pmi(from.wb_pmi());
  }
}

void flex_csi_p11::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p11::CopyFrom(const flex_csi_p11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p11::IsInitialized() const {
  return true;
}

void flex_csi_p11::Swap(flex_csi_p11* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_p11::InternalSwap(flex_csi_p11* other) {
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  std::swap(wb_pmi_, other->wb_pmi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_p11::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_p11

// repeated uint32 wb_cqi = 1;
int flex_csi_p11::wb_cqi_size() const {
  return wb_cqi_.size();
}
void flex_csi_p11::clear_wb_cqi() {
  wb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_p11::wb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p11.wb_cqi)
  return wb_cqi_.Get(index);
}
void flex_csi_p11::set_wb_cqi(int index, ::google::protobuf::uint32 value) {
  wb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p11.wb_cqi)
}
void flex_csi_p11::add_wb_cqi(::google::protobuf::uint32 value) {
  wb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_p11.wb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_p11::wb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_p11.wb_cqi)
  return wb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_p11::mutable_wb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_p11.wb_cqi)
  return &wb_cqi_;
}

// optional uint32 wb_pmi = 2;
bool flex_csi_p11::has_wb_pmi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_p11::set_has_wb_pmi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_p11::clear_has_wb_pmi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_p11::clear_wb_pmi() {
  wb_pmi_ = 0u;
  clear_has_wb_pmi();
}
::google::protobuf::uint32 flex_csi_p11::wb_pmi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p11.wb_pmi)
  return wb_pmi_;
}
void flex_csi_p11::set_wb_pmi(::google::protobuf::uint32 value) {
  set_has_wb_pmi();
  wb_pmi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p11.wb_pmi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_p20::kWbCqiFieldNumber;
const int flex_csi_p20::kSbCqiFieldNumber;
const int flex_csi_p20::kBandwidthPartIndexFieldNumber;
const int flex_csi_p20::kSbIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_p20::flex_csi_p20()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_p20)
}
flex_csi_p20::flex_csi_p20(const flex_csi_p20& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wb_cqi_, &from.wb_cqi_,
    reinterpret_cast<char*>(&sb_index_) -
    reinterpret_cast<char*>(&wb_cqi_) + sizeof(sb_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p20)
}

void flex_csi_p20::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wb_cqi_, 0, reinterpret_cast<char*>(&sb_index_) -
    reinterpret_cast<char*>(&wb_cqi_) + sizeof(sb_index_));
}

flex_csi_p20::~flex_csi_p20() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p20)
  SharedDtor();
}

void flex_csi_p20::SharedDtor() {
}

void flex_csi_p20::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_p20::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_p20& flex_csi_p20::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_p20* flex_csi_p20::New(::google::protobuf::Arena* arena) const {
  flex_csi_p20* n = new flex_csi_p20;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_p20::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p20)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&wb_cqi_, 0, reinterpret_cast<char*>(&sb_index_) -
      reinterpret_cast<char*>(&wb_cqi_) + sizeof(sb_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_p20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_p20)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sb_cqi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bandwidth_part_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bandwidth_part_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bandwidth_part_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sb_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sb_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sb_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_p20)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_p20)
  return false;
#undef DO_
}

void flex_csi_p20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_p20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wb_cqi(), output);
  }

  // optional uint32 sb_cqi = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sb_cqi(), output);
  }

  // optional uint32 bandwidth_part_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bandwidth_part_index(), output);
  }

  // optional uint32 sb_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sb_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_p20)
}

::google::protobuf::uint8* flex_csi_p20::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wb_cqi(), target);
  }

  // optional uint32 sb_cqi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sb_cqi(), target);
  }

  // optional uint32 bandwidth_part_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bandwidth_part_index(), target);
  }

  // optional uint32 sb_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sb_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p20)
  return target;
}

size_t flex_csi_p20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p20)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 wb_cqi = 1;
    if (has_wb_cqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wb_cqi());
    }

    // optional uint32 sb_cqi = 2;
    if (has_sb_cqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sb_cqi());
    }

    // optional uint32 bandwidth_part_index = 3;
    if (has_bandwidth_part_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bandwidth_part_index());
    }

    // optional uint32 sb_index = 4;
    if (has_sb_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sb_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_p20::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p20)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p20* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_p20>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p20)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p20)
    MergeFrom(*source);
  }
}

void flex_csi_p20::MergeFrom(const flex_csi_p20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      wb_cqi_ = from.wb_cqi_;
    }
    if (cached_has_bits & 0x00000002u) {
      sb_cqi_ = from.sb_cqi_;
    }
    if (cached_has_bits & 0x00000004u) {
      bandwidth_part_index_ = from.bandwidth_part_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      sb_index_ = from.sb_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_p20::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p20::CopyFrom(const flex_csi_p20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p20::IsInitialized() const {
  return true;
}

void flex_csi_p20::Swap(flex_csi_p20* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_p20::InternalSwap(flex_csi_p20* other) {
  std::swap(wb_cqi_, other->wb_cqi_);
  std::swap(sb_cqi_, other->sb_cqi_);
  std::swap(bandwidth_part_index_, other->bandwidth_part_index_);
  std::swap(sb_index_, other->sb_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_p20::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_p20

// optional uint32 wb_cqi = 1;
bool flex_csi_p20::has_wb_cqi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_p20::set_has_wb_cqi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_p20::clear_has_wb_cqi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_p20::clear_wb_cqi() {
  wb_cqi_ = 0u;
  clear_has_wb_cqi();
}
::google::protobuf::uint32 flex_csi_p20::wb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p20.wb_cqi)
  return wb_cqi_;
}
void flex_csi_p20::set_wb_cqi(::google::protobuf::uint32 value) {
  set_has_wb_cqi();
  wb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p20.wb_cqi)
}

// optional uint32 sb_cqi = 2;
bool flex_csi_p20::has_sb_cqi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_csi_p20::set_has_sb_cqi() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_csi_p20::clear_has_sb_cqi() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_csi_p20::clear_sb_cqi() {
  sb_cqi_ = 0u;
  clear_has_sb_cqi();
}
::google::protobuf::uint32 flex_csi_p20::sb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p20.sb_cqi)
  return sb_cqi_;
}
void flex_csi_p20::set_sb_cqi(::google::protobuf::uint32 value) {
  set_has_sb_cqi();
  sb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p20.sb_cqi)
}

// optional uint32 bandwidth_part_index = 3;
bool flex_csi_p20::has_bandwidth_part_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_csi_p20::set_has_bandwidth_part_index() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_csi_p20::clear_has_bandwidth_part_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_csi_p20::clear_bandwidth_part_index() {
  bandwidth_part_index_ = 0u;
  clear_has_bandwidth_part_index();
}
::google::protobuf::uint32 flex_csi_p20::bandwidth_part_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p20.bandwidth_part_index)
  return bandwidth_part_index_;
}
void flex_csi_p20::set_bandwidth_part_index(::google::protobuf::uint32 value) {
  set_has_bandwidth_part_index();
  bandwidth_part_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p20.bandwidth_part_index)
}

// optional uint32 sb_index = 4;
bool flex_csi_p20::has_sb_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_csi_p20::set_has_sb_index() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_csi_p20::clear_has_sb_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_csi_p20::clear_sb_index() {
  sb_index_ = 0u;
  clear_has_sb_index();
}
::google::protobuf::uint32 flex_csi_p20::sb_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p20.sb_index)
  return sb_index_;
}
void flex_csi_p20::set_sb_index(::google::protobuf::uint32 value) {
  set_has_sb_index();
  sb_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p20.sb_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_p21::kWbCqiFieldNumber;
const int flex_csi_p21::kWbPmiFieldNumber;
const int flex_csi_p21::kSbCqiFieldNumber;
const int flex_csi_p21::kBadwidthPartIndexFieldNumber;
const int flex_csi_p21::kSbIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_p21::flex_csi_p21()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_p21)
}
flex_csi_p21::flex_csi_p21(const flex_csi_p21& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wb_cqi_(from.wb_cqi_),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wb_pmi_, &from.wb_pmi_,
    reinterpret_cast<char*>(&sb_index_) -
    reinterpret_cast<char*>(&wb_pmi_) + sizeof(sb_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p21)
}

void flex_csi_p21::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wb_pmi_, 0, reinterpret_cast<char*>(&sb_index_) -
    reinterpret_cast<char*>(&wb_pmi_) + sizeof(sb_index_));
}

flex_csi_p21::~flex_csi_p21() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p21)
  SharedDtor();
}

void flex_csi_p21::SharedDtor() {
}

void flex_csi_p21::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_p21::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_p21& flex_csi_p21::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_p21* flex_csi_p21::New(::google::protobuf::Arena* arena) const {
  flex_csi_p21* n = new flex_csi_p21;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_p21::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p21)
  wb_cqi_.Clear();
  sb_cqi_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&wb_pmi_, 0, reinterpret_cast<char*>(&sb_index_) -
      reinterpret_cast<char*>(&wb_pmi_) + sizeof(sb_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_p21::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_p21)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_wb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wb_pmi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_wb_pmi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_pmi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sb_cqi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_sb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badwidth_part_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_badwidth_part_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badwidth_part_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sb_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sb_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sb_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_p21)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_p21)
  return false;
#undef DO_
}

void flex_csi_p21::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_p21)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->wb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->wb_cqi(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wb_pmi(), output);
  }

  // repeated uint32 sb_cqi = 3;
  for (int i = 0, n = this->sb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->sb_cqi(i), output);
  }

  // optional uint32 badwidth_part_index = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badwidth_part_index(), output);
  }

  // optional uint32 sb_index = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sb_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_p21)
}

::google::protobuf::uint8* flex_csi_p21::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p21)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->wb_cqi_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wb_pmi(), target);
  }

  // repeated uint32 sb_cqi = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->sb_cqi_, target);

  // optional uint32 badwidth_part_index = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badwidth_part_index(), target);
  }

  // optional uint32 sb_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sb_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p21)
  return target;
}

size_t flex_csi_p21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p21)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_cqi = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_cqi_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 wb_pmi = 2;
    if (has_wb_pmi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wb_pmi());
    }

    // optional uint32 badwidth_part_index = 4;
    if (has_badwidth_part_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badwidth_part_index());
    }

    // optional uint32 sb_index = 5;
    if (has_sb_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sb_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_p21::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p21)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p21* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_p21>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p21)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p21)
    MergeFrom(*source);
  }
}

void flex_csi_p21::MergeFrom(const flex_csi_p21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_cqi_.MergeFrom(from.sb_cqi_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      wb_pmi_ = from.wb_pmi_;
    }
    if (cached_has_bits & 0x00000002u) {
      badwidth_part_index_ = from.badwidth_part_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      sb_index_ = from.sb_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_p21::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p21::CopyFrom(const flex_csi_p21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p21::IsInitialized() const {
  return true;
}

void flex_csi_p21::Swap(flex_csi_p21* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_p21::InternalSwap(flex_csi_p21* other) {
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  std::swap(wb_pmi_, other->wb_pmi_);
  std::swap(badwidth_part_index_, other->badwidth_part_index_);
  std::swap(sb_index_, other->sb_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_p21::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_p21

// repeated uint32 wb_cqi = 1;
int flex_csi_p21::wb_cqi_size() const {
  return wb_cqi_.size();
}
void flex_csi_p21::clear_wb_cqi() {
  wb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_p21::wb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p21.wb_cqi)
  return wb_cqi_.Get(index);
}
void flex_csi_p21::set_wb_cqi(int index, ::google::protobuf::uint32 value) {
  wb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p21.wb_cqi)
}
void flex_csi_p21::add_wb_cqi(::google::protobuf::uint32 value) {
  wb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_p21.wb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_p21::wb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_p21.wb_cqi)
  return wb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_p21::mutable_wb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_p21.wb_cqi)
  return &wb_cqi_;
}

// optional uint32 wb_pmi = 2;
bool flex_csi_p21::has_wb_pmi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_p21::set_has_wb_pmi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_p21::clear_has_wb_pmi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_p21::clear_wb_pmi() {
  wb_pmi_ = 0u;
  clear_has_wb_pmi();
}
::google::protobuf::uint32 flex_csi_p21::wb_pmi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p21.wb_pmi)
  return wb_pmi_;
}
void flex_csi_p21::set_wb_pmi(::google::protobuf::uint32 value) {
  set_has_wb_pmi();
  wb_pmi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p21.wb_pmi)
}

// repeated uint32 sb_cqi = 3;
int flex_csi_p21::sb_cqi_size() const {
  return sb_cqi_.size();
}
void flex_csi_p21::clear_sb_cqi() {
  sb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_p21::sb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p21.sb_cqi)
  return sb_cqi_.Get(index);
}
void flex_csi_p21::set_sb_cqi(int index, ::google::protobuf::uint32 value) {
  sb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p21.sb_cqi)
}
void flex_csi_p21::add_sb_cqi(::google::protobuf::uint32 value) {
  sb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_p21.sb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_p21::sb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_p21.sb_cqi)
  return sb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_p21::mutable_sb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_p21.sb_cqi)
  return &sb_cqi_;
}

// optional uint32 badwidth_part_index = 4;
bool flex_csi_p21::has_badwidth_part_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_csi_p21::set_has_badwidth_part_index() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_csi_p21::clear_has_badwidth_part_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_csi_p21::clear_badwidth_part_index() {
  badwidth_part_index_ = 0u;
  clear_has_badwidth_part_index();
}
::google::protobuf::uint32 flex_csi_p21::badwidth_part_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p21.badwidth_part_index)
  return badwidth_part_index_;
}
void flex_csi_p21::set_badwidth_part_index(::google::protobuf::uint32 value) {
  set_has_badwidth_part_index();
  badwidth_part_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p21.badwidth_part_index)
}

// optional uint32 sb_index = 5;
bool flex_csi_p21::has_sb_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_csi_p21::set_has_sb_index() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_csi_p21::clear_has_sb_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_csi_p21::clear_sb_index() {
  sb_index_ = 0u;
  clear_has_sb_index();
}
::google::protobuf::uint32 flex_csi_p21::sb_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_p21.sb_index)
  return sb_index_;
}
void flex_csi_p21::set_sb_index(::google::protobuf::uint32 value) {
  set_has_sb_index();
  sb_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_p21.sb_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_a12::kWbCqiFieldNumber;
const int flex_csi_a12::kSbPmiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_a12::flex_csi_a12()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_a12)
}
flex_csi_a12::flex_csi_a12(const flex_csi_a12& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wb_cqi_(from.wb_cqi_),
      sb_pmi_(from.sb_pmi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a12)
}

void flex_csi_a12::SharedCtor() {
  _cached_size_ = 0;
}

flex_csi_a12::~flex_csi_a12() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a12)
  SharedDtor();
}

void flex_csi_a12::SharedDtor() {
}

void flex_csi_a12::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_a12::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_a12& flex_csi_a12::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_a12* flex_csi_a12::New(::google::protobuf::Arena* arena) const {
  flex_csi_a12* n = new flex_csi_a12;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_a12::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a12)
  wb_cqi_.Clear();
  sb_pmi_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_a12::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_a12)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_wb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sb_pmi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_sb_pmi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_pmi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_a12)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_a12)
  return false;
#undef DO_
}

void flex_csi_a12::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_a12)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->wb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->wb_cqi(i), output);
  }

  // repeated uint32 sb_pmi = 2;
  for (int i = 0, n = this->sb_pmi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sb_pmi(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_a12)
}

::google::protobuf::uint8* flex_csi_a12::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a12)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->wb_cqi_, target);

  // repeated uint32 sb_pmi = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->sb_pmi_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a12)
  return target;
}

size_t flex_csi_a12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a12)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_pmi = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_pmi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_pmi_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_a12::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a12)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a12* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_a12>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a12)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a12)
    MergeFrom(*source);
  }
}

void flex_csi_a12::MergeFrom(const flex_csi_a12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_pmi_.MergeFrom(from.sb_pmi_);
}

void flex_csi_a12::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a12::CopyFrom(const flex_csi_a12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a12::IsInitialized() const {
  return true;
}

void flex_csi_a12::Swap(flex_csi_a12* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_a12::InternalSwap(flex_csi_a12* other) {
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_pmi_.InternalSwap(&other->sb_pmi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_a12::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_a12

// repeated uint32 wb_cqi = 1;
int flex_csi_a12::wb_cqi_size() const {
  return wb_cqi_.size();
}
void flex_csi_a12::clear_wb_cqi() {
  wb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_a12::wb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a12.wb_cqi)
  return wb_cqi_.Get(index);
}
void flex_csi_a12::set_wb_cqi(int index, ::google::protobuf::uint32 value) {
  wb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a12.wb_cqi)
}
void flex_csi_a12::add_wb_cqi(::google::protobuf::uint32 value) {
  wb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a12.wb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a12::wb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a12.wb_cqi)
  return wb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a12::mutable_wb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a12.wb_cqi)
  return &wb_cqi_;
}

// repeated uint32 sb_pmi = 2;
int flex_csi_a12::sb_pmi_size() const {
  return sb_pmi_.size();
}
void flex_csi_a12::clear_sb_pmi() {
  sb_pmi_.Clear();
}
::google::protobuf::uint32 flex_csi_a12::sb_pmi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a12.sb_pmi)
  return sb_pmi_.Get(index);
}
void flex_csi_a12::set_sb_pmi(int index, ::google::protobuf::uint32 value) {
  sb_pmi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a12.sb_pmi)
}
void flex_csi_a12::add_sb_pmi(::google::protobuf::uint32 value) {
  sb_pmi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a12.sb_pmi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a12::sb_pmi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a12.sb_pmi)
  return sb_pmi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a12::mutable_sb_pmi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a12.sb_pmi)
  return &sb_pmi_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_a22::kWbCqiFieldNumber;
const int flex_csi_a22::kSbCqiFieldNumber;
const int flex_csi_a22::kWbPmiFieldNumber;
const int flex_csi_a22::kSbPmiFieldNumber;
const int flex_csi_a22::kSbListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_a22::flex_csi_a22()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_a22)
}
flex_csi_a22::flex_csi_a22(const flex_csi_a22& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wb_cqi_(from.wb_cqi_),
      sb_cqi_(from.sb_cqi_),
      sb_list_(from.sb_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wb_pmi_, &from.wb_pmi_,
    reinterpret_cast<char*>(&sb_pmi_) -
    reinterpret_cast<char*>(&wb_pmi_) + sizeof(sb_pmi_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a22)
}

void flex_csi_a22::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wb_pmi_, 0, reinterpret_cast<char*>(&sb_pmi_) -
    reinterpret_cast<char*>(&wb_pmi_) + sizeof(sb_pmi_));
}

flex_csi_a22::~flex_csi_a22() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a22)
  SharedDtor();
}

void flex_csi_a22::SharedDtor() {
}

void flex_csi_a22::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_a22::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_a22& flex_csi_a22::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_a22* flex_csi_a22::New(::google::protobuf::Arena* arena) const {
  flex_csi_a22* n = new flex_csi_a22;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_a22::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a22)
  wb_cqi_.Clear();
  sb_cqi_.Clear();
  sb_list_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&wb_pmi_, 0, reinterpret_cast<char*>(&sb_pmi_) -
      reinterpret_cast<char*>(&wb_pmi_) + sizeof(sb_pmi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_a22::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_a22)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_wb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sb_cqi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_sb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wb_pmi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_wb_pmi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_pmi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sb_pmi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sb_pmi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sb_pmi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sb_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_sb_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_a22)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_a22)
  return false;
#undef DO_
}

void flex_csi_a22::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_a22)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->wb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->wb_cqi(i), output);
  }

  // repeated uint32 sb_cqi = 2;
  for (int i = 0, n = this->sb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sb_cqi(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wb_pmi(), output);
  }

  // optional uint32 sb_pmi = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sb_pmi(), output);
  }

  // repeated uint32 sb_list = 5;
  for (int i = 0, n = this->sb_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->sb_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_a22)
}

::google::protobuf::uint8* flex_csi_a22::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a22)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->wb_cqi_, target);

  // repeated uint32 sb_cqi = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->sb_cqi_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wb_pmi(), target);
  }

  // optional uint32 sb_pmi = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sb_pmi(), target);
  }

  // repeated uint32 sb_list = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->sb_list_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a22)
  return target;
}

size_t flex_csi_a22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a22)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_cqi = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 wb_pmi = 3;
    if (has_wb_pmi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wb_pmi());
    }

    // optional uint32 sb_pmi = 4;
    if (has_sb_pmi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sb_pmi());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_a22::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a22)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a22* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_a22>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a22)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a22)
    MergeFrom(*source);
  }
}

void flex_csi_a22::MergeFrom(const flex_csi_a22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_cqi_.MergeFrom(from.sb_cqi_);
  sb_list_.MergeFrom(from.sb_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      wb_pmi_ = from.wb_pmi_;
    }
    if (cached_has_bits & 0x00000002u) {
      sb_pmi_ = from.sb_pmi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_a22::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a22::CopyFrom(const flex_csi_a22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a22::IsInitialized() const {
  return true;
}

void flex_csi_a22::Swap(flex_csi_a22* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_a22::InternalSwap(flex_csi_a22* other) {
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  sb_list_.InternalSwap(&other->sb_list_);
  std::swap(wb_pmi_, other->wb_pmi_);
  std::swap(sb_pmi_, other->sb_pmi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_a22::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_a22

// repeated uint32 wb_cqi = 1;
int flex_csi_a22::wb_cqi_size() const {
  return wb_cqi_.size();
}
void flex_csi_a22::clear_wb_cqi() {
  wb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_a22::wb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a22.wb_cqi)
  return wb_cqi_.Get(index);
}
void flex_csi_a22::set_wb_cqi(int index, ::google::protobuf::uint32 value) {
  wb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a22.wb_cqi)
}
void flex_csi_a22::add_wb_cqi(::google::protobuf::uint32 value) {
  wb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a22.wb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a22::wb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a22.wb_cqi)
  return wb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a22::mutable_wb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a22.wb_cqi)
  return &wb_cqi_;
}

// repeated uint32 sb_cqi = 2;
int flex_csi_a22::sb_cqi_size() const {
  return sb_cqi_.size();
}
void flex_csi_a22::clear_sb_cqi() {
  sb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_a22::sb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a22.sb_cqi)
  return sb_cqi_.Get(index);
}
void flex_csi_a22::set_sb_cqi(int index, ::google::protobuf::uint32 value) {
  sb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a22.sb_cqi)
}
void flex_csi_a22::add_sb_cqi(::google::protobuf::uint32 value) {
  sb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a22.sb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a22::sb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a22.sb_cqi)
  return sb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a22::mutable_sb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a22.sb_cqi)
  return &sb_cqi_;
}

// optional uint32 wb_pmi = 3;
bool flex_csi_a22::has_wb_pmi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_a22::set_has_wb_pmi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_a22::clear_has_wb_pmi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_a22::clear_wb_pmi() {
  wb_pmi_ = 0u;
  clear_has_wb_pmi();
}
::google::protobuf::uint32 flex_csi_a22::wb_pmi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a22.wb_pmi)
  return wb_pmi_;
}
void flex_csi_a22::set_wb_pmi(::google::protobuf::uint32 value) {
  set_has_wb_pmi();
  wb_pmi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a22.wb_pmi)
}

// optional uint32 sb_pmi = 4;
bool flex_csi_a22::has_sb_pmi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_csi_a22::set_has_sb_pmi() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_csi_a22::clear_has_sb_pmi() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_csi_a22::clear_sb_pmi() {
  sb_pmi_ = 0u;
  clear_has_sb_pmi();
}
::google::protobuf::uint32 flex_csi_a22::sb_pmi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a22.sb_pmi)
  return sb_pmi_;
}
void flex_csi_a22::set_sb_pmi(::google::protobuf::uint32 value) {
  set_has_sb_pmi();
  sb_pmi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a22.sb_pmi)
}

// repeated uint32 sb_list = 5;
int flex_csi_a22::sb_list_size() const {
  return sb_list_.size();
}
void flex_csi_a22::clear_sb_list() {
  sb_list_.Clear();
}
::google::protobuf::uint32 flex_csi_a22::sb_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a22.sb_list)
  return sb_list_.Get(index);
}
void flex_csi_a22::set_sb_list(int index, ::google::protobuf::uint32 value) {
  sb_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a22.sb_list)
}
void flex_csi_a22::add_sb_list(::google::protobuf::uint32 value) {
  sb_list_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a22.sb_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a22::sb_list() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a22.sb_list)
  return sb_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a22::mutable_sb_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a22.sb_list)
  return &sb_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_a20::kWbCqiFieldNumber;
const int flex_csi_a20::kSbCqiFieldNumber;
const int flex_csi_a20::kSbListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_a20::flex_csi_a20()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_a20)
}
flex_csi_a20::flex_csi_a20(const flex_csi_a20& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sb_list_(from.sb_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wb_cqi_, &from.wb_cqi_,
    reinterpret_cast<char*>(&sb_cqi_) -
    reinterpret_cast<char*>(&wb_cqi_) + sizeof(sb_cqi_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a20)
}

void flex_csi_a20::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wb_cqi_, 0, reinterpret_cast<char*>(&sb_cqi_) -
    reinterpret_cast<char*>(&wb_cqi_) + sizeof(sb_cqi_));
}

flex_csi_a20::~flex_csi_a20() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a20)
  SharedDtor();
}

void flex_csi_a20::SharedDtor() {
}

void flex_csi_a20::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_a20::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_a20& flex_csi_a20::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_a20* flex_csi_a20::New(::google::protobuf::Arena* arena) const {
  flex_csi_a20* n = new flex_csi_a20;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_a20::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a20)
  sb_list_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&wb_cqi_, 0, reinterpret_cast<char*>(&sb_cqi_) -
      reinterpret_cast<char*>(&wb_cqi_) + sizeof(sb_cqi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_a20::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_a20)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sb_cqi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sb_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_sb_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_a20)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_a20)
  return false;
#undef DO_
}

void flex_csi_a20::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_a20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wb_cqi(), output);
  }

  // optional uint32 sb_cqi = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sb_cqi(), output);
  }

  // repeated uint32 sb_list = 3;
  for (int i = 0, n = this->sb_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->sb_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_a20)
}

::google::protobuf::uint8* flex_csi_a20::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a20)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wb_cqi(), target);
  }

  // optional uint32 sb_cqi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sb_cqi(), target);
  }

  // repeated uint32 sb_list = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->sb_list_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a20)
  return target;
}

size_t flex_csi_a20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a20)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 sb_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_list_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_list_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 wb_cqi = 1;
    if (has_wb_cqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wb_cqi());
    }

    // optional uint32 sb_cqi = 2;
    if (has_sb_cqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sb_cqi());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_a20::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a20)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a20* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_a20>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a20)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a20)
    MergeFrom(*source);
  }
}

void flex_csi_a20::MergeFrom(const flex_csi_a20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sb_list_.MergeFrom(from.sb_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      wb_cqi_ = from.wb_cqi_;
    }
    if (cached_has_bits & 0x00000002u) {
      sb_cqi_ = from.sb_cqi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_a20::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a20::CopyFrom(const flex_csi_a20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a20::IsInitialized() const {
  return true;
}

void flex_csi_a20::Swap(flex_csi_a20* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_a20::InternalSwap(flex_csi_a20* other) {
  sb_list_.InternalSwap(&other->sb_list_);
  std::swap(wb_cqi_, other->wb_cqi_);
  std::swap(sb_cqi_, other->sb_cqi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_a20::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_a20

// optional uint32 wb_cqi = 1;
bool flex_csi_a20::has_wb_cqi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_a20::set_has_wb_cqi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_a20::clear_has_wb_cqi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_a20::clear_wb_cqi() {
  wb_cqi_ = 0u;
  clear_has_wb_cqi();
}
::google::protobuf::uint32 flex_csi_a20::wb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a20.wb_cqi)
  return wb_cqi_;
}
void flex_csi_a20::set_wb_cqi(::google::protobuf::uint32 value) {
  set_has_wb_cqi();
  wb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a20.wb_cqi)
}

// optional uint32 sb_cqi = 2;
bool flex_csi_a20::has_sb_cqi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_csi_a20::set_has_sb_cqi() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_csi_a20::clear_has_sb_cqi() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_csi_a20::clear_sb_cqi() {
  sb_cqi_ = 0u;
  clear_has_sb_cqi();
}
::google::protobuf::uint32 flex_csi_a20::sb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a20.sb_cqi)
  return sb_cqi_;
}
void flex_csi_a20::set_sb_cqi(::google::protobuf::uint32 value) {
  set_has_sb_cqi();
  sb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a20.sb_cqi)
}

// repeated uint32 sb_list = 3;
int flex_csi_a20::sb_list_size() const {
  return sb_list_.size();
}
void flex_csi_a20::clear_sb_list() {
  sb_list_.Clear();
}
::google::protobuf::uint32 flex_csi_a20::sb_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a20.sb_list)
  return sb_list_.Get(index);
}
void flex_csi_a20::set_sb_list(int index, ::google::protobuf::uint32 value) {
  sb_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a20.sb_list)
}
void flex_csi_a20::add_sb_list(::google::protobuf::uint32 value) {
  sb_list_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a20.sb_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a20::sb_list() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a20.sb_list)
  return sb_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a20::mutable_sb_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a20.sb_list)
  return &sb_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_a30::kWbCqiFieldNumber;
const int flex_csi_a30::kSbCqiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_a30::flex_csi_a30()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_a30)
}
flex_csi_a30::flex_csi_a30(const flex_csi_a30& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wb_cqi_ = from.wb_cqi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a30)
}

void flex_csi_a30::SharedCtor() {
  _cached_size_ = 0;
  wb_cqi_ = 0u;
}

flex_csi_a30::~flex_csi_a30() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a30)
  SharedDtor();
}

void flex_csi_a30::SharedDtor() {
}

void flex_csi_a30::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_a30::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_a30& flex_csi_a30::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_a30* flex_csi_a30::New(::google::protobuf::Arena* arena) const {
  flex_csi_a30* n = new flex_csi_a30;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_a30::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a30)
  sb_cqi_.Clear();
  wb_cqi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_a30::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_a30)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wb_cqi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_cqi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sb_cqi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_sb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_a30)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_a30)
  return false;
#undef DO_
}

void flex_csi_a30::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_a30)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wb_cqi(), output);
  }

  // repeated uint32 sb_cqi = 2;
  for (int i = 0, n = this->sb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sb_cqi(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_a30)
}

::google::protobuf::uint8* flex_csi_a30::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a30)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wb_cqi(), target);
  }

  // repeated uint32 sb_cqi = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->sb_cqi_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a30)
  return target;
}

size_t flex_csi_a30::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a30)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 sb_cqi = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_cqi_size());
    total_size += data_size;
  }

  // optional uint32 wb_cqi = 1;
  if (has_wb_cqi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wb_cqi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_a30::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a30)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a30* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_a30>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a30)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a30)
    MergeFrom(*source);
  }
}

void flex_csi_a30::MergeFrom(const flex_csi_a30& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a30)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sb_cqi_.MergeFrom(from.sb_cqi_);
  if (from.has_wb_cqi()) {
    set_wb_cqi(from.wb_cqi());
  }
}

void flex_csi_a30::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a30::CopyFrom(const flex_csi_a30& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a30::IsInitialized() const {
  return true;
}

void flex_csi_a30::Swap(flex_csi_a30* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_a30::InternalSwap(flex_csi_a30* other) {
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  std::swap(wb_cqi_, other->wb_cqi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_a30::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_a30

// optional uint32 wb_cqi = 1;
bool flex_csi_a30::has_wb_cqi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_a30::set_has_wb_cqi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_a30::clear_has_wb_cqi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_a30::clear_wb_cqi() {
  wb_cqi_ = 0u;
  clear_has_wb_cqi();
}
::google::protobuf::uint32 flex_csi_a30::wb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a30.wb_cqi)
  return wb_cqi_;
}
void flex_csi_a30::set_wb_cqi(::google::protobuf::uint32 value) {
  set_has_wb_cqi();
  wb_cqi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a30.wb_cqi)
}

// repeated uint32 sb_cqi = 2;
int flex_csi_a30::sb_cqi_size() const {
  return sb_cqi_.size();
}
void flex_csi_a30::clear_sb_cqi() {
  sb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_a30::sb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a30.sb_cqi)
  return sb_cqi_.Get(index);
}
void flex_csi_a30::set_sb_cqi(int index, ::google::protobuf::uint32 value) {
  sb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a30.sb_cqi)
}
void flex_csi_a30::add_sb_cqi(::google::protobuf::uint32 value) {
  sb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a30.sb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a30::sb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a30.sb_cqi)
  return sb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a30::mutable_sb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a30.sb_cqi)
  return &sb_cqi_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_csi_a31::kWbCqiFieldNumber;
const int flex_csi_a31::kSbCqiFieldNumber;
const int flex_csi_a31::kWbPmiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_csi_a31::flex_csi_a31()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_csi_a31)
}
flex_csi_a31::flex_csi_a31(const flex_csi_a31& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wb_cqi_(from.wb_cqi_),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wb_pmi_ = from.wb_pmi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a31)
}

void flex_csi_a31::SharedCtor() {
  _cached_size_ = 0;
  wb_pmi_ = 0u;
}

flex_csi_a31::~flex_csi_a31() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a31)
  SharedDtor();
}

void flex_csi_a31::SharedDtor() {
}

void flex_csi_a31::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_csi_a31::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_csi_a31& flex_csi_a31::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_csi_a31* flex_csi_a31::New(::google::protobuf::Arena* arena) const {
  flex_csi_a31* n = new flex_csi_a31;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_csi_a31::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a31)
  wb_cqi_.Clear();
  sb_cqi_.Clear();
  wb_pmi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_csi_a31::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_csi_a31)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 wb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_wb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_msb_cqi sb_cqi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sb_cqi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wb_pmi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_wb_pmi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wb_pmi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_csi_a31)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_csi_a31)
  return false;
#undef DO_
}

void flex_csi_a31::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_csi_a31)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->wb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->wb_cqi(i), output);
  }

  // repeated .protocol.flex_msb_cqi sb_cqi = 2;
  for (unsigned int i = 0, n = this->sb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sb_cqi(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wb_pmi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_csi_a31)
}

::google::protobuf::uint8* flex_csi_a31::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a31)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->wb_cqi_, target);

  // repeated .protocol.flex_msb_cqi sb_cqi = 2;
  for (unsigned int i = 0, n = this->sb_cqi_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sb_cqi(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wb_pmi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a31)
  return target;
}

size_t flex_csi_a31::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a31)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wb_cqi_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_msb_cqi sb_cqi = 2;
  {
    unsigned int count = this->sb_cqi_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sb_cqi(i));
    }
  }

  // optional uint32 wb_pmi = 3;
  if (has_wb_pmi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wb_pmi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_csi_a31::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a31)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a31* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_csi_a31>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a31)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a31)
    MergeFrom(*source);
  }
}

void flex_csi_a31::MergeFrom(const flex_csi_a31& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a31)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_cqi_.MergeFrom(from.sb_cqi_);
  if (from.has_wb_pmi()) {
    set_wb_pmi(from.wb_pmi());
  }
}

void flex_csi_a31::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a31::CopyFrom(const flex_csi_a31& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a31::IsInitialized() const {
  return true;
}

void flex_csi_a31::Swap(flex_csi_a31* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_csi_a31::InternalSwap(flex_csi_a31* other) {
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  std::swap(wb_pmi_, other->wb_pmi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_csi_a31::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_csi_a31

// repeated uint32 wb_cqi = 1;
int flex_csi_a31::wb_cqi_size() const {
  return wb_cqi_.size();
}
void flex_csi_a31::clear_wb_cqi() {
  wb_cqi_.Clear();
}
::google::protobuf::uint32 flex_csi_a31::wb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a31.wb_cqi)
  return wb_cqi_.Get(index);
}
void flex_csi_a31::set_wb_cqi(int index, ::google::protobuf::uint32 value) {
  wb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a31.wb_cqi)
}
void flex_csi_a31::add_wb_cqi(::google::protobuf::uint32 value) {
  wb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a31.wb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_csi_a31::wb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a31.wb_cqi)
  return wb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_csi_a31::mutable_wb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a31.wb_cqi)
  return &wb_cqi_;
}

// repeated .protocol.flex_msb_cqi sb_cqi = 2;
int flex_csi_a31::sb_cqi_size() const {
  return sb_cqi_.size();
}
void flex_csi_a31::clear_sb_cqi() {
  sb_cqi_.Clear();
}
const ::protocol::flex_msb_cqi& flex_csi_a31::sb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a31.sb_cqi)
  return sb_cqi_.Get(index);
}
::protocol::flex_msb_cqi* flex_csi_a31::mutable_sb_cqi(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_csi_a31.sb_cqi)
  return sb_cqi_.Mutable(index);
}
::protocol::flex_msb_cqi* flex_csi_a31::add_sb_cqi() {
  // @@protoc_insertion_point(field_add:protocol.flex_csi_a31.sb_cqi)
  return sb_cqi_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_msb_cqi >*
flex_csi_a31::mutable_sb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_csi_a31.sb_cqi)
  return &sb_cqi_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_msb_cqi >&
flex_csi_a31::sb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_csi_a31.sb_cqi)
  return sb_cqi_;
}

// optional uint32 wb_pmi = 3;
bool flex_csi_a31::has_wb_pmi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_csi_a31::set_has_wb_pmi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_csi_a31::clear_has_wb_pmi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_csi_a31::clear_wb_pmi() {
  wb_pmi_ = 0u;
  clear_has_wb_pmi();
}
::google::protobuf::uint32 flex_csi_a31::wb_pmi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_csi_a31.wb_pmi)
  return wb_pmi_;
}
void flex_csi_a31::set_wb_pmi(::google::protobuf::uint32 value) {
  set_has_wb_pmi();
  wb_pmi_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_csi_a31.wb_pmi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_msb_cqi::kSbCqiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_msb_cqi::flex_msb_cqi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_msb_cqi)
}
flex_msb_cqi::flex_msb_cqi(const flex_msb_cqi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_msb_cqi)
}

void flex_msb_cqi::SharedCtor() {
  _cached_size_ = 0;
}

flex_msb_cqi::~flex_msb_cqi() {
  // @@protoc_insertion_point(destructor:protocol.flex_msb_cqi)
  SharedDtor();
}

void flex_msb_cqi::SharedDtor() {
}

void flex_msb_cqi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_msb_cqi::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_msb_cqi& flex_msb_cqi::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_msb_cqi* flex_msb_cqi::New(::google::protobuf::Arena* arena) const {
  flex_msb_cqi* n = new flex_msb_cqi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_msb_cqi::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_msb_cqi)
  sb_cqi_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_msb_cqi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_msb_cqi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 sb_cqi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_sb_cqi())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sb_cqi())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_msb_cqi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_msb_cqi)
  return false;
#undef DO_
}

void flex_msb_cqi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_msb_cqi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 sb_cqi = 1;
  for (int i = 0, n = this->sb_cqi_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->sb_cqi(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_msb_cqi)
}

::google::protobuf::uint8* flex_msb_cqi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_msb_cqi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 sb_cqi = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->sb_cqi_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_msb_cqi)
  return target;
}

size_t flex_msb_cqi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_msb_cqi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 sb_cqi = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sb_cqi_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_msb_cqi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_msb_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_msb_cqi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_msb_cqi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_msb_cqi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_msb_cqi)
    MergeFrom(*source);
  }
}

void flex_msb_cqi::MergeFrom(const flex_msb_cqi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_msb_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sb_cqi_.MergeFrom(from.sb_cqi_);
}

void flex_msb_cqi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_msb_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_msb_cqi::CopyFrom(const flex_msb_cqi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_msb_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_msb_cqi::IsInitialized() const {
  return true;
}

void flex_msb_cqi::Swap(flex_msb_cqi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_msb_cqi::InternalSwap(flex_msb_cqi* other) {
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_msb_cqi::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_msb_cqi

// repeated uint32 sb_cqi = 1;
int flex_msb_cqi::sb_cqi_size() const {
  return sb_cqi_.size();
}
void flex_msb_cqi::clear_sb_cqi() {
  sb_cqi_.Clear();
}
::google::protobuf::uint32 flex_msb_cqi::sb_cqi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_msb_cqi.sb_cqi)
  return sb_cqi_.Get(index);
}
void flex_msb_cqi::set_sb_cqi(int index, ::google::protobuf::uint32 value) {
  sb_cqi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_msb_cqi.sb_cqi)
}
void flex_msb_cqi::add_sb_cqi(::google::protobuf::uint32 value) {
  sb_cqi_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_msb_cqi.sb_cqi)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_msb_cqi::sb_cqi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_msb_cqi.sb_cqi)
  return sb_cqi_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_msb_cqi::mutable_sb_cqi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_msb_cqi.sb_cqi)
  return &sb_cqi_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_csi::kServCellIndexFieldNumber;
const int flex_dl_csi::kRiFieldNumber;
const int flex_dl_csi::kTypeFieldNumber;
const int flex_dl_csi::kP10CsiFieldNumber;
const int flex_dl_csi::kP11CsiFieldNumber;
const int flex_dl_csi::kP20CsiFieldNumber;
const int flex_dl_csi::kP21CsiFieldNumber;
const int flex_dl_csi::kA12CsiFieldNumber;
const int flex_dl_csi::kA22CsiFieldNumber;
const int flex_dl_csi::kA20CsiFieldNumber;
const int flex_dl_csi::kA30CsiFieldNumber;
const int flex_dl_csi::kA31CsiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_csi::flex_dl_csi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_csi)
}
flex_dl_csi::flex_dl_csi(const flex_dl_csi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serv_cell_index_, &from.serv_cell_index_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&serv_cell_index_) + sizeof(type_));
  clear_has_report();
  switch (from.report_case()) {
    case kP10Csi: {
      mutable_p10csi()->::protocol::flex_csi_p10::MergeFrom(from.p10csi());
      break;
    }
    case kP11Csi: {
      mutable_p11csi()->::protocol::flex_csi_p11::MergeFrom(from.p11csi());
      break;
    }
    case kP20Csi: {
      mutable_p20csi()->::protocol::flex_csi_p20::MergeFrom(from.p20csi());
      break;
    }
    case kP21Csi: {
      mutable_p21csi()->::protocol::flex_csi_p21::MergeFrom(from.p21csi());
      break;
    }
    case kA12Csi: {
      mutable_a12csi()->::protocol::flex_csi_a12::MergeFrom(from.a12csi());
      break;
    }
    case kA22Csi: {
      mutable_a22csi()->::protocol::flex_csi_a22::MergeFrom(from.a22csi());
      break;
    }
    case kA20Csi: {
      mutable_a20csi()->::protocol::flex_csi_a20::MergeFrom(from.a20csi());
      break;
    }
    case kA30Csi: {
      mutable_a30csi()->::protocol::flex_csi_a30::MergeFrom(from.a30csi());
      break;
    }
    case kA31Csi: {
      mutable_a31csi()->::protocol::flex_csi_a31::MergeFrom(from.a31csi());
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_csi)
}

void flex_dl_csi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&serv_cell_index_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&serv_cell_index_) + sizeof(type_));
  clear_has_report();
}

flex_dl_csi::~flex_dl_csi() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_csi)
  SharedDtor();
}

void flex_dl_csi::SharedDtor() {
  if (has_report()) {
    clear_report();
  }
}

void flex_dl_csi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_csi::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_csi& flex_dl_csi::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_csi* flex_dl_csi::New(::google::protobuf::Arena* arena) const {
  flex_dl_csi* n = new flex_dl_csi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_csi::clear_report() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flex_dl_csi)
  switch (report_case()) {
    case kP10Csi: {
      delete report_.p10csi_;
      break;
    }
    case kP11Csi: {
      delete report_.p11csi_;
      break;
    }
    case kP20Csi: {
      delete report_.p20csi_;
      break;
    }
    case kP21Csi: {
      delete report_.p21csi_;
      break;
    }
    case kA12Csi: {
      delete report_.a12csi_;
      break;
    }
    case kA22Csi: {
      delete report_.a22csi_;
      break;
    }
    case kA20Csi: {
      delete report_.a20csi_;
      break;
    }
    case kA30Csi: {
      delete report_.a30csi_;
      break;
    }
    case kA31Csi: {
      delete report_.a31csi_;
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPORT_NOT_SET;
}


void flex_dl_csi::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_csi)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&serv_cell_index_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serv_cell_index_) + sizeof(type_));
  }
  clear_report();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_csi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_csi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 serv_cell_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_serv_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serv_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_csi_type_IsValid(value)) {
            set_type(static_cast< ::protocol::flex_csi_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_p10 p10csi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p10csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_p11 p11csi = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p11csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_p20 p20csi = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p20csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_p21 p21csi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p21csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_a12 a12csi = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a12csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_a22 a22csi = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a22csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_a20 a20csi = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a20csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_a30 a30csi = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a30csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_csi_a31 a31csi = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a31csi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_csi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_csi)
  return false;
#undef DO_
}

void flex_dl_csi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_csi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 serv_cell_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serv_cell_index(), output);
  }

  // optional uint32 ri = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ri(), output);
  }

  // optional .protocol.flex_csi_type type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  switch (report_case()) {
    case kP10Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *report_.p10csi_, output);
      break;
    case kP11Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *report_.p11csi_, output);
      break;
    case kP20Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *report_.p20csi_, output);
      break;
    case kP21Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *report_.p21csi_, output);
      break;
    case kA12Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *report_.a12csi_, output);
      break;
    case kA22Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *report_.a22csi_, output);
      break;
    case kA20Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *report_.a20csi_, output);
      break;
    case kA30Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *report_.a30csi_, output);
      break;
    case kA31Csi:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *report_.a31csi_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_csi)
}

::google::protobuf::uint8* flex_dl_csi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_csi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 serv_cell_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serv_cell_index(), target);
  }

  // optional uint32 ri = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ri(), target);
  }

  // optional .protocol.flex_csi_type type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  switch (report_case()) {
    case kP10Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *report_.p10csi_, deterministic, target);
      break;
    case kP11Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *report_.p11csi_, deterministic, target);
      break;
    case kP20Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *report_.p20csi_, deterministic, target);
      break;
    case kP21Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *report_.p21csi_, deterministic, target);
      break;
    case kA12Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *report_.a12csi_, deterministic, target);
      break;
    case kA22Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *report_.a22csi_, deterministic, target);
      break;
    case kA20Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *report_.a20csi_, deterministic, target);
      break;
    case kA30Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *report_.a30csi_, deterministic, target);
      break;
    case kA31Csi:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *report_.a31csi_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_csi)
  return target;
}

size_t flex_dl_csi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_csi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 serv_cell_index = 1;
    if (has_serv_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serv_cell_index());
    }

    // optional uint32 ri = 2;
    if (has_ri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ri());
    }

    // optional .protocol.flex_csi_type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  switch (report_case()) {
    // optional .protocol.flex_csi_p10 p10csi = 4;
    case kP10Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.p10csi_);
      break;
    }
    // optional .protocol.flex_csi_p11 p11csi = 5;
    case kP11Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.p11csi_);
      break;
    }
    // optional .protocol.flex_csi_p20 p20csi = 6;
    case kP20Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.p20csi_);
      break;
    }
    // optional .protocol.flex_csi_p21 p21csi = 7;
    case kP21Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.p21csi_);
      break;
    }
    // optional .protocol.flex_csi_a12 a12csi = 8;
    case kA12Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.a12csi_);
      break;
    }
    // optional .protocol.flex_csi_a22 a22csi = 9;
    case kA22Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.a22csi_);
      break;
    }
    // optional .protocol.flex_csi_a20 a20csi = 10;
    case kA20Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.a20csi_);
      break;
    }
    // optional .protocol.flex_csi_a30 a30csi = 11;
    case kA30Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.a30csi_);
      break;
    }
    // optional .protocol.flex_csi_a31 a31csi = 12;
    case kA31Csi: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *report_.a31csi_);
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_csi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_csi)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_csi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_csi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_csi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_csi)
    MergeFrom(*source);
  }
}

void flex_dl_csi::MergeFrom(const flex_dl_csi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_csi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      ri_ = from.ri_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.report_case()) {
    case kP10Csi: {
      mutable_p10csi()->::protocol::flex_csi_p10::MergeFrom(from.p10csi());
      break;
    }
    case kP11Csi: {
      mutable_p11csi()->::protocol::flex_csi_p11::MergeFrom(from.p11csi());
      break;
    }
    case kP20Csi: {
      mutable_p20csi()->::protocol::flex_csi_p20::MergeFrom(from.p20csi());
      break;
    }
    case kP21Csi: {
      mutable_p21csi()->::protocol::flex_csi_p21::MergeFrom(from.p21csi());
      break;
    }
    case kA12Csi: {
      mutable_a12csi()->::protocol::flex_csi_a12::MergeFrom(from.a12csi());
      break;
    }
    case kA22Csi: {
      mutable_a22csi()->::protocol::flex_csi_a22::MergeFrom(from.a22csi());
      break;
    }
    case kA20Csi: {
      mutable_a20csi()->::protocol::flex_csi_a20::MergeFrom(from.a20csi());
      break;
    }
    case kA30Csi: {
      mutable_a30csi()->::protocol::flex_csi_a30::MergeFrom(from.a30csi());
      break;
    }
    case kA31Csi: {
      mutable_a31csi()->::protocol::flex_csi_a31::MergeFrom(from.a31csi());
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
}

void flex_dl_csi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_csi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_csi::CopyFrom(const flex_dl_csi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_csi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_csi::IsInitialized() const {
  return true;
}

void flex_dl_csi::Swap(flex_dl_csi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_csi::InternalSwap(flex_dl_csi* other) {
  std::swap(serv_cell_index_, other->serv_cell_index_);
  std::swap(ri_, other->ri_);
  std::swap(type_, other->type_);
  std::swap(report_, other->report_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_csi::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_csi

// optional uint32 serv_cell_index = 1;
bool flex_dl_csi::has_serv_cell_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_csi::set_has_serv_cell_index() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_csi::clear_has_serv_cell_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_csi::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  clear_has_serv_cell_index();
}
::google::protobuf::uint32 flex_dl_csi::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.serv_cell_index)
  return serv_cell_index_;
}
void flex_dl_csi::set_serv_cell_index(::google::protobuf::uint32 value) {
  set_has_serv_cell_index();
  serv_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_csi.serv_cell_index)
}

// optional uint32 ri = 2;
bool flex_dl_csi::has_ri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_dl_csi::set_has_ri() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_dl_csi::clear_has_ri() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_dl_csi::clear_ri() {
  ri_ = 0u;
  clear_has_ri();
}
::google::protobuf::uint32 flex_dl_csi::ri() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.ri)
  return ri_;
}
void flex_dl_csi::set_ri(::google::protobuf::uint32 value) {
  set_has_ri();
  ri_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_csi.ri)
}

// optional .protocol.flex_csi_type type = 3;
bool flex_dl_csi::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_dl_csi::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_dl_csi::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_dl_csi::clear_type() {
  type_ = 0;
  clear_has_type();
}
::protocol::flex_csi_type flex_dl_csi::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.type)
  return static_cast< ::protocol::flex_csi_type >(type_);
}
void flex_dl_csi::set_type(::protocol::flex_csi_type value) {
  assert(::protocol::flex_csi_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_csi.type)
}

// optional .protocol.flex_csi_p10 p10csi = 4;
bool flex_dl_csi::has_p10csi() const {
  return report_case() == kP10Csi;
}
void flex_dl_csi::set_has_p10csi() {
  _oneof_case_[0] = kP10Csi;
}
void flex_dl_csi::clear_p10csi() {
  if (has_p10csi()) {
    delete report_.p10csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_p10& flex_dl_csi::p10csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.p10csi)
  return has_p10csi()
      ? *report_.p10csi_
      : ::protocol::flex_csi_p10::default_instance();
}
::protocol::flex_csi_p10* flex_dl_csi::mutable_p10csi() {
  if (!has_p10csi()) {
    clear_report();
    set_has_p10csi();
    report_.p10csi_ = new ::protocol::flex_csi_p10;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.p10csi)
  return report_.p10csi_;
}
::protocol::flex_csi_p10* flex_dl_csi::release_p10csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.p10csi)
  if (has_p10csi()) {
    clear_has_report();
    ::protocol::flex_csi_p10* temp = report_.p10csi_;
    report_.p10csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_p10csi(::protocol::flex_csi_p10* p10csi) {
  clear_report();
  if (p10csi) {
    set_has_p10csi();
    report_.p10csi_ = p10csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p10csi)
}

// optional .protocol.flex_csi_p11 p11csi = 5;
bool flex_dl_csi::has_p11csi() const {
  return report_case() == kP11Csi;
}
void flex_dl_csi::set_has_p11csi() {
  _oneof_case_[0] = kP11Csi;
}
void flex_dl_csi::clear_p11csi() {
  if (has_p11csi()) {
    delete report_.p11csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_p11& flex_dl_csi::p11csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.p11csi)
  return has_p11csi()
      ? *report_.p11csi_
      : ::protocol::flex_csi_p11::default_instance();
}
::protocol::flex_csi_p11* flex_dl_csi::mutable_p11csi() {
  if (!has_p11csi()) {
    clear_report();
    set_has_p11csi();
    report_.p11csi_ = new ::protocol::flex_csi_p11;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.p11csi)
  return report_.p11csi_;
}
::protocol::flex_csi_p11* flex_dl_csi::release_p11csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.p11csi)
  if (has_p11csi()) {
    clear_has_report();
    ::protocol::flex_csi_p11* temp = report_.p11csi_;
    report_.p11csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_p11csi(::protocol::flex_csi_p11* p11csi) {
  clear_report();
  if (p11csi) {
    set_has_p11csi();
    report_.p11csi_ = p11csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p11csi)
}

// optional .protocol.flex_csi_p20 p20csi = 6;
bool flex_dl_csi::has_p20csi() const {
  return report_case() == kP20Csi;
}
void flex_dl_csi::set_has_p20csi() {
  _oneof_case_[0] = kP20Csi;
}
void flex_dl_csi::clear_p20csi() {
  if (has_p20csi()) {
    delete report_.p20csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_p20& flex_dl_csi::p20csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.p20csi)
  return has_p20csi()
      ? *report_.p20csi_
      : ::protocol::flex_csi_p20::default_instance();
}
::protocol::flex_csi_p20* flex_dl_csi::mutable_p20csi() {
  if (!has_p20csi()) {
    clear_report();
    set_has_p20csi();
    report_.p20csi_ = new ::protocol::flex_csi_p20;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.p20csi)
  return report_.p20csi_;
}
::protocol::flex_csi_p20* flex_dl_csi::release_p20csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.p20csi)
  if (has_p20csi()) {
    clear_has_report();
    ::protocol::flex_csi_p20* temp = report_.p20csi_;
    report_.p20csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_p20csi(::protocol::flex_csi_p20* p20csi) {
  clear_report();
  if (p20csi) {
    set_has_p20csi();
    report_.p20csi_ = p20csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p20csi)
}

// optional .protocol.flex_csi_p21 p21csi = 7;
bool flex_dl_csi::has_p21csi() const {
  return report_case() == kP21Csi;
}
void flex_dl_csi::set_has_p21csi() {
  _oneof_case_[0] = kP21Csi;
}
void flex_dl_csi::clear_p21csi() {
  if (has_p21csi()) {
    delete report_.p21csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_p21& flex_dl_csi::p21csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.p21csi)
  return has_p21csi()
      ? *report_.p21csi_
      : ::protocol::flex_csi_p21::default_instance();
}
::protocol::flex_csi_p21* flex_dl_csi::mutable_p21csi() {
  if (!has_p21csi()) {
    clear_report();
    set_has_p21csi();
    report_.p21csi_ = new ::protocol::flex_csi_p21;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.p21csi)
  return report_.p21csi_;
}
::protocol::flex_csi_p21* flex_dl_csi::release_p21csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.p21csi)
  if (has_p21csi()) {
    clear_has_report();
    ::protocol::flex_csi_p21* temp = report_.p21csi_;
    report_.p21csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_p21csi(::protocol::flex_csi_p21* p21csi) {
  clear_report();
  if (p21csi) {
    set_has_p21csi();
    report_.p21csi_ = p21csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p21csi)
}

// optional .protocol.flex_csi_a12 a12csi = 8;
bool flex_dl_csi::has_a12csi() const {
  return report_case() == kA12Csi;
}
void flex_dl_csi::set_has_a12csi() {
  _oneof_case_[0] = kA12Csi;
}
void flex_dl_csi::clear_a12csi() {
  if (has_a12csi()) {
    delete report_.a12csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_a12& flex_dl_csi::a12csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.a12csi)
  return has_a12csi()
      ? *report_.a12csi_
      : ::protocol::flex_csi_a12::default_instance();
}
::protocol::flex_csi_a12* flex_dl_csi::mutable_a12csi() {
  if (!has_a12csi()) {
    clear_report();
    set_has_a12csi();
    report_.a12csi_ = new ::protocol::flex_csi_a12;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.a12csi)
  return report_.a12csi_;
}
::protocol::flex_csi_a12* flex_dl_csi::release_a12csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.a12csi)
  if (has_a12csi()) {
    clear_has_report();
    ::protocol::flex_csi_a12* temp = report_.a12csi_;
    report_.a12csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_a12csi(::protocol::flex_csi_a12* a12csi) {
  clear_report();
  if (a12csi) {
    set_has_a12csi();
    report_.a12csi_ = a12csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a12csi)
}

// optional .protocol.flex_csi_a22 a22csi = 9;
bool flex_dl_csi::has_a22csi() const {
  return report_case() == kA22Csi;
}
void flex_dl_csi::set_has_a22csi() {
  _oneof_case_[0] = kA22Csi;
}
void flex_dl_csi::clear_a22csi() {
  if (has_a22csi()) {
    delete report_.a22csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_a22& flex_dl_csi::a22csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.a22csi)
  return has_a22csi()
      ? *report_.a22csi_
      : ::protocol::flex_csi_a22::default_instance();
}
::protocol::flex_csi_a22* flex_dl_csi::mutable_a22csi() {
  if (!has_a22csi()) {
    clear_report();
    set_has_a22csi();
    report_.a22csi_ = new ::protocol::flex_csi_a22;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.a22csi)
  return report_.a22csi_;
}
::protocol::flex_csi_a22* flex_dl_csi::release_a22csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.a22csi)
  if (has_a22csi()) {
    clear_has_report();
    ::protocol::flex_csi_a22* temp = report_.a22csi_;
    report_.a22csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_a22csi(::protocol::flex_csi_a22* a22csi) {
  clear_report();
  if (a22csi) {
    set_has_a22csi();
    report_.a22csi_ = a22csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a22csi)
}

// optional .protocol.flex_csi_a20 a20csi = 10;
bool flex_dl_csi::has_a20csi() const {
  return report_case() == kA20Csi;
}
void flex_dl_csi::set_has_a20csi() {
  _oneof_case_[0] = kA20Csi;
}
void flex_dl_csi::clear_a20csi() {
  if (has_a20csi()) {
    delete report_.a20csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_a20& flex_dl_csi::a20csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.a20csi)
  return has_a20csi()
      ? *report_.a20csi_
      : ::protocol::flex_csi_a20::default_instance();
}
::protocol::flex_csi_a20* flex_dl_csi::mutable_a20csi() {
  if (!has_a20csi()) {
    clear_report();
    set_has_a20csi();
    report_.a20csi_ = new ::protocol::flex_csi_a20;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.a20csi)
  return report_.a20csi_;
}
::protocol::flex_csi_a20* flex_dl_csi::release_a20csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.a20csi)
  if (has_a20csi()) {
    clear_has_report();
    ::protocol::flex_csi_a20* temp = report_.a20csi_;
    report_.a20csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_a20csi(::protocol::flex_csi_a20* a20csi) {
  clear_report();
  if (a20csi) {
    set_has_a20csi();
    report_.a20csi_ = a20csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a20csi)
}

// optional .protocol.flex_csi_a30 a30csi = 11;
bool flex_dl_csi::has_a30csi() const {
  return report_case() == kA30Csi;
}
void flex_dl_csi::set_has_a30csi() {
  _oneof_case_[0] = kA30Csi;
}
void flex_dl_csi::clear_a30csi() {
  if (has_a30csi()) {
    delete report_.a30csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_a30& flex_dl_csi::a30csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.a30csi)
  return has_a30csi()
      ? *report_.a30csi_
      : ::protocol::flex_csi_a30::default_instance();
}
::protocol::flex_csi_a30* flex_dl_csi::mutable_a30csi() {
  if (!has_a30csi()) {
    clear_report();
    set_has_a30csi();
    report_.a30csi_ = new ::protocol::flex_csi_a30;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.a30csi)
  return report_.a30csi_;
}
::protocol::flex_csi_a30* flex_dl_csi::release_a30csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.a30csi)
  if (has_a30csi()) {
    clear_has_report();
    ::protocol::flex_csi_a30* temp = report_.a30csi_;
    report_.a30csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_a30csi(::protocol::flex_csi_a30* a30csi) {
  clear_report();
  if (a30csi) {
    set_has_a30csi();
    report_.a30csi_ = a30csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a30csi)
}

// optional .protocol.flex_csi_a31 a31csi = 12;
bool flex_dl_csi::has_a31csi() const {
  return report_case() == kA31Csi;
}
void flex_dl_csi::set_has_a31csi() {
  _oneof_case_[0] = kA31Csi;
}
void flex_dl_csi::clear_a31csi() {
  if (has_a31csi()) {
    delete report_.a31csi_;
    clear_has_report();
  }
}
 const ::protocol::flex_csi_a31& flex_dl_csi::a31csi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_csi.a31csi)
  return has_a31csi()
      ? *report_.a31csi_
      : ::protocol::flex_csi_a31::default_instance();
}
::protocol::flex_csi_a31* flex_dl_csi::mutable_a31csi() {
  if (!has_a31csi()) {
    clear_report();
    set_has_a31csi();
    report_.a31csi_ = new ::protocol::flex_csi_a31;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_csi.a31csi)
  return report_.a31csi_;
}
::protocol::flex_csi_a31* flex_dl_csi::release_a31csi() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_csi.a31csi)
  if (has_a31csi()) {
    clear_has_report();
    ::protocol::flex_csi_a31* temp = report_.a31csi_;
    report_.a31csi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void flex_dl_csi::set_allocated_a31csi(::protocol::flex_csi_a31* a31csi) {
  clear_report();
  if (a31csi) {
    set_has_a31csi();
    report_.a31csi_ = a31csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a31csi)
}

bool flex_dl_csi::has_report() const {
  return report_case() != REPORT_NOT_SET;
}
void flex_dl_csi::clear_has_report() {
  _oneof_case_[0] = REPORT_NOT_SET;
}
flex_dl_csi::ReportCase flex_dl_csi::report_case() const {
  return flex_dl_csi::ReportCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_dl_cqi_report::kSfnSnFieldNumber;
const int flex_dl_cqi_report::kCsiReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_dl_cqi_report::flex_dl_cqi_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_dl_cqi_report)
}
flex_dl_cqi_report::flex_dl_cqi_report(const flex_dl_cqi_report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      csi_report_(from.csi_report_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sfn_sn_ = from.sfn_sn_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_cqi_report)
}

void flex_dl_cqi_report::SharedCtor() {
  _cached_size_ = 0;
  sfn_sn_ = 0u;
}

flex_dl_cqi_report::~flex_dl_cqi_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_cqi_report)
  SharedDtor();
}

void flex_dl_cqi_report::SharedDtor() {
}

void flex_dl_cqi_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_dl_cqi_report::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_dl_cqi_report& flex_dl_cqi_report::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_dl_cqi_report* flex_dl_cqi_report::New(::google::protobuf::Arena* arena) const {
  flex_dl_cqi_report* n = new flex_dl_cqi_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_dl_cqi_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_cqi_report)
  csi_report_.Clear();
  sfn_sn_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_dl_cqi_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_dl_cqi_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sfn_sn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sfn_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_dl_csi csi_report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_csi_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_dl_cqi_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_dl_cqi_report)
  return false;
#undef DO_
}

void flex_dl_cqi_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_dl_cqi_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sfn_sn(), output);
  }

  // repeated .protocol.flex_dl_csi csi_report = 2;
  for (unsigned int i = 0, n = this->csi_report_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->csi_report(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_dl_cqi_report)
}

::google::protobuf::uint8* flex_dl_cqi_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_cqi_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sfn_sn(), target);
  }

  // repeated .protocol.flex_dl_csi csi_report = 2;
  for (unsigned int i = 0, n = this->csi_report_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->csi_report(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_cqi_report)
  return target;
}

size_t flex_dl_cqi_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_cqi_report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_dl_csi csi_report = 2;
  {
    unsigned int count = this->csi_report_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->csi_report(i));
    }
  }

  // optional uint32 sfn_sn = 1;
  if (has_sfn_sn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sfn_sn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_dl_cqi_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_cqi_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_dl_cqi_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_cqi_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_cqi_report)
    MergeFrom(*source);
  }
}

void flex_dl_cqi_report::MergeFrom(const flex_dl_cqi_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  csi_report_.MergeFrom(from.csi_report_);
  if (from.has_sfn_sn()) {
    set_sfn_sn(from.sfn_sn());
  }
}

void flex_dl_cqi_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_cqi_report::CopyFrom(const flex_dl_cqi_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_cqi_report::IsInitialized() const {
  return true;
}

void flex_dl_cqi_report::Swap(flex_dl_cqi_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_dl_cqi_report::InternalSwap(flex_dl_cqi_report* other) {
  csi_report_.InternalSwap(&other->csi_report_);
  std::swap(sfn_sn_, other->sfn_sn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_dl_cqi_report::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_dl_cqi_report

// optional uint32 sfn_sn = 1;
bool flex_dl_cqi_report::has_sfn_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_dl_cqi_report::set_has_sfn_sn() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_dl_cqi_report::clear_has_sfn_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_cqi_report::clear_sfn_sn() {
  sfn_sn_ = 0u;
  clear_has_sfn_sn();
}
::google::protobuf::uint32 flex_dl_cqi_report::sfn_sn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_cqi_report.sfn_sn)
  return sfn_sn_;
}
void flex_dl_cqi_report::set_sfn_sn(::google::protobuf::uint32 value) {
  set_has_sfn_sn();
  sfn_sn_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_dl_cqi_report.sfn_sn)
}

// repeated .protocol.flex_dl_csi csi_report = 2;
int flex_dl_cqi_report::csi_report_size() const {
  return csi_report_.size();
}
void flex_dl_cqi_report::clear_csi_report() {
  csi_report_.Clear();
}
const ::protocol::flex_dl_csi& flex_dl_cqi_report::csi_report(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_cqi_report.csi_report)
  return csi_report_.Get(index);
}
::protocol::flex_dl_csi* flex_dl_cqi_report::mutable_csi_report(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_cqi_report.csi_report)
  return csi_report_.Mutable(index);
}
::protocol::flex_dl_csi* flex_dl_cqi_report::add_csi_report() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_cqi_report.csi_report)
  return csi_report_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_csi >*
flex_dl_cqi_report::mutable_csi_report() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_cqi_report.csi_report)
  return &csi_report_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_dl_csi >&
flex_dl_cqi_report::csi_report() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_cqi_report.csi_report)
  return csi_report_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_paging_info::kPagingIndexFieldNumber;
const int flex_paging_info::kPagingMessageSizeFieldNumber;
const int flex_paging_info::kPagingSubframeFieldNumber;
const int flex_paging_info::kCarrierIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_paging_info::flex_paging_info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_paging_info)
}
flex_paging_info::flex_paging_info(const flex_paging_info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&paging_index_, &from.paging_index_,
    reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&paging_index_) + sizeof(carrier_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_paging_info)
}

void flex_paging_info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&paging_index_, 0, reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&paging_index_) + sizeof(carrier_index_));
}

flex_paging_info::~flex_paging_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_paging_info)
  SharedDtor();
}

void flex_paging_info::SharedDtor() {
}

void flex_paging_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_paging_info::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_paging_info& flex_paging_info::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_paging_info* flex_paging_info::New(::google::protobuf::Arena* arena) const {
  flex_paging_info* n = new flex_paging_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_paging_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_paging_info)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&paging_index_, 0, reinterpret_cast<char*>(&carrier_index_) -
      reinterpret_cast<char*>(&paging_index_) + sizeof(carrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_paging_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_paging_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 paging_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_paging_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paging_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 paging_message_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_paging_message_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paging_message_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 paging_subframe = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_paging_subframe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paging_subframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 carrier_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_carrier_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_paging_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_paging_info)
  return false;
#undef DO_
}

void flex_paging_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_paging_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 paging_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->paging_index(), output);
  }

  // optional uint32 paging_message_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->paging_message_size(), output);
  }

  // optional uint32 paging_subframe = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->paging_subframe(), output);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->carrier_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_paging_info)
}

::google::protobuf::uint8* flex_paging_info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_paging_info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 paging_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->paging_index(), target);
  }

  // optional uint32 paging_message_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->paging_message_size(), target);
  }

  // optional uint32 paging_subframe = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->paging_subframe(), target);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->carrier_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_paging_info)
  return target;
}

size_t flex_paging_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_paging_info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 paging_index = 1;
    if (has_paging_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paging_index());
    }

    // optional uint32 paging_message_size = 2;
    if (has_paging_message_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paging_message_size());
    }

    // optional uint32 paging_subframe = 3;
    if (has_paging_subframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paging_subframe());
    }

    // optional uint32 carrier_index = 4;
    if (has_carrier_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_paging_info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_paging_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_paging_info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_paging_info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_paging_info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_paging_info)
    MergeFrom(*source);
  }
}

void flex_paging_info::MergeFrom(const flex_paging_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_paging_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      paging_index_ = from.paging_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      paging_message_size_ = from.paging_message_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      paging_subframe_ = from.paging_subframe_;
    }
    if (cached_has_bits & 0x00000008u) {
      carrier_index_ = from.carrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_paging_info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_paging_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_paging_info::CopyFrom(const flex_paging_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_paging_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_paging_info::IsInitialized() const {
  return true;
}

void flex_paging_info::Swap(flex_paging_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_paging_info::InternalSwap(flex_paging_info* other) {
  std::swap(paging_index_, other->paging_index_);
  std::swap(paging_message_size_, other->paging_message_size_);
  std::swap(paging_subframe_, other->paging_subframe_);
  std::swap(carrier_index_, other->carrier_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_paging_info::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_paging_info

// optional uint32 paging_index = 1;
bool flex_paging_info::has_paging_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_paging_info::set_has_paging_index() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_paging_info::clear_has_paging_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_paging_info::clear_paging_index() {
  paging_index_ = 0u;
  clear_has_paging_index();
}
::google::protobuf::uint32 flex_paging_info::paging_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_paging_info.paging_index)
  return paging_index_;
}
void flex_paging_info::set_paging_index(::google::protobuf::uint32 value) {
  set_has_paging_index();
  paging_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_paging_info.paging_index)
}

// optional uint32 paging_message_size = 2;
bool flex_paging_info::has_paging_message_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_paging_info::set_has_paging_message_size() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_paging_info::clear_has_paging_message_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_paging_info::clear_paging_message_size() {
  paging_message_size_ = 0u;
  clear_has_paging_message_size();
}
::google::protobuf::uint32 flex_paging_info::paging_message_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_paging_info.paging_message_size)
  return paging_message_size_;
}
void flex_paging_info::set_paging_message_size(::google::protobuf::uint32 value) {
  set_has_paging_message_size();
  paging_message_size_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_paging_info.paging_message_size)
}

// optional uint32 paging_subframe = 3;
bool flex_paging_info::has_paging_subframe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_paging_info::set_has_paging_subframe() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_paging_info::clear_has_paging_subframe() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_paging_info::clear_paging_subframe() {
  paging_subframe_ = 0u;
  clear_has_paging_subframe();
}
::google::protobuf::uint32 flex_paging_info::paging_subframe() const {
  // @@protoc_insertion_point(field_get:protocol.flex_paging_info.paging_subframe)
  return paging_subframe_;
}
void flex_paging_info::set_paging_subframe(::google::protobuf::uint32 value) {
  set_has_paging_subframe();
  paging_subframe_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_paging_info.paging_subframe)
}

// optional uint32 carrier_index = 4;
bool flex_paging_info::has_carrier_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_paging_info::set_has_carrier_index() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_paging_info::clear_has_carrier_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_paging_info::clear_carrier_index() {
  carrier_index_ = 0u;
  clear_has_carrier_index();
}
::google::protobuf::uint32 flex_paging_info::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_paging_info.carrier_index)
  return carrier_index_;
}
void flex_paging_info::set_carrier_index(::google::protobuf::uint32 value) {
  set_has_carrier_index();
  carrier_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_paging_info.carrier_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_paging_buffer_report::kPagingInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_paging_buffer_report::flex_paging_buffer_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_paging_buffer_report)
}
flex_paging_buffer_report::flex_paging_buffer_report(const flex_paging_buffer_report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      paging_info_(from.paging_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_paging_buffer_report)
}

void flex_paging_buffer_report::SharedCtor() {
  _cached_size_ = 0;
}

flex_paging_buffer_report::~flex_paging_buffer_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_paging_buffer_report)
  SharedDtor();
}

void flex_paging_buffer_report::SharedDtor() {
}

void flex_paging_buffer_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_paging_buffer_report::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_paging_buffer_report& flex_paging_buffer_report::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_paging_buffer_report* flex_paging_buffer_report::New(::google::protobuf::Arena* arena) const {
  flex_paging_buffer_report* n = new flex_paging_buffer_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_paging_buffer_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_paging_buffer_report)
  paging_info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_paging_buffer_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_paging_buffer_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.flex_paging_info paging_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paging_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_paging_buffer_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_paging_buffer_report)
  return false;
#undef DO_
}

void flex_paging_buffer_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_paging_buffer_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_paging_info paging_info = 1;
  for (unsigned int i = 0, n = this->paging_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->paging_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_paging_buffer_report)
}

::google::protobuf::uint8* flex_paging_buffer_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_paging_buffer_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_paging_info paging_info = 1;
  for (unsigned int i = 0, n = this->paging_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->paging_info(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_paging_buffer_report)
  return target;
}

size_t flex_paging_buffer_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_paging_buffer_report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_paging_info paging_info = 1;
  {
    unsigned int count = this->paging_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paging_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_paging_buffer_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_paging_buffer_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_paging_buffer_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_paging_buffer_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_paging_buffer_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_paging_buffer_report)
    MergeFrom(*source);
  }
}

void flex_paging_buffer_report::MergeFrom(const flex_paging_buffer_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_paging_buffer_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paging_info_.MergeFrom(from.paging_info_);
}

void flex_paging_buffer_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_paging_buffer_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_paging_buffer_report::CopyFrom(const flex_paging_buffer_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_paging_buffer_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_paging_buffer_report::IsInitialized() const {
  return true;
}

void flex_paging_buffer_report::Swap(flex_paging_buffer_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_paging_buffer_report::InternalSwap(flex_paging_buffer_report* other) {
  paging_info_.InternalSwap(&other->paging_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_paging_buffer_report::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_paging_buffer_report

// repeated .protocol.flex_paging_info paging_info = 1;
int flex_paging_buffer_report::paging_info_size() const {
  return paging_info_.size();
}
void flex_paging_buffer_report::clear_paging_info() {
  paging_info_.Clear();
}
const ::protocol::flex_paging_info& flex_paging_buffer_report::paging_info(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_paging_buffer_report.paging_info)
  return paging_info_.Get(index);
}
::protocol::flex_paging_info* flex_paging_buffer_report::mutable_paging_info(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_paging_buffer_report.paging_info)
  return paging_info_.Mutable(index);
}
::protocol::flex_paging_info* flex_paging_buffer_report::add_paging_info() {
  // @@protoc_insertion_point(field_add:protocol.flex_paging_buffer_report.paging_info)
  return paging_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_paging_info >*
flex_paging_buffer_report::mutable_paging_info() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_paging_buffer_report.paging_info)
  return &paging_info_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_paging_info >&
flex_paging_buffer_report::paging_info() const {
  // @@protoc_insertion_point(field_list:protocol.flex_paging_buffer_report.paging_info)
  return paging_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_cqi::kTypeFieldNumber;
const int flex_ul_cqi::kSinrFieldNumber;
const int flex_ul_cqi::kServCellIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_cqi::flex_ul_cqi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_cqi)
}
flex_ul_cqi::flex_ul_cqi(const flex_ul_cqi& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sinr_(from.sinr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&serv_cell_index_) -
    reinterpret_cast<char*>(&type_) + sizeof(serv_cell_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_cqi)
}

void flex_ul_cqi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&serv_cell_index_) -
    reinterpret_cast<char*>(&type_) + sizeof(serv_cell_index_));
}

flex_ul_cqi::~flex_ul_cqi() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_cqi)
  SharedDtor();
}

void flex_ul_cqi::SharedDtor() {
}

void flex_ul_cqi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_cqi::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_cqi& flex_ul_cqi::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_cqi* flex_ul_cqi::New(::google::protobuf::Arena* arena) const {
  flex_ul_cqi* n = new flex_ul_cqi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_cqi::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_cqi)
  sinr_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&serv_cell_index_) -
      reinterpret_cast<char*>(&type_) + sizeof(serv_cell_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_cqi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_cqi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_ul_cqi_type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::flex_ul_cqi_type_IsValid(value)) {
            set_type(static_cast< ::protocol::flex_ul_cqi_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 sinr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_sinr())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sinr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 serv_cell_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_serv_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serv_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_cqi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_cqi)
  return false;
#undef DO_
}

void flex_ul_cqi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_cqi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_ul_cqi_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 sinr = 2;
  for (int i = 0, n = this->sinr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->sinr(i), output);
  }

  // optional uint32 serv_cell_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serv_cell_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_cqi)
}

::google::protobuf::uint8* flex_ul_cqi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_cqi)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_ul_cqi_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated uint32 sinr = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->sinr_, target);

  // optional uint32 serv_cell_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serv_cell_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_cqi)
  return target;
}

size_t flex_ul_cqi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_cqi)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 sinr = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sinr_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->sinr_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_ul_cqi_type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 serv_cell_index = 3;
    if (has_serv_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serv_cell_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_cqi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_cqi* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_cqi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_cqi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_cqi)
    MergeFrom(*source);
  }
}

void flex_ul_cqi::MergeFrom(const flex_ul_cqi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sinr_.MergeFrom(from.sinr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_cqi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_cqi::CopyFrom(const flex_ul_cqi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_cqi::IsInitialized() const {
  return true;
}

void flex_ul_cqi::Swap(flex_ul_cqi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_cqi::InternalSwap(flex_ul_cqi* other) {
  sinr_.InternalSwap(&other->sinr_);
  std::swap(type_, other->type_);
  std::swap(serv_cell_index_, other->serv_cell_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_cqi::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_cqi

// optional .protocol.flex_ul_cqi_type type = 1;
bool flex_ul_cqi::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_cqi::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_cqi::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_cqi::clear_type() {
  type_ = 0;
  clear_has_type();
}
::protocol::flex_ul_cqi_type flex_ul_cqi::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_cqi.type)
  return static_cast< ::protocol::flex_ul_cqi_type >(type_);
}
void flex_ul_cqi::set_type(::protocol::flex_ul_cqi_type value) {
  assert(::protocol::flex_ul_cqi_type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_cqi.type)
}

// repeated uint32 sinr = 2;
int flex_ul_cqi::sinr_size() const {
  return sinr_.size();
}
void flex_ul_cqi::clear_sinr() {
  sinr_.Clear();
}
::google::protobuf::uint32 flex_ul_cqi::sinr(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_cqi.sinr)
  return sinr_.Get(index);
}
void flex_ul_cqi::set_sinr(int index, ::google::protobuf::uint32 value) {
  sinr_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_cqi.sinr)
}
void flex_ul_cqi::add_sinr(::google::protobuf::uint32 value) {
  sinr_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ul_cqi.sinr)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
flex_ul_cqi::sinr() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_cqi.sinr)
  return sinr_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
flex_ul_cqi::mutable_sinr() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_cqi.sinr)
  return &sinr_;
}

// optional uint32 serv_cell_index = 3;
bool flex_ul_cqi::has_serv_cell_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_ul_cqi::set_has_serv_cell_index() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_ul_cqi::clear_has_serv_cell_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ul_cqi::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  clear_has_serv_cell_index();
}
::google::protobuf::uint32 flex_ul_cqi::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_cqi.serv_cell_index)
  return serv_cell_index_;
}
void flex_ul_cqi::set_serv_cell_index(::google::protobuf::uint32 value) {
  set_has_serv_cell_index();
  serv_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_cqi.serv_cell_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_ul_cqi_report::kSfnSnFieldNumber;
const int flex_ul_cqi_report::kCqiMeasFieldNumber;
const int flex_ul_cqi_report::kPucchDbmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_ul_cqi_report::flex_ul_cqi_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_ul_cqi_report)
}
flex_ul_cqi_report::flex_ul_cqi_report(const flex_ul_cqi_report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cqi_meas_(from.cqi_meas_),
      pucch_dbm_(from.pucch_dbm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sfn_sn_ = from.sfn_sn_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_cqi_report)
}

void flex_ul_cqi_report::SharedCtor() {
  _cached_size_ = 0;
  sfn_sn_ = 0u;
}

flex_ul_cqi_report::~flex_ul_cqi_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_cqi_report)
  SharedDtor();
}

void flex_ul_cqi_report::SharedDtor() {
}

void flex_ul_cqi_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_ul_cqi_report::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_ul_cqi_report& flex_ul_cqi_report::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_ul_cqi_report* flex_ul_cqi_report::New(::google::protobuf::Arena* arena) const {
  flex_ul_cqi_report* n = new flex_ul_cqi_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_ul_cqi_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_cqi_report)
  cqi_meas_.Clear();
  pucch_dbm_.Clear();
  sfn_sn_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_ul_cqi_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_ul_cqi_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sfn_sn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sfn_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_ul_cqi cqi_meas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cqi_meas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pucch_dbm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_ul_cqi_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_ul_cqi_report)
  return false;
#undef DO_
}

void flex_ul_cqi_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_ul_cqi_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sfn_sn(), output);
  }

  // repeated .protocol.flex_ul_cqi cqi_meas = 2;
  for (unsigned int i = 0, n = this->cqi_meas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cqi_meas(i), output);
  }

  // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
  for (unsigned int i = 0, n = this->pucch_dbm_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pucch_dbm(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_ul_cqi_report)
}

::google::protobuf::uint8* flex_ul_cqi_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_cqi_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sfn_sn(), target);
  }

  // repeated .protocol.flex_ul_cqi cqi_meas = 2;
  for (unsigned int i = 0, n = this->cqi_meas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->cqi_meas(i), deterministic, target);
  }

  // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
  for (unsigned int i = 0, n = this->pucch_dbm_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->pucch_dbm(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_cqi_report)
  return target;
}

size_t flex_ul_cqi_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_cqi_report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_ul_cqi cqi_meas = 2;
  {
    unsigned int count = this->cqi_meas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cqi_meas(i));
    }
  }

  // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
  {
    unsigned int count = this->pucch_dbm_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pucch_dbm(i));
    }
  }

  // optional uint32 sfn_sn = 1;
  if (has_sfn_sn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sfn_sn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_ul_cqi_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_cqi_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_ul_cqi_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_cqi_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_cqi_report)
    MergeFrom(*source);
  }
}

void flex_ul_cqi_report::MergeFrom(const flex_ul_cqi_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cqi_meas_.MergeFrom(from.cqi_meas_);
  pucch_dbm_.MergeFrom(from.pucch_dbm_);
  if (from.has_sfn_sn()) {
    set_sfn_sn(from.sfn_sn());
  }
}

void flex_ul_cqi_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_cqi_report::CopyFrom(const flex_ul_cqi_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_cqi_report::IsInitialized() const {
  return true;
}

void flex_ul_cqi_report::Swap(flex_ul_cqi_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_ul_cqi_report::InternalSwap(flex_ul_cqi_report* other) {
  cqi_meas_.InternalSwap(&other->cqi_meas_);
  pucch_dbm_.InternalSwap(&other->pucch_dbm_);
  std::swap(sfn_sn_, other->sfn_sn_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_ul_cqi_report::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_ul_cqi_report

// optional uint32 sfn_sn = 1;
bool flex_ul_cqi_report::has_sfn_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_ul_cqi_report::set_has_sfn_sn() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_ul_cqi_report::clear_has_sfn_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_cqi_report::clear_sfn_sn() {
  sfn_sn_ = 0u;
  clear_has_sfn_sn();
}
::google::protobuf::uint32 flex_ul_cqi_report::sfn_sn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_cqi_report.sfn_sn)
  return sfn_sn_;
}
void flex_ul_cqi_report::set_sfn_sn(::google::protobuf::uint32 value) {
  set_has_sfn_sn();
  sfn_sn_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_ul_cqi_report.sfn_sn)
}

// repeated .protocol.flex_ul_cqi cqi_meas = 2;
int flex_ul_cqi_report::cqi_meas_size() const {
  return cqi_meas_.size();
}
void flex_ul_cqi_report::clear_cqi_meas() {
  cqi_meas_.Clear();
}
const ::protocol::flex_ul_cqi& flex_ul_cqi_report::cqi_meas(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_cqi_report.cqi_meas)
  return cqi_meas_.Get(index);
}
::protocol::flex_ul_cqi* flex_ul_cqi_report::mutable_cqi_meas(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_cqi_report.cqi_meas)
  return cqi_meas_.Mutable(index);
}
::protocol::flex_ul_cqi* flex_ul_cqi_report::add_cqi_meas() {
  // @@protoc_insertion_point(field_add:protocol.flex_ul_cqi_report.cqi_meas)
  return cqi_meas_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_ul_cqi >*
flex_ul_cqi_report::mutable_cqi_meas() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_cqi_report.cqi_meas)
  return &cqi_meas_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_ul_cqi >&
flex_ul_cqi_report::cqi_meas() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_cqi_report.cqi_meas)
  return cqi_meas_;
}

// repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
int flex_ul_cqi_report::pucch_dbm_size() const {
  return pucch_dbm_.size();
}
void flex_ul_cqi_report::clear_pucch_dbm() {
  pucch_dbm_.Clear();
}
const ::protocol::flex_pucch_dbm& flex_ul_cqi_report::pucch_dbm(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_cqi_report.pucch_dbm)
  return pucch_dbm_.Get(index);
}
::protocol::flex_pucch_dbm* flex_ul_cqi_report::mutable_pucch_dbm(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_cqi_report.pucch_dbm)
  return pucch_dbm_.Mutable(index);
}
::protocol::flex_pucch_dbm* flex_ul_cqi_report::add_pucch_dbm() {
  // @@protoc_insertion_point(field_add:protocol.flex_ul_cqi_report.pucch_dbm)
  return pucch_dbm_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_pucch_dbm >*
flex_ul_cqi_report::mutable_pucch_dbm() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_cqi_report.pucch_dbm)
  return &pucch_dbm_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_pucch_dbm >&
flex_ul_cqi_report::pucch_dbm() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_cqi_report.pucch_dbm)
  return pucch_dbm_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_pucch_dbm::kP0PucchDbmFieldNumber;
const int flex_pucch_dbm::kServCellIndexFieldNumber;
const int flex_pucch_dbm::kP0PucchUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_pucch_dbm::flex_pucch_dbm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_pucch_dbm)
}
flex_pucch_dbm::flex_pucch_dbm(const flex_pucch_dbm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p0_pucch_dbm_, &from.p0_pucch_dbm_,
    reinterpret_cast<char*>(&p0_pucch_updated_) -
    reinterpret_cast<char*>(&p0_pucch_dbm_) + sizeof(p0_pucch_updated_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_pucch_dbm)
}

void flex_pucch_dbm::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&p0_pucch_dbm_, 0, reinterpret_cast<char*>(&p0_pucch_updated_) -
    reinterpret_cast<char*>(&p0_pucch_dbm_) + sizeof(p0_pucch_updated_));
}

flex_pucch_dbm::~flex_pucch_dbm() {
  // @@protoc_insertion_point(destructor:protocol.flex_pucch_dbm)
  SharedDtor();
}

void flex_pucch_dbm::SharedDtor() {
}

void flex_pucch_dbm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_pucch_dbm::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_pucch_dbm& flex_pucch_dbm::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_pucch_dbm* flex_pucch_dbm::New(::google::protobuf::Arena* arena) const {
  flex_pucch_dbm* n = new flex_pucch_dbm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_pucch_dbm::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_pucch_dbm)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&p0_pucch_dbm_, 0, reinterpret_cast<char*>(&p0_pucch_updated_) -
      reinterpret_cast<char*>(&p0_pucch_dbm_) + sizeof(p0_pucch_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_pucch_dbm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_pucch_dbm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 p0_pucch_dbm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_p0_pucch_dbm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p0_pucch_dbm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 serv_cell_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_serv_cell_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serv_cell_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 p0_pucch_updated = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_p0_pucch_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &p0_pucch_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_pucch_dbm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_pucch_dbm)
  return false;
#undef DO_
}

void flex_pucch_dbm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_pucch_dbm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 p0_pucch_dbm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->p0_pucch_dbm(), output);
  }

  // optional uint32 serv_cell_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serv_cell_index(), output);
  }

  // optional uint32 p0_pucch_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->p0_pucch_updated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_pucch_dbm)
}

::google::protobuf::uint8* flex_pucch_dbm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_pucch_dbm)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 p0_pucch_dbm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->p0_pucch_dbm(), target);
  }

  // optional uint32 serv_cell_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serv_cell_index(), target);
  }

  // optional uint32 p0_pucch_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->p0_pucch_updated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_pucch_dbm)
  return target;
}

size_t flex_pucch_dbm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_pucch_dbm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 p0_pucch_dbm = 1;
    if (has_p0_pucch_dbm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p0_pucch_dbm());
    }

    // optional uint32 serv_cell_index = 2;
    if (has_serv_cell_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serv_cell_index());
    }

    // optional uint32 p0_pucch_updated = 3;
    if (has_p0_pucch_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->p0_pucch_updated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_pucch_dbm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_pucch_dbm)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_pucch_dbm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_pucch_dbm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_pucch_dbm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_pucch_dbm)
    MergeFrom(*source);
  }
}

void flex_pucch_dbm::MergeFrom(const flex_pucch_dbm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_pucch_dbm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      p0_pucch_dbm_ = from.p0_pucch_dbm_;
    }
    if (cached_has_bits & 0x00000002u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      p0_pucch_updated_ = from.p0_pucch_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_pucch_dbm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_pucch_dbm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_pucch_dbm::CopyFrom(const flex_pucch_dbm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_pucch_dbm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_pucch_dbm::IsInitialized() const {
  return true;
}

void flex_pucch_dbm::Swap(flex_pucch_dbm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_pucch_dbm::InternalSwap(flex_pucch_dbm* other) {
  std::swap(p0_pucch_dbm_, other->p0_pucch_dbm_);
  std::swap(serv_cell_index_, other->serv_cell_index_);
  std::swap(p0_pucch_updated_, other->p0_pucch_updated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_pucch_dbm::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_pucch_dbm

// optional int32 p0_pucch_dbm = 1;
bool flex_pucch_dbm::has_p0_pucch_dbm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_pucch_dbm::set_has_p0_pucch_dbm() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_pucch_dbm::clear_has_p0_pucch_dbm() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_pucch_dbm::clear_p0_pucch_dbm() {
  p0_pucch_dbm_ = 0;
  clear_has_p0_pucch_dbm();
}
::google::protobuf::int32 flex_pucch_dbm::p0_pucch_dbm() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pucch_dbm.p0_pucch_dbm)
  return p0_pucch_dbm_;
}
void flex_pucch_dbm::set_p0_pucch_dbm(::google::protobuf::int32 value) {
  set_has_p0_pucch_dbm();
  p0_pucch_dbm_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pucch_dbm.p0_pucch_dbm)
}

// optional uint32 serv_cell_index = 2;
bool flex_pucch_dbm::has_serv_cell_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_pucch_dbm::set_has_serv_cell_index() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_pucch_dbm::clear_has_serv_cell_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_pucch_dbm::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  clear_has_serv_cell_index();
}
::google::protobuf::uint32 flex_pucch_dbm::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pucch_dbm.serv_cell_index)
  return serv_cell_index_;
}
void flex_pucch_dbm::set_serv_cell_index(::google::protobuf::uint32 value) {
  set_has_serv_cell_index();
  serv_cell_index_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pucch_dbm.serv_cell_index)
}

// optional uint32 p0_pucch_updated = 3;
bool flex_pucch_dbm::has_p0_pucch_updated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_pucch_dbm::set_has_p0_pucch_updated() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_pucch_dbm::clear_has_p0_pucch_updated() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_pucch_dbm::clear_p0_pucch_updated() {
  p0_pucch_updated_ = 0u;
  clear_has_p0_pucch_updated();
}
::google::protobuf::uint32 flex_pucch_dbm::p0_pucch_updated() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pucch_dbm.p0_pucch_updated)
  return p0_pucch_updated_;
}
void flex_pucch_dbm::set_p0_pucch_updated(::google::protobuf::uint32 value) {
  set_has_p0_pucch_updated();
  p0_pucch_updated_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pucch_dbm.p0_pucch_updated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_noise_interference_report::kSfnSfFieldNumber;
const int flex_noise_interference_report::kRipFieldNumber;
const int flex_noise_interference_report::kTnpFieldNumber;
const int flex_noise_interference_report::kP0NominalPucchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_noise_interference_report::flex_noise_interference_report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_noise_interference_report)
}
flex_noise_interference_report::flex_noise_interference_report(const flex_noise_interference_report& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sfn_sf_, &from.sfn_sf_,
    reinterpret_cast<char*>(&p0_nominal_pucch_) -
    reinterpret_cast<char*>(&sfn_sf_) + sizeof(p0_nominal_pucch_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_noise_interference_report)
}

void flex_noise_interference_report::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sfn_sf_, 0, reinterpret_cast<char*>(&p0_nominal_pucch_) -
    reinterpret_cast<char*>(&sfn_sf_) + sizeof(p0_nominal_pucch_));
}

flex_noise_interference_report::~flex_noise_interference_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_noise_interference_report)
  SharedDtor();
}

void flex_noise_interference_report::SharedDtor() {
}

void flex_noise_interference_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_noise_interference_report::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_noise_interference_report& flex_noise_interference_report::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_noise_interference_report* flex_noise_interference_report::New(::google::protobuf::Arena* arena) const {
  flex_noise_interference_report* n = new flex_noise_interference_report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_noise_interference_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_noise_interference_report)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&sfn_sf_, 0, reinterpret_cast<char*>(&p0_nominal_pucch_) -
      reinterpret_cast<char*>(&sfn_sf_) + sizeof(p0_nominal_pucch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_noise_interference_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_noise_interference_report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sfn_sf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sfn_sf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sfn_sf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tnp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tnp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tnp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 p0_nominal_pucch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_p0_nominal_pucch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p0_nominal_pucch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_noise_interference_report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_noise_interference_report)
  return false;
#undef DO_
}

void flex_noise_interference_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_noise_interference_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sfn_sf(), output);
  }

  // optional uint32 rip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rip(), output);
  }

  // optional uint32 tnp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tnp(), output);
  }

  // optional int32 p0_nominal_pucch = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->p0_nominal_pucch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_noise_interference_report)
}

::google::protobuf::uint8* flex_noise_interference_report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_noise_interference_report)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sfn_sf(), target);
  }

  // optional uint32 rip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rip(), target);
  }

  // optional uint32 tnp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tnp(), target);
  }

  // optional int32 p0_nominal_pucch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->p0_nominal_pucch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_noise_interference_report)
  return target;
}

size_t flex_noise_interference_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_noise_interference_report)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 sfn_sf = 1;
    if (has_sfn_sf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sfn_sf());
    }

    // optional uint32 rip = 2;
    if (has_rip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rip());
    }

    // optional uint32 tnp = 3;
    if (has_tnp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tnp());
    }

    // optional int32 p0_nominal_pucch = 4;
    if (has_p0_nominal_pucch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p0_nominal_pucch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_noise_interference_report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_noise_interference_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_noise_interference_report* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_noise_interference_report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_noise_interference_report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_noise_interference_report)
    MergeFrom(*source);
  }
}

void flex_noise_interference_report::MergeFrom(const flex_noise_interference_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_noise_interference_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      sfn_sf_ = from.sfn_sf_;
    }
    if (cached_has_bits & 0x00000002u) {
      rip_ = from.rip_;
    }
    if (cached_has_bits & 0x00000004u) {
      tnp_ = from.tnp_;
    }
    if (cached_has_bits & 0x00000008u) {
      p0_nominal_pucch_ = from.p0_nominal_pucch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_noise_interference_report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_noise_interference_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_noise_interference_report::CopyFrom(const flex_noise_interference_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_noise_interference_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_noise_interference_report::IsInitialized() const {
  return true;
}

void flex_noise_interference_report::Swap(flex_noise_interference_report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_noise_interference_report::InternalSwap(flex_noise_interference_report* other) {
  std::swap(sfn_sf_, other->sfn_sf_);
  std::swap(rip_, other->rip_);
  std::swap(tnp_, other->tnp_);
  std::swap(p0_nominal_pucch_, other->p0_nominal_pucch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_noise_interference_report::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_noise_interference_report

// optional uint32 sfn_sf = 1;
bool flex_noise_interference_report::has_sfn_sf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_noise_interference_report::set_has_sfn_sf() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_noise_interference_report::clear_has_sfn_sf() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_noise_interference_report::clear_sfn_sf() {
  sfn_sf_ = 0u;
  clear_has_sfn_sf();
}
::google::protobuf::uint32 flex_noise_interference_report::sfn_sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_noise_interference_report.sfn_sf)
  return sfn_sf_;
}
void flex_noise_interference_report::set_sfn_sf(::google::protobuf::uint32 value) {
  set_has_sfn_sf();
  sfn_sf_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_noise_interference_report.sfn_sf)
}

// optional uint32 rip = 2;
bool flex_noise_interference_report::has_rip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_noise_interference_report::set_has_rip() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_noise_interference_report::clear_has_rip() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_noise_interference_report::clear_rip() {
  rip_ = 0u;
  clear_has_rip();
}
::google::protobuf::uint32 flex_noise_interference_report::rip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_noise_interference_report.rip)
  return rip_;
}
void flex_noise_interference_report::set_rip(::google::protobuf::uint32 value) {
  set_has_rip();
  rip_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_noise_interference_report.rip)
}

// optional uint32 tnp = 3;
bool flex_noise_interference_report::has_tnp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_noise_interference_report::set_has_tnp() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_noise_interference_report::clear_has_tnp() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_noise_interference_report::clear_tnp() {
  tnp_ = 0u;
  clear_has_tnp();
}
::google::protobuf::uint32 flex_noise_interference_report::tnp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_noise_interference_report.tnp)
  return tnp_;
}
void flex_noise_interference_report::set_tnp(::google::protobuf::uint32 value) {
  set_has_tnp();
  tnp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_noise_interference_report.tnp)
}

// optional int32 p0_nominal_pucch = 4;
bool flex_noise_interference_report::has_p0_nominal_pucch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_noise_interference_report::set_has_p0_nominal_pucch() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_noise_interference_report::clear_has_p0_nominal_pucch() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_noise_interference_report::clear_p0_nominal_pucch() {
  p0_nominal_pucch_ = 0;
  clear_has_p0_nominal_pucch();
}
::google::protobuf::int32 flex_noise_interference_report::p0_nominal_pucch() const {
  // @@protoc_insertion_point(field_get:protocol.flex_noise_interference_report.p0_nominal_pucch)
  return p0_nominal_pucch_;
}
void flex_noise_interference_report::set_p0_nominal_pucch(::google::protobuf::int32 value) {
  set_has_p0_nominal_pucch();
  p0_nominal_pucch_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_noise_interference_report.p0_nominal_pucch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_rrc_measurements::kMeasidFieldNumber;
const int flex_rrc_measurements::kPcellRsrpFieldNumber;
const int flex_rrc_measurements::kPcellRsrqFieldNumber;
const int flex_rrc_measurements::kNeighMeasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_rrc_measurements::flex_rrc_measurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_rrc_measurements)
}
flex_rrc_measurements::flex_rrc_measurements(const flex_rrc_measurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neigh_meas()) {
    neigh_meas_ = new ::protocol::flex_neigh_cells_measurements(*from.neigh_meas_);
  } else {
    neigh_meas_ = NULL;
  }
  ::memcpy(&measid_, &from.measid_,
    reinterpret_cast<char*>(&pcell_rsrq_) -
    reinterpret_cast<char*>(&measid_) + sizeof(pcell_rsrq_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rrc_measurements)
}

void flex_rrc_measurements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&neigh_meas_, 0, reinterpret_cast<char*>(&pcell_rsrq_) -
    reinterpret_cast<char*>(&neigh_meas_) + sizeof(pcell_rsrq_));
}

flex_rrc_measurements::~flex_rrc_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_rrc_measurements)
  SharedDtor();
}

void flex_rrc_measurements::SharedDtor() {
  if (this != internal_default_instance()) {
    delete neigh_meas_;
  }
}

void flex_rrc_measurements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_rrc_measurements::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_rrc_measurements& flex_rrc_measurements::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_rrc_measurements* flex_rrc_measurements::New(::google::protobuf::Arena* arena) const {
  flex_rrc_measurements* n = new flex_rrc_measurements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_rrc_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rrc_measurements)
  if (has_neigh_meas()) {
    GOOGLE_DCHECK(neigh_meas_ != NULL);
    neigh_meas_->::protocol::flex_neigh_cells_measurements::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&measid_, 0, reinterpret_cast<char*>(&pcell_rsrq_) -
      reinterpret_cast<char*>(&measid_) + sizeof(pcell_rsrq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_rrc_measurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_rrc_measurements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 measid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_measid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &measid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pcell_rsrp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pcell_rsrp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcell_rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pcell_rsrq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_pcell_rsrq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcell_rsrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neigh_meas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_rrc_measurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_rrc_measurements)
  return false;
#undef DO_
}

void flex_rrc_measurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_rrc_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 measid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->measid(), output);
  }

  // optional int32 pcell_rsrp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pcell_rsrp(), output);
  }

  // optional int32 pcell_rsrq = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pcell_rsrq(), output);
  }

  // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->neigh_meas_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_rrc_measurements)
}

::google::protobuf::uint8* flex_rrc_measurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rrc_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 measid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->measid(), target);
  }

  // optional int32 pcell_rsrp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pcell_rsrp(), target);
  }

  // optional int32 pcell_rsrq = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pcell_rsrq(), target);
  }

  // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->neigh_meas_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rrc_measurements)
  return target;
}

size_t flex_rrc_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rrc_measurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
    if (has_neigh_meas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->neigh_meas_);
    }

    // optional int32 measid = 1;
    if (has_measid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->measid());
    }

    // optional int32 pcell_rsrp = 2;
    if (has_pcell_rsrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcell_rsrp());
    }

    // optional int32 pcell_rsrq = 3;
    if (has_pcell_rsrq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcell_rsrq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_rrc_measurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rrc_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rrc_measurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_rrc_measurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rrc_measurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rrc_measurements)
    MergeFrom(*source);
  }
}

void flex_rrc_measurements::MergeFrom(const flex_rrc_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rrc_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_neigh_meas()->::protocol::flex_neigh_cells_measurements::MergeFrom(from.neigh_meas());
    }
    if (cached_has_bits & 0x00000002u) {
      measid_ = from.measid_;
    }
    if (cached_has_bits & 0x00000004u) {
      pcell_rsrp_ = from.pcell_rsrp_;
    }
    if (cached_has_bits & 0x00000008u) {
      pcell_rsrq_ = from.pcell_rsrq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_rrc_measurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rrc_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rrc_measurements::CopyFrom(const flex_rrc_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rrc_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rrc_measurements::IsInitialized() const {
  return true;
}

void flex_rrc_measurements::Swap(flex_rrc_measurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_rrc_measurements::InternalSwap(flex_rrc_measurements* other) {
  std::swap(neigh_meas_, other->neigh_meas_);
  std::swap(measid_, other->measid_);
  std::swap(pcell_rsrp_, other->pcell_rsrp_);
  std::swap(pcell_rsrq_, other->pcell_rsrq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_rrc_measurements::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_rrc_measurements

// optional int32 measid = 1;
bool flex_rrc_measurements::has_measid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_rrc_measurements::set_has_measid() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_rrc_measurements::clear_has_measid() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_rrc_measurements::clear_measid() {
  measid_ = 0;
  clear_has_measid();
}
::google::protobuf::int32 flex_rrc_measurements::measid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_measurements.measid)
  return measid_;
}
void flex_rrc_measurements::set_measid(::google::protobuf::int32 value) {
  set_has_measid();
  measid_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rrc_measurements.measid)
}

// optional int32 pcell_rsrp = 2;
bool flex_rrc_measurements::has_pcell_rsrp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_rrc_measurements::set_has_pcell_rsrp() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_rrc_measurements::clear_has_pcell_rsrp() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_rrc_measurements::clear_pcell_rsrp() {
  pcell_rsrp_ = 0;
  clear_has_pcell_rsrp();
}
::google::protobuf::int32 flex_rrc_measurements::pcell_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_measurements.pcell_rsrp)
  return pcell_rsrp_;
}
void flex_rrc_measurements::set_pcell_rsrp(::google::protobuf::int32 value) {
  set_has_pcell_rsrp();
  pcell_rsrp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rrc_measurements.pcell_rsrp)
}

// optional int32 pcell_rsrq = 3;
bool flex_rrc_measurements::has_pcell_rsrq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_rrc_measurements::set_has_pcell_rsrq() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_rrc_measurements::clear_has_pcell_rsrq() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_rrc_measurements::clear_pcell_rsrq() {
  pcell_rsrq_ = 0;
  clear_has_pcell_rsrq();
}
::google::protobuf::int32 flex_rrc_measurements::pcell_rsrq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_measurements.pcell_rsrq)
  return pcell_rsrq_;
}
void flex_rrc_measurements::set_pcell_rsrq(::google::protobuf::int32 value) {
  set_has_pcell_rsrq();
  pcell_rsrq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_rrc_measurements.pcell_rsrq)
}

// optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
bool flex_rrc_measurements::has_neigh_meas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_rrc_measurements::set_has_neigh_meas() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_rrc_measurements::clear_has_neigh_meas() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_rrc_measurements::clear_neigh_meas() {
  if (neigh_meas_ != NULL) neigh_meas_->::protocol::flex_neigh_cells_measurements::Clear();
  clear_has_neigh_meas();
}
const ::protocol::flex_neigh_cells_measurements& flex_rrc_measurements::neigh_meas() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rrc_measurements.neigh_meas)
  return neigh_meas_ != NULL ? *neigh_meas_
                         : *::protocol::flex_neigh_cells_measurements::internal_default_instance();
}
::protocol::flex_neigh_cells_measurements* flex_rrc_measurements::mutable_neigh_meas() {
  set_has_neigh_meas();
  if (neigh_meas_ == NULL) {
    neigh_meas_ = new ::protocol::flex_neigh_cells_measurements;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_rrc_measurements.neigh_meas)
  return neigh_meas_;
}
::protocol::flex_neigh_cells_measurements* flex_rrc_measurements::release_neigh_meas() {
  // @@protoc_insertion_point(field_release:protocol.flex_rrc_measurements.neigh_meas)
  clear_has_neigh_meas();
  ::protocol::flex_neigh_cells_measurements* temp = neigh_meas_;
  neigh_meas_ = NULL;
  return temp;
}
void flex_rrc_measurements::set_allocated_neigh_meas(::protocol::flex_neigh_cells_measurements* neigh_meas) {
  delete neigh_meas_;
  neigh_meas_ = neigh_meas;
  if (neigh_meas) {
    set_has_neigh_meas();
  } else {
    clear_has_neigh_meas();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_rrc_measurements.neigh_meas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_neigh_cells_measurements::kEutraMeasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_neigh_cells_measurements::flex_neigh_cells_measurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_neigh_cells_measurements)
}
flex_neigh_cells_measurements::flex_neigh_cells_measurements(const flex_neigh_cells_measurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      eutra_meas_(from.eutra_meas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_neigh_cells_measurements)
}

void flex_neigh_cells_measurements::SharedCtor() {
  _cached_size_ = 0;
}

flex_neigh_cells_measurements::~flex_neigh_cells_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_neigh_cells_measurements)
  SharedDtor();
}

void flex_neigh_cells_measurements::SharedDtor() {
}

void flex_neigh_cells_measurements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_neigh_cells_measurements::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_neigh_cells_measurements& flex_neigh_cells_measurements::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_neigh_cells_measurements* flex_neigh_cells_measurements::New(::google::protobuf::Arena* arena) const {
  flex_neigh_cells_measurements* n = new flex_neigh_cells_measurements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_neigh_cells_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_neigh_cells_measurements)
  eutra_meas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_neigh_cells_measurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_neigh_cells_measurements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eutra_meas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_neigh_cells_measurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_neigh_cells_measurements)
  return false;
#undef DO_
}

void flex_neigh_cells_measurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_neigh_cells_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
  for (unsigned int i = 0, n = this->eutra_meas_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eutra_meas(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_neigh_cells_measurements)
}

::google::protobuf::uint8* flex_neigh_cells_measurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_neigh_cells_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
  for (unsigned int i = 0, n = this->eutra_meas_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->eutra_meas(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_neigh_cells_measurements)
  return target;
}

size_t flex_neigh_cells_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_neigh_cells_measurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
  {
    unsigned int count = this->eutra_meas_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eutra_meas(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_neigh_cells_measurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_neigh_cells_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_neigh_cells_measurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_neigh_cells_measurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_neigh_cells_measurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_neigh_cells_measurements)
    MergeFrom(*source);
  }
}

void flex_neigh_cells_measurements::MergeFrom(const flex_neigh_cells_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_neigh_cells_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eutra_meas_.MergeFrom(from.eutra_meas_);
}

void flex_neigh_cells_measurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_neigh_cells_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_neigh_cells_measurements::CopyFrom(const flex_neigh_cells_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_neigh_cells_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_neigh_cells_measurements::IsInitialized() const {
  return true;
}

void flex_neigh_cells_measurements::Swap(flex_neigh_cells_measurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_neigh_cells_measurements::InternalSwap(flex_neigh_cells_measurements* other) {
  eutra_meas_.InternalSwap(&other->eutra_meas_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_neigh_cells_measurements::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_neigh_cells_measurements

// repeated .protocol.flex_eutra_measurements eutra_meas = 1;
int flex_neigh_cells_measurements::eutra_meas_size() const {
  return eutra_meas_.size();
}
void flex_neigh_cells_measurements::clear_eutra_meas() {
  eutra_meas_.Clear();
}
const ::protocol::flex_eutra_measurements& flex_neigh_cells_measurements::eutra_meas(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_neigh_cells_measurements.eutra_meas)
  return eutra_meas_.Get(index);
}
::protocol::flex_eutra_measurements* flex_neigh_cells_measurements::mutable_eutra_meas(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_neigh_cells_measurements.eutra_meas)
  return eutra_meas_.Mutable(index);
}
::protocol::flex_eutra_measurements* flex_neigh_cells_measurements::add_eutra_meas() {
  // @@protoc_insertion_point(field_add:protocol.flex_neigh_cells_measurements.eutra_meas)
  return eutra_meas_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_eutra_measurements >*
flex_neigh_cells_measurements::mutable_eutra_meas() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_neigh_cells_measurements.eutra_meas)
  return &eutra_meas_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_eutra_measurements >&
flex_neigh_cells_measurements::eutra_meas() const {
  // @@protoc_insertion_point(field_list:protocol.flex_neigh_cells_measurements.eutra_meas)
  return eutra_meas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_eutra_measurements::kPhysCellIdFieldNumber;
const int flex_eutra_measurements::kCgiMeasFieldNumber;
const int flex_eutra_measurements::kMeasResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_eutra_measurements::flex_eutra_measurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_eutra_measurements)
}
flex_eutra_measurements::flex_eutra_measurements(const flex_eutra_measurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cgi_meas()) {
    cgi_meas_ = new ::protocol::flex_eutra_cgi_measurements(*from.cgi_meas_);
  } else {
    cgi_meas_ = NULL;
  }
  if (from.has_meas_result()) {
    meas_result_ = new ::protocol::flex_eutra_ref_signal_meas(*from.meas_result_);
  } else {
    meas_result_ = NULL;
  }
  phys_cell_id_ = from.phys_cell_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_eutra_measurements)
}

void flex_eutra_measurements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cgi_meas_, 0, reinterpret_cast<char*>(&phys_cell_id_) -
    reinterpret_cast<char*>(&cgi_meas_) + sizeof(phys_cell_id_));
}

flex_eutra_measurements::~flex_eutra_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_eutra_measurements)
  SharedDtor();
}

void flex_eutra_measurements::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cgi_meas_;
  }
  if (this != internal_default_instance()) {
    delete meas_result_;
  }
}

void flex_eutra_measurements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_eutra_measurements::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_eutra_measurements& flex_eutra_measurements::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_eutra_measurements* flex_eutra_measurements::New(::google::protobuf::Arena* arena) const {
  flex_eutra_measurements* n = new flex_eutra_measurements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_eutra_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_eutra_measurements)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_cgi_meas()) {
      GOOGLE_DCHECK(cgi_meas_ != NULL);
      cgi_meas_->::protocol::flex_eutra_cgi_measurements::Clear();
    }
    if (has_meas_result()) {
      GOOGLE_DCHECK(meas_result_ != NULL);
      meas_result_->::protocol::flex_eutra_ref_signal_meas::Clear();
    }
  }
  phys_cell_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_eutra_measurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_eutra_measurements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 phys_cell_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_phys_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phys_cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cgi_meas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meas_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_eutra_measurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_eutra_measurements)
  return false;
#undef DO_
}

void flex_eutra_measurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_eutra_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 phys_cell_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phys_cell_id(), output);
  }

  // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cgi_meas_, output);
  }

  // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->meas_result_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_eutra_measurements)
}

::google::protobuf::uint8* flex_eutra_measurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_eutra_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 phys_cell_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phys_cell_id(), target);
  }

  // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cgi_meas_, deterministic, target);
  }

  // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->meas_result_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_eutra_measurements)
  return target;
}

size_t flex_eutra_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_eutra_measurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
    if (has_cgi_meas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cgi_meas_);
    }

    // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
    if (has_meas_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->meas_result_);
    }

    // optional int32 phys_cell_id = 1;
    if (has_phys_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phys_cell_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_eutra_measurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_eutra_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_eutra_measurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_eutra_measurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_eutra_measurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_eutra_measurements)
    MergeFrom(*source);
  }
}

void flex_eutra_measurements::MergeFrom(const flex_eutra_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_eutra_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cgi_meas()->::protocol::flex_eutra_cgi_measurements::MergeFrom(from.cgi_meas());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_meas_result()->::protocol::flex_eutra_ref_signal_meas::MergeFrom(from.meas_result());
    }
    if (cached_has_bits & 0x00000004u) {
      phys_cell_id_ = from.phys_cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_eutra_measurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_eutra_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_eutra_measurements::CopyFrom(const flex_eutra_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_eutra_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_eutra_measurements::IsInitialized() const {
  return true;
}

void flex_eutra_measurements::Swap(flex_eutra_measurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_eutra_measurements::InternalSwap(flex_eutra_measurements* other) {
  std::swap(cgi_meas_, other->cgi_meas_);
  std::swap(meas_result_, other->meas_result_);
  std::swap(phys_cell_id_, other->phys_cell_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_eutra_measurements::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_eutra_measurements

// optional int32 phys_cell_id = 1;
bool flex_eutra_measurements::has_phys_cell_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_eutra_measurements::set_has_phys_cell_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_eutra_measurements::clear_has_phys_cell_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_eutra_measurements::clear_phys_cell_id() {
  phys_cell_id_ = 0;
  clear_has_phys_cell_id();
}
::google::protobuf::int32 flex_eutra_measurements::phys_cell_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_measurements.phys_cell_id)
  return phys_cell_id_;
}
void flex_eutra_measurements::set_phys_cell_id(::google::protobuf::int32 value) {
  set_has_phys_cell_id();
  phys_cell_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_eutra_measurements.phys_cell_id)
}

// optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
bool flex_eutra_measurements::has_cgi_meas() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_eutra_measurements::set_has_cgi_meas() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_eutra_measurements::clear_has_cgi_meas() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_eutra_measurements::clear_cgi_meas() {
  if (cgi_meas_ != NULL) cgi_meas_->::protocol::flex_eutra_cgi_measurements::Clear();
  clear_has_cgi_meas();
}
const ::protocol::flex_eutra_cgi_measurements& flex_eutra_measurements::cgi_meas() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_measurements.cgi_meas)
  return cgi_meas_ != NULL ? *cgi_meas_
                         : *::protocol::flex_eutra_cgi_measurements::internal_default_instance();
}
::protocol::flex_eutra_cgi_measurements* flex_eutra_measurements::mutable_cgi_meas() {
  set_has_cgi_meas();
  if (cgi_meas_ == NULL) {
    cgi_meas_ = new ::protocol::flex_eutra_cgi_measurements;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_eutra_measurements.cgi_meas)
  return cgi_meas_;
}
::protocol::flex_eutra_cgi_measurements* flex_eutra_measurements::release_cgi_meas() {
  // @@protoc_insertion_point(field_release:protocol.flex_eutra_measurements.cgi_meas)
  clear_has_cgi_meas();
  ::protocol::flex_eutra_cgi_measurements* temp = cgi_meas_;
  cgi_meas_ = NULL;
  return temp;
}
void flex_eutra_measurements::set_allocated_cgi_meas(::protocol::flex_eutra_cgi_measurements* cgi_meas) {
  delete cgi_meas_;
  cgi_meas_ = cgi_meas;
  if (cgi_meas) {
    set_has_cgi_meas();
  } else {
    clear_has_cgi_meas();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_eutra_measurements.cgi_meas)
}

// optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
bool flex_eutra_measurements::has_meas_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_eutra_measurements::set_has_meas_result() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_eutra_measurements::clear_has_meas_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_eutra_measurements::clear_meas_result() {
  if (meas_result_ != NULL) meas_result_->::protocol::flex_eutra_ref_signal_meas::Clear();
  clear_has_meas_result();
}
const ::protocol::flex_eutra_ref_signal_meas& flex_eutra_measurements::meas_result() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_measurements.meas_result)
  return meas_result_ != NULL ? *meas_result_
                         : *::protocol::flex_eutra_ref_signal_meas::internal_default_instance();
}
::protocol::flex_eutra_ref_signal_meas* flex_eutra_measurements::mutable_meas_result() {
  set_has_meas_result();
  if (meas_result_ == NULL) {
    meas_result_ = new ::protocol::flex_eutra_ref_signal_meas;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_eutra_measurements.meas_result)
  return meas_result_;
}
::protocol::flex_eutra_ref_signal_meas* flex_eutra_measurements::release_meas_result() {
  // @@protoc_insertion_point(field_release:protocol.flex_eutra_measurements.meas_result)
  clear_has_meas_result();
  ::protocol::flex_eutra_ref_signal_meas* temp = meas_result_;
  meas_result_ = NULL;
  return temp;
}
void flex_eutra_measurements::set_allocated_meas_result(::protocol::flex_eutra_ref_signal_meas* meas_result) {
  delete meas_result_;
  meas_result_ = meas_result;
  if (meas_result) {
    set_has_meas_result();
  } else {
    clear_has_meas_result();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_eutra_measurements.meas_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_eutra_cgi_measurements::kCgiFieldNumber;
const int flex_eutra_cgi_measurements::kTrackingAreaCodeFieldNumber;
const int flex_eutra_cgi_measurements::kPlmnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_eutra_cgi_measurements::flex_eutra_cgi_measurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_eutra_cgi_measurements)
}
flex_eutra_cgi_measurements::flex_eutra_cgi_measurements(const flex_eutra_cgi_measurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      plmn_(from.plmn_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cgi()) {
    cgi_ = new ::protocol::flex_cell_global_eutra_id(*from.cgi_);
  } else {
    cgi_ = NULL;
  }
  tracking_area_code_ = from.tracking_area_code_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_eutra_cgi_measurements)
}

void flex_eutra_cgi_measurements::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cgi_, 0, reinterpret_cast<char*>(&tracking_area_code_) -
    reinterpret_cast<char*>(&cgi_) + sizeof(tracking_area_code_));
}

flex_eutra_cgi_measurements::~flex_eutra_cgi_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_eutra_cgi_measurements)
  SharedDtor();
}

void flex_eutra_cgi_measurements::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cgi_;
  }
}

void flex_eutra_cgi_measurements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_eutra_cgi_measurements::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_eutra_cgi_measurements& flex_eutra_cgi_measurements::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_eutra_cgi_measurements* flex_eutra_cgi_measurements::New(::google::protobuf::Arena* arena) const {
  flex_eutra_cgi_measurements* n = new flex_eutra_cgi_measurements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_eutra_cgi_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_eutra_cgi_measurements)
  plmn_.Clear();
  if (has_cgi()) {
    GOOGLE_DCHECK(cgi_ != NULL);
    cgi_->::protocol::flex_cell_global_eutra_id::Clear();
  }
  tracking_area_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_eutra_cgi_measurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_eutra_cgi_measurements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_cell_global_eutra_id cgi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cgi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tracking_area_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tracking_area_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracking_area_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_plmn plmn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plmn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_eutra_cgi_measurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_eutra_cgi_measurements)
  return false;
#undef DO_
}

void flex_eutra_cgi_measurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_eutra_cgi_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_cell_global_eutra_id cgi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cgi_, output);
  }

  // optional uint32 tracking_area_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tracking_area_code(), output);
  }

  // repeated .protocol.flex_plmn plmn = 3;
  for (unsigned int i = 0, n = this->plmn_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plmn(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_eutra_cgi_measurements)
}

::google::protobuf::uint8* flex_eutra_cgi_measurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_eutra_cgi_measurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_cell_global_eutra_id cgi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cgi_, deterministic, target);
  }

  // optional uint32 tracking_area_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tracking_area_code(), target);
  }

  // repeated .protocol.flex_plmn plmn = 3;
  for (unsigned int i = 0, n = this->plmn_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->plmn(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_eutra_cgi_measurements)
  return target;
}

size_t flex_eutra_cgi_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_eutra_cgi_measurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_plmn plmn = 3;
  {
    unsigned int count = this->plmn_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plmn(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_cell_global_eutra_id cgi = 1;
    if (has_cgi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->cgi_);
    }

    // optional uint32 tracking_area_code = 2;
    if (has_tracking_area_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracking_area_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_eutra_cgi_measurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_eutra_cgi_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_eutra_cgi_measurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_eutra_cgi_measurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_eutra_cgi_measurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_eutra_cgi_measurements)
    MergeFrom(*source);
  }
}

void flex_eutra_cgi_measurements::MergeFrom(const flex_eutra_cgi_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_eutra_cgi_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plmn_.MergeFrom(from.plmn_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cgi()->::protocol::flex_cell_global_eutra_id::MergeFrom(from.cgi());
    }
    if (cached_has_bits & 0x00000002u) {
      tracking_area_code_ = from.tracking_area_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_eutra_cgi_measurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_eutra_cgi_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_eutra_cgi_measurements::CopyFrom(const flex_eutra_cgi_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_eutra_cgi_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_eutra_cgi_measurements::IsInitialized() const {
  return true;
}

void flex_eutra_cgi_measurements::Swap(flex_eutra_cgi_measurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_eutra_cgi_measurements::InternalSwap(flex_eutra_cgi_measurements* other) {
  plmn_.InternalSwap(&other->plmn_);
  std::swap(cgi_, other->cgi_);
  std::swap(tracking_area_code_, other->tracking_area_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_eutra_cgi_measurements::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_eutra_cgi_measurements

// optional .protocol.flex_cell_global_eutra_id cgi = 1;
bool flex_eutra_cgi_measurements::has_cgi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_eutra_cgi_measurements::set_has_cgi() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_eutra_cgi_measurements::clear_has_cgi() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_eutra_cgi_measurements::clear_cgi() {
  if (cgi_ != NULL) cgi_->::protocol::flex_cell_global_eutra_id::Clear();
  clear_has_cgi();
}
const ::protocol::flex_cell_global_eutra_id& flex_eutra_cgi_measurements::cgi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_cgi_measurements.cgi)
  return cgi_ != NULL ? *cgi_
                         : *::protocol::flex_cell_global_eutra_id::internal_default_instance();
}
::protocol::flex_cell_global_eutra_id* flex_eutra_cgi_measurements::mutable_cgi() {
  set_has_cgi();
  if (cgi_ == NULL) {
    cgi_ = new ::protocol::flex_cell_global_eutra_id;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_eutra_cgi_measurements.cgi)
  return cgi_;
}
::protocol::flex_cell_global_eutra_id* flex_eutra_cgi_measurements::release_cgi() {
  // @@protoc_insertion_point(field_release:protocol.flex_eutra_cgi_measurements.cgi)
  clear_has_cgi();
  ::protocol::flex_cell_global_eutra_id* temp = cgi_;
  cgi_ = NULL;
  return temp;
}
void flex_eutra_cgi_measurements::set_allocated_cgi(::protocol::flex_cell_global_eutra_id* cgi) {
  delete cgi_;
  cgi_ = cgi;
  if (cgi) {
    set_has_cgi();
  } else {
    clear_has_cgi();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_eutra_cgi_measurements.cgi)
}

// optional uint32 tracking_area_code = 2;
bool flex_eutra_cgi_measurements::has_tracking_area_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_eutra_cgi_measurements::set_has_tracking_area_code() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_eutra_cgi_measurements::clear_has_tracking_area_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_eutra_cgi_measurements::clear_tracking_area_code() {
  tracking_area_code_ = 0u;
  clear_has_tracking_area_code();
}
::google::protobuf::uint32 flex_eutra_cgi_measurements::tracking_area_code() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_cgi_measurements.tracking_area_code)
  return tracking_area_code_;
}
void flex_eutra_cgi_measurements::set_tracking_area_code(::google::protobuf::uint32 value) {
  set_has_tracking_area_code();
  tracking_area_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_eutra_cgi_measurements.tracking_area_code)
}

// repeated .protocol.flex_plmn plmn = 3;
int flex_eutra_cgi_measurements::plmn_size() const {
  return plmn_.size();
}
void flex_eutra_cgi_measurements::clear_plmn() {
  plmn_.Clear();
}
const ::protocol::flex_plmn& flex_eutra_cgi_measurements::plmn(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_cgi_measurements.plmn)
  return plmn_.Get(index);
}
::protocol::flex_plmn* flex_eutra_cgi_measurements::mutable_plmn(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_eutra_cgi_measurements.plmn)
  return plmn_.Mutable(index);
}
::protocol::flex_plmn* flex_eutra_cgi_measurements::add_plmn() {
  // @@protoc_insertion_point(field_add:protocol.flex_eutra_cgi_measurements.plmn)
  return plmn_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >*
flex_eutra_cgi_measurements::mutable_plmn() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_eutra_cgi_measurements.plmn)
  return &plmn_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_plmn >&
flex_eutra_cgi_measurements::plmn() const {
  // @@protoc_insertion_point(field_list:protocol.flex_eutra_cgi_measurements.plmn)
  return plmn_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_cell_global_eutra_id::kPlmnFieldNumber;
const int flex_cell_global_eutra_id::kCellIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_cell_global_eutra_id::flex_cell_global_eutra_id()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_cell_global_eutra_id)
}
flex_cell_global_eutra_id::flex_cell_global_eutra_id(const flex_cell_global_eutra_id& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_plmn()) {
    plmn_ = new ::protocol::flex_plmn(*from.plmn_);
  } else {
    plmn_ = NULL;
  }
  cell_id_ = from.cell_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_global_eutra_id)
}

void flex_cell_global_eutra_id::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&plmn_, 0, reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&plmn_) + sizeof(cell_id_));
}

flex_cell_global_eutra_id::~flex_cell_global_eutra_id() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_global_eutra_id)
  SharedDtor();
}

void flex_cell_global_eutra_id::SharedDtor() {
  if (this != internal_default_instance()) {
    delete plmn_;
  }
}

void flex_cell_global_eutra_id::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_cell_global_eutra_id::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_cell_global_eutra_id& flex_cell_global_eutra_id::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_cell_global_eutra_id* flex_cell_global_eutra_id::New(::google::protobuf::Arena* arena) const {
  flex_cell_global_eutra_id* n = new flex_cell_global_eutra_id;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_cell_global_eutra_id::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_global_eutra_id)
  if (has_plmn()) {
    GOOGLE_DCHECK(plmn_ != NULL);
    plmn_->::protocol::flex_plmn::Clear();
  }
  cell_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_cell_global_eutra_id::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_cell_global_eutra_id)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.flex_plmn plmn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plmn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_cell_global_eutra_id)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_cell_global_eutra_id)
  return false;
#undef DO_
}

void flex_cell_global_eutra_id::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_cell_global_eutra_id)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_plmn plmn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->plmn_, output);
  }

  // optional uint32 cell_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cell_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_cell_global_eutra_id)
}

::google::protobuf::uint8* flex_cell_global_eutra_id::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_global_eutra_id)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_plmn plmn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->plmn_, deterministic, target);
  }

  // optional uint32 cell_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cell_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_global_eutra_id)
  return target;
}

size_t flex_cell_global_eutra_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_global_eutra_id)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .protocol.flex_plmn plmn = 1;
    if (has_plmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->plmn_);
    }

    // optional uint32 cell_id = 2;
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_cell_global_eutra_id::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_global_eutra_id)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_global_eutra_id* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_cell_global_eutra_id>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_global_eutra_id)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_global_eutra_id)
    MergeFrom(*source);
  }
}

void flex_cell_global_eutra_id::MergeFrom(const flex_cell_global_eutra_id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_global_eutra_id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_plmn()->::protocol::flex_plmn::MergeFrom(from.plmn());
    }
    if (cached_has_bits & 0x00000002u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_cell_global_eutra_id::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_global_eutra_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_global_eutra_id::CopyFrom(const flex_cell_global_eutra_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_global_eutra_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_global_eutra_id::IsInitialized() const {
  return true;
}

void flex_cell_global_eutra_id::Swap(flex_cell_global_eutra_id* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_cell_global_eutra_id::InternalSwap(flex_cell_global_eutra_id* other) {
  std::swap(plmn_, other->plmn_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_cell_global_eutra_id::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_cell_global_eutra_id

// optional .protocol.flex_plmn plmn = 1;
bool flex_cell_global_eutra_id::has_plmn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_cell_global_eutra_id::set_has_plmn() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_cell_global_eutra_id::clear_has_plmn() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_cell_global_eutra_id::clear_plmn() {
  if (plmn_ != NULL) plmn_->::protocol::flex_plmn::Clear();
  clear_has_plmn();
}
const ::protocol::flex_plmn& flex_cell_global_eutra_id::plmn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_global_eutra_id.plmn)
  return plmn_ != NULL ? *plmn_
                         : *::protocol::flex_plmn::internal_default_instance();
}
::protocol::flex_plmn* flex_cell_global_eutra_id::mutable_plmn() {
  set_has_plmn();
  if (plmn_ == NULL) {
    plmn_ = new ::protocol::flex_plmn;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_global_eutra_id.plmn)
  return plmn_;
}
::protocol::flex_plmn* flex_cell_global_eutra_id::release_plmn() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_global_eutra_id.plmn)
  clear_has_plmn();
  ::protocol::flex_plmn* temp = plmn_;
  plmn_ = NULL;
  return temp;
}
void flex_cell_global_eutra_id::set_allocated_plmn(::protocol::flex_plmn* plmn) {
  delete plmn_;
  plmn_ = plmn;
  if (plmn) {
    set_has_plmn();
  } else {
    clear_has_plmn();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_global_eutra_id.plmn)
}

// optional uint32 cell_id = 2;
bool flex_cell_global_eutra_id::has_cell_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_cell_global_eutra_id::set_has_cell_id() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_cell_global_eutra_id::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_cell_global_eutra_id::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 flex_cell_global_eutra_id::cell_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_global_eutra_id.cell_id)
  return cell_id_;
}
void flex_cell_global_eutra_id::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_cell_global_eutra_id.cell_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_eutra_ref_signal_meas::kRsrpFieldNumber;
const int flex_eutra_ref_signal_meas::kRsrqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_eutra_ref_signal_meas::flex_eutra_ref_signal_meas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_eutra_ref_signal_meas)
}
flex_eutra_ref_signal_meas::flex_eutra_ref_signal_meas(const flex_eutra_ref_signal_meas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rsrp_, &from.rsrp_,
    reinterpret_cast<char*>(&rsrq_) -
    reinterpret_cast<char*>(&rsrp_) + sizeof(rsrq_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_eutra_ref_signal_meas)
}

void flex_eutra_ref_signal_meas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rsrp_, 0, reinterpret_cast<char*>(&rsrq_) -
    reinterpret_cast<char*>(&rsrp_) + sizeof(rsrq_));
}

flex_eutra_ref_signal_meas::~flex_eutra_ref_signal_meas() {
  // @@protoc_insertion_point(destructor:protocol.flex_eutra_ref_signal_meas)
  SharedDtor();
}

void flex_eutra_ref_signal_meas::SharedDtor() {
}

void flex_eutra_ref_signal_meas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_eutra_ref_signal_meas::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_eutra_ref_signal_meas& flex_eutra_ref_signal_meas::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_eutra_ref_signal_meas* flex_eutra_ref_signal_meas::New(::google::protobuf::Arena* arena) const {
  flex_eutra_ref_signal_meas* n = new flex_eutra_ref_signal_meas;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_eutra_ref_signal_meas::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_eutra_ref_signal_meas)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&rsrp_, 0, reinterpret_cast<char*>(&rsrq_) -
      reinterpret_cast<char*>(&rsrp_) + sizeof(rsrq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_eutra_ref_signal_meas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_eutra_ref_signal_meas)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rsrp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_rsrp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsrp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rsrq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_rsrq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsrq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_eutra_ref_signal_meas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_eutra_ref_signal_meas)
  return false;
#undef DO_
}

void flex_eutra_ref_signal_meas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_eutra_ref_signal_meas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsrp(), output);
  }

  // optional int32 rsrq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rsrq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_eutra_ref_signal_meas)
}

::google::protobuf::uint8* flex_eutra_ref_signal_meas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_eutra_ref_signal_meas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rsrp(), target);
  }

  // optional int32 rsrq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rsrq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_eutra_ref_signal_meas)
  return target;
}

size_t flex_eutra_ref_signal_meas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_eutra_ref_signal_meas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 rsrp = 1;
    if (has_rsrp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsrp());
    }

    // optional int32 rsrq = 2;
    if (has_rsrq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsrq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_eutra_ref_signal_meas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_eutra_ref_signal_meas)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_eutra_ref_signal_meas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_eutra_ref_signal_meas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_eutra_ref_signal_meas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_eutra_ref_signal_meas)
    MergeFrom(*source);
  }
}

void flex_eutra_ref_signal_meas::MergeFrom(const flex_eutra_ref_signal_meas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_eutra_ref_signal_meas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rsrp_ = from.rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      rsrq_ = from.rsrq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_eutra_ref_signal_meas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_eutra_ref_signal_meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_eutra_ref_signal_meas::CopyFrom(const flex_eutra_ref_signal_meas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_eutra_ref_signal_meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_eutra_ref_signal_meas::IsInitialized() const {
  return true;
}

void flex_eutra_ref_signal_meas::Swap(flex_eutra_ref_signal_meas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_eutra_ref_signal_meas::InternalSwap(flex_eutra_ref_signal_meas* other) {
  std::swap(rsrp_, other->rsrp_);
  std::swap(rsrq_, other->rsrq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_eutra_ref_signal_meas::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_eutra_ref_signal_meas

// optional int32 rsrp = 1;
bool flex_eutra_ref_signal_meas::has_rsrp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_eutra_ref_signal_meas::set_has_rsrp() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_eutra_ref_signal_meas::clear_has_rsrp() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_eutra_ref_signal_meas::clear_rsrp() {
  rsrp_ = 0;
  clear_has_rsrp();
}
::google::protobuf::int32 flex_eutra_ref_signal_meas::rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_ref_signal_meas.rsrp)
  return rsrp_;
}
void flex_eutra_ref_signal_meas::set_rsrp(::google::protobuf::int32 value) {
  set_has_rsrp();
  rsrp_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_eutra_ref_signal_meas.rsrp)
}

// optional int32 rsrq = 2;
bool flex_eutra_ref_signal_meas::has_rsrq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_eutra_ref_signal_meas::set_has_rsrq() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_eutra_ref_signal_meas::clear_has_rsrq() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_eutra_ref_signal_meas::clear_rsrq() {
  rsrq_ = 0;
  clear_has_rsrq();
}
::google::protobuf::int32 flex_eutra_ref_signal_meas::rsrq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_eutra_ref_signal_meas.rsrq)
  return rsrq_;
}
void flex_eutra_ref_signal_meas::set_rsrq(::google::protobuf::int32 value) {
  set_has_rsrq();
  rsrq_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_eutra_ref_signal_meas.rsrq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_pdcp_stats::kPktTxFieldNumber;
const int flex_pdcp_stats::kPktTxBytesFieldNumber;
const int flex_pdcp_stats::kPktTxSnFieldNumber;
const int flex_pdcp_stats::kPktTxWFieldNumber;
const int flex_pdcp_stats::kPktTxBytesWFieldNumber;
const int flex_pdcp_stats::kPktTxAiatFieldNumber;
const int flex_pdcp_stats::kPktTxAiatWFieldNumber;
const int flex_pdcp_stats::kPktRxFieldNumber;
const int flex_pdcp_stats::kPktRxBytesFieldNumber;
const int flex_pdcp_stats::kPktRxSnFieldNumber;
const int flex_pdcp_stats::kPktRxWFieldNumber;
const int flex_pdcp_stats::kPktRxBytesWFieldNumber;
const int flex_pdcp_stats::kPktRxAiatFieldNumber;
const int flex_pdcp_stats::kPktRxAiatWFieldNumber;
const int flex_pdcp_stats::kPktRxOoFieldNumber;
const int flex_pdcp_stats::kSfnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_pdcp_stats::flex_pdcp_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_pdcp_stats)
}
flex_pdcp_stats::flex_pdcp_stats(const flex_pdcp_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pkt_tx_, &from.pkt_tx_,
    reinterpret_cast<char*>(&pkt_rx_oo_) -
    reinterpret_cast<char*>(&pkt_tx_) + sizeof(pkt_rx_oo_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_pdcp_stats)
}

void flex_pdcp_stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pkt_tx_, 0, reinterpret_cast<char*>(&pkt_rx_oo_) -
    reinterpret_cast<char*>(&pkt_tx_) + sizeof(pkt_rx_oo_));
}

flex_pdcp_stats::~flex_pdcp_stats() {
  // @@protoc_insertion_point(destructor:protocol.flex_pdcp_stats)
  SharedDtor();
}

void flex_pdcp_stats::SharedDtor() {
}

void flex_pdcp_stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_pdcp_stats::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_pdcp_stats& flex_pdcp_stats::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_pdcp_stats* flex_pdcp_stats::New(::google::protobuf::Arena* arena) const {
  flex_pdcp_stats* n = new flex_pdcp_stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_pdcp_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_pdcp_stats)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&pkt_tx_, 0, reinterpret_cast<char*>(&pkt_rx_) -
      reinterpret_cast<char*>(&pkt_tx_) + sizeof(pkt_rx_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&pkt_rx_bytes_, 0, reinterpret_cast<char*>(&pkt_rx_oo_) -
      reinterpret_cast<char*>(&pkt_rx_bytes_) + sizeof(pkt_rx_oo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_pdcp_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_pdcp_stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pkt_tx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pkt_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_tx_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_pkt_tx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_tx_sn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_pkt_tx_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_tx_w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_pkt_tx_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_tx_bytes_w = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pkt_tx_bytes_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_bytes_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_tx_aiat = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_pkt_tx_aiat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_aiat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_tx_aiat_w = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pkt_tx_aiat_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_tx_aiat_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pkt_rx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_bytes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_pkt_rx_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_sn = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_pkt_rx_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_w = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_pkt_rx_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_bytes_w = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_pkt_rx_bytes_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_bytes_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_aiat = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_pkt_rx_aiat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_aiat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_aiat_w = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_pkt_rx_aiat_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_aiat_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pkt_rx_oo = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_pkt_rx_oo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkt_rx_oo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 sfn = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_sfn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sfn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_pdcp_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_pdcp_stats)
  return false;
#undef DO_
}

void flex_pdcp_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_pdcp_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pkt_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pkt_tx(), output);
  }

  // optional uint32 pkt_tx_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkt_tx_bytes(), output);
  }

  // optional uint32 pkt_tx_sn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pkt_tx_sn(), output);
  }

  // optional uint32 pkt_tx_w = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pkt_tx_w(), output);
  }

  // optional uint32 pkt_tx_bytes_w = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pkt_tx_bytes_w(), output);
  }

  // optional uint32 pkt_tx_aiat = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pkt_tx_aiat(), output);
  }

  // optional uint32 pkt_tx_aiat_w = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pkt_tx_aiat_w(), output);
  }

  // optional uint32 pkt_rx = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pkt_rx(), output);
  }

  // optional uint32 pkt_rx_bytes = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pkt_rx_bytes(), output);
  }

  // optional uint32 pkt_rx_sn = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pkt_rx_sn(), output);
  }

  // optional uint32 pkt_rx_w = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->pkt_rx_w(), output);
  }

  // optional uint32 pkt_rx_bytes_w = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->pkt_rx_bytes_w(), output);
  }

  // optional uint32 pkt_rx_aiat = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pkt_rx_aiat(), output);
  }

  // optional uint32 pkt_rx_aiat_w = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pkt_rx_aiat_w(), output);
  }

  // optional uint32 pkt_rx_oo = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->pkt_rx_oo(), output);
  }

  // optional uint64 sfn = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->sfn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_pdcp_stats)
}

::google::protobuf::uint8* flex_pdcp_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_pdcp_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pkt_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pkt_tx(), target);
  }

  // optional uint32 pkt_tx_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pkt_tx_bytes(), target);
  }

  // optional uint32 pkt_tx_sn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pkt_tx_sn(), target);
  }

  // optional uint32 pkt_tx_w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pkt_tx_w(), target);
  }

  // optional uint32 pkt_tx_bytes_w = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pkt_tx_bytes_w(), target);
  }

  // optional uint32 pkt_tx_aiat = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pkt_tx_aiat(), target);
  }

  // optional uint32 pkt_tx_aiat_w = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pkt_tx_aiat_w(), target);
  }

  // optional uint32 pkt_rx = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pkt_rx(), target);
  }

  // optional uint32 pkt_rx_bytes = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pkt_rx_bytes(), target);
  }

  // optional uint32 pkt_rx_sn = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pkt_rx_sn(), target);
  }

  // optional uint32 pkt_rx_w = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->pkt_rx_w(), target);
  }

  // optional uint32 pkt_rx_bytes_w = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->pkt_rx_bytes_w(), target);
  }

  // optional uint32 pkt_rx_aiat = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pkt_rx_aiat(), target);
  }

  // optional uint32 pkt_rx_aiat_w = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pkt_rx_aiat_w(), target);
  }

  // optional uint32 pkt_rx_oo = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->pkt_rx_oo(), target);
  }

  // optional uint64 sfn = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->sfn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_pdcp_stats)
  return target;
}

size_t flex_pdcp_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_pdcp_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 pkt_tx = 1;
    if (has_pkt_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx());
    }

    // optional uint32 pkt_tx_bytes = 2;
    if (has_pkt_tx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx_bytes());
    }

    // optional uint32 pkt_tx_sn = 3;
    if (has_pkt_tx_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx_sn());
    }

    // optional uint32 pkt_tx_w = 4;
    if (has_pkt_tx_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx_w());
    }

    // optional uint32 pkt_tx_bytes_w = 5;
    if (has_pkt_tx_bytes_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx_bytes_w());
    }

    // optional uint32 pkt_tx_aiat = 7;
    if (has_pkt_tx_aiat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx_aiat());
    }

    // optional uint32 pkt_tx_aiat_w = 8;
    if (has_pkt_tx_aiat_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_tx_aiat_w());
    }

    // optional uint32 pkt_rx = 9;
    if (has_pkt_rx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 pkt_rx_bytes = 10;
    if (has_pkt_rx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_bytes());
    }

    // optional uint32 pkt_rx_sn = 11;
    if (has_pkt_rx_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_sn());
    }

    // optional uint32 pkt_rx_w = 12;
    if (has_pkt_rx_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_w());
    }

    // optional uint32 pkt_rx_bytes_w = 13;
    if (has_pkt_rx_bytes_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_bytes_w());
    }

    // optional uint32 pkt_rx_aiat = 14;
    if (has_pkt_rx_aiat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_aiat());
    }

    // optional uint32 pkt_rx_aiat_w = 15;
    if (has_pkt_rx_aiat_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_aiat_w());
    }

    // optional uint64 sfn = 17;
    if (has_sfn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sfn());
    }

    // optional uint32 pkt_rx_oo = 16;
    if (has_pkt_rx_oo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkt_rx_oo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_pdcp_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_pdcp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_pdcp_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_pdcp_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_pdcp_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_pdcp_stats)
    MergeFrom(*source);
  }
}

void flex_pdcp_stats::MergeFrom(const flex_pdcp_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_pdcp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pkt_tx_ = from.pkt_tx_;
    }
    if (cached_has_bits & 0x00000002u) {
      pkt_tx_bytes_ = from.pkt_tx_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      pkt_tx_sn_ = from.pkt_tx_sn_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkt_tx_w_ = from.pkt_tx_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      pkt_tx_bytes_w_ = from.pkt_tx_bytes_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      pkt_tx_aiat_ = from.pkt_tx_aiat_;
    }
    if (cached_has_bits & 0x00000040u) {
      pkt_tx_aiat_w_ = from.pkt_tx_aiat_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      pkt_rx_ = from.pkt_rx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      pkt_rx_bytes_ = from.pkt_rx_bytes_;
    }
    if (cached_has_bits & 0x00000200u) {
      pkt_rx_sn_ = from.pkt_rx_sn_;
    }
    if (cached_has_bits & 0x00000400u) {
      pkt_rx_w_ = from.pkt_rx_w_;
    }
    if (cached_has_bits & 0x00000800u) {
      pkt_rx_bytes_w_ = from.pkt_rx_bytes_w_;
    }
    if (cached_has_bits & 0x00001000u) {
      pkt_rx_aiat_ = from.pkt_rx_aiat_;
    }
    if (cached_has_bits & 0x00002000u) {
      pkt_rx_aiat_w_ = from.pkt_rx_aiat_w_;
    }
    if (cached_has_bits & 0x00004000u) {
      sfn_ = from.sfn_;
    }
    if (cached_has_bits & 0x00008000u) {
      pkt_rx_oo_ = from.pkt_rx_oo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_pdcp_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_pdcp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_pdcp_stats::CopyFrom(const flex_pdcp_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_pdcp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_pdcp_stats::IsInitialized() const {
  return true;
}

void flex_pdcp_stats::Swap(flex_pdcp_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_pdcp_stats::InternalSwap(flex_pdcp_stats* other) {
  std::swap(pkt_tx_, other->pkt_tx_);
  std::swap(pkt_tx_bytes_, other->pkt_tx_bytes_);
  std::swap(pkt_tx_sn_, other->pkt_tx_sn_);
  std::swap(pkt_tx_w_, other->pkt_tx_w_);
  std::swap(pkt_tx_bytes_w_, other->pkt_tx_bytes_w_);
  std::swap(pkt_tx_aiat_, other->pkt_tx_aiat_);
  std::swap(pkt_tx_aiat_w_, other->pkt_tx_aiat_w_);
  std::swap(pkt_rx_, other->pkt_rx_);
  std::swap(pkt_rx_bytes_, other->pkt_rx_bytes_);
  std::swap(pkt_rx_sn_, other->pkt_rx_sn_);
  std::swap(pkt_rx_w_, other->pkt_rx_w_);
  std::swap(pkt_rx_bytes_w_, other->pkt_rx_bytes_w_);
  std::swap(pkt_rx_aiat_, other->pkt_rx_aiat_);
  std::swap(pkt_rx_aiat_w_, other->pkt_rx_aiat_w_);
  std::swap(sfn_, other->sfn_);
  std::swap(pkt_rx_oo_, other->pkt_rx_oo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_pdcp_stats::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_pdcp_stats

// optional uint32 pkt_tx = 1;
bool flex_pdcp_stats::has_pkt_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_pdcp_stats::clear_has_pkt_tx() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_pdcp_stats::clear_pkt_tx() {
  pkt_tx_ = 0u;
  clear_has_pkt_tx();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx)
  return pkt_tx_;
}
void flex_pdcp_stats::set_pkt_tx(::google::protobuf::uint32 value) {
  set_has_pkt_tx();
  pkt_tx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx)
}

// optional uint32 pkt_tx_bytes = 2;
bool flex_pdcp_stats::has_pkt_tx_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_pdcp_stats::clear_has_pkt_tx_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_pdcp_stats::clear_pkt_tx_bytes() {
  pkt_tx_bytes_ = 0u;
  clear_has_pkt_tx_bytes();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx_bytes() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx_bytes)
  return pkt_tx_bytes_;
}
void flex_pdcp_stats::set_pkt_tx_bytes(::google::protobuf::uint32 value) {
  set_has_pkt_tx_bytes();
  pkt_tx_bytes_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx_bytes)
}

// optional uint32 pkt_tx_sn = 3;
bool flex_pdcp_stats::has_pkt_tx_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx_sn() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_pdcp_stats::clear_has_pkt_tx_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_pdcp_stats::clear_pkt_tx_sn() {
  pkt_tx_sn_ = 0u;
  clear_has_pkt_tx_sn();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx_sn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx_sn)
  return pkt_tx_sn_;
}
void flex_pdcp_stats::set_pkt_tx_sn(::google::protobuf::uint32 value) {
  set_has_pkt_tx_sn();
  pkt_tx_sn_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx_sn)
}

// optional uint32 pkt_tx_w = 4;
bool flex_pdcp_stats::has_pkt_tx_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx_w() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_pdcp_stats::clear_has_pkt_tx_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_pdcp_stats::clear_pkt_tx_w() {
  pkt_tx_w_ = 0u;
  clear_has_pkt_tx_w();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx_w() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx_w)
  return pkt_tx_w_;
}
void flex_pdcp_stats::set_pkt_tx_w(::google::protobuf::uint32 value) {
  set_has_pkt_tx_w();
  pkt_tx_w_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx_w)
}

// optional uint32 pkt_tx_bytes_w = 5;
bool flex_pdcp_stats::has_pkt_tx_bytes_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx_bytes_w() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_pdcp_stats::clear_has_pkt_tx_bytes_w() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_pdcp_stats::clear_pkt_tx_bytes_w() {
  pkt_tx_bytes_w_ = 0u;
  clear_has_pkt_tx_bytes_w();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx_bytes_w() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx_bytes_w)
  return pkt_tx_bytes_w_;
}
void flex_pdcp_stats::set_pkt_tx_bytes_w(::google::protobuf::uint32 value) {
  set_has_pkt_tx_bytes_w();
  pkt_tx_bytes_w_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx_bytes_w)
}

// optional uint32 pkt_tx_aiat = 7;
bool flex_pdcp_stats::has_pkt_tx_aiat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx_aiat() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_pdcp_stats::clear_has_pkt_tx_aiat() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_pdcp_stats::clear_pkt_tx_aiat() {
  pkt_tx_aiat_ = 0u;
  clear_has_pkt_tx_aiat();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx_aiat() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx_aiat)
  return pkt_tx_aiat_;
}
void flex_pdcp_stats::set_pkt_tx_aiat(::google::protobuf::uint32 value) {
  set_has_pkt_tx_aiat();
  pkt_tx_aiat_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx_aiat)
}

// optional uint32 pkt_tx_aiat_w = 8;
bool flex_pdcp_stats::has_pkt_tx_aiat_w() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_pdcp_stats::set_has_pkt_tx_aiat_w() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_pdcp_stats::clear_has_pkt_tx_aiat_w() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_pdcp_stats::clear_pkt_tx_aiat_w() {
  pkt_tx_aiat_w_ = 0u;
  clear_has_pkt_tx_aiat_w();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_tx_aiat_w() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_tx_aiat_w)
  return pkt_tx_aiat_w_;
}
void flex_pdcp_stats::set_pkt_tx_aiat_w(::google::protobuf::uint32 value) {
  set_has_pkt_tx_aiat_w();
  pkt_tx_aiat_w_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_tx_aiat_w)
}

// optional uint32 pkt_rx = 9;
bool flex_pdcp_stats::has_pkt_rx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_pdcp_stats::clear_has_pkt_rx() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_pdcp_stats::clear_pkt_rx() {
  pkt_rx_ = 0u;
  clear_has_pkt_rx();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx)
  return pkt_rx_;
}
void flex_pdcp_stats::set_pkt_rx(::google::protobuf::uint32 value) {
  set_has_pkt_rx();
  pkt_rx_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx)
}

// optional uint32 pkt_rx_bytes = 10;
bool flex_pdcp_stats::has_pkt_rx_bytes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_bytes() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_pdcp_stats::clear_has_pkt_rx_bytes() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_pdcp_stats::clear_pkt_rx_bytes() {
  pkt_rx_bytes_ = 0u;
  clear_has_pkt_rx_bytes();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_bytes() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_bytes)
  return pkt_rx_bytes_;
}
void flex_pdcp_stats::set_pkt_rx_bytes(::google::protobuf::uint32 value) {
  set_has_pkt_rx_bytes();
  pkt_rx_bytes_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_bytes)
}

// optional uint32 pkt_rx_sn = 11;
bool flex_pdcp_stats::has_pkt_rx_sn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_sn() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_pdcp_stats::clear_has_pkt_rx_sn() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_pdcp_stats::clear_pkt_rx_sn() {
  pkt_rx_sn_ = 0u;
  clear_has_pkt_rx_sn();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_sn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_sn)
  return pkt_rx_sn_;
}
void flex_pdcp_stats::set_pkt_rx_sn(::google::protobuf::uint32 value) {
  set_has_pkt_rx_sn();
  pkt_rx_sn_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_sn)
}

// optional uint32 pkt_rx_w = 12;
bool flex_pdcp_stats::has_pkt_rx_w() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_w() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_pdcp_stats::clear_has_pkt_rx_w() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_pdcp_stats::clear_pkt_rx_w() {
  pkt_rx_w_ = 0u;
  clear_has_pkt_rx_w();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_w() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_w)
  return pkt_rx_w_;
}
void flex_pdcp_stats::set_pkt_rx_w(::google::protobuf::uint32 value) {
  set_has_pkt_rx_w();
  pkt_rx_w_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_w)
}

// optional uint32 pkt_rx_bytes_w = 13;
bool flex_pdcp_stats::has_pkt_rx_bytes_w() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_bytes_w() {
  _has_bits_[0] |= 0x00000800u;
}
void flex_pdcp_stats::clear_has_pkt_rx_bytes_w() {
  _has_bits_[0] &= ~0x00000800u;
}
void flex_pdcp_stats::clear_pkt_rx_bytes_w() {
  pkt_rx_bytes_w_ = 0u;
  clear_has_pkt_rx_bytes_w();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_bytes_w() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_bytes_w)
  return pkt_rx_bytes_w_;
}
void flex_pdcp_stats::set_pkt_rx_bytes_w(::google::protobuf::uint32 value) {
  set_has_pkt_rx_bytes_w();
  pkt_rx_bytes_w_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_bytes_w)
}

// optional uint32 pkt_rx_aiat = 14;
bool flex_pdcp_stats::has_pkt_rx_aiat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_aiat() {
  _has_bits_[0] |= 0x00001000u;
}
void flex_pdcp_stats::clear_has_pkt_rx_aiat() {
  _has_bits_[0] &= ~0x00001000u;
}
void flex_pdcp_stats::clear_pkt_rx_aiat() {
  pkt_rx_aiat_ = 0u;
  clear_has_pkt_rx_aiat();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_aiat() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_aiat)
  return pkt_rx_aiat_;
}
void flex_pdcp_stats::set_pkt_rx_aiat(::google::protobuf::uint32 value) {
  set_has_pkt_rx_aiat();
  pkt_rx_aiat_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_aiat)
}

// optional uint32 pkt_rx_aiat_w = 15;
bool flex_pdcp_stats::has_pkt_rx_aiat_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_aiat_w() {
  _has_bits_[0] |= 0x00002000u;
}
void flex_pdcp_stats::clear_has_pkt_rx_aiat_w() {
  _has_bits_[0] &= ~0x00002000u;
}
void flex_pdcp_stats::clear_pkt_rx_aiat_w() {
  pkt_rx_aiat_w_ = 0u;
  clear_has_pkt_rx_aiat_w();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_aiat_w() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_aiat_w)
  return pkt_rx_aiat_w_;
}
void flex_pdcp_stats::set_pkt_rx_aiat_w(::google::protobuf::uint32 value) {
  set_has_pkt_rx_aiat_w();
  pkt_rx_aiat_w_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_aiat_w)
}

// optional uint32 pkt_rx_oo = 16;
bool flex_pdcp_stats::has_pkt_rx_oo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void flex_pdcp_stats::set_has_pkt_rx_oo() {
  _has_bits_[0] |= 0x00008000u;
}
void flex_pdcp_stats::clear_has_pkt_rx_oo() {
  _has_bits_[0] &= ~0x00008000u;
}
void flex_pdcp_stats::clear_pkt_rx_oo() {
  pkt_rx_oo_ = 0u;
  clear_has_pkt_rx_oo();
}
::google::protobuf::uint32 flex_pdcp_stats::pkt_rx_oo() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.pkt_rx_oo)
  return pkt_rx_oo_;
}
void flex_pdcp_stats::set_pkt_rx_oo(::google::protobuf::uint32 value) {
  set_has_pkt_rx_oo();
  pkt_rx_oo_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.pkt_rx_oo)
}

// optional uint64 sfn = 17;
bool flex_pdcp_stats::has_sfn() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void flex_pdcp_stats::set_has_sfn() {
  _has_bits_[0] |= 0x00004000u;
}
void flex_pdcp_stats::clear_has_sfn() {
  _has_bits_[0] &= ~0x00004000u;
}
void flex_pdcp_stats::clear_sfn() {
  sfn_ = GOOGLE_ULONGLONG(0);
  clear_has_sfn();
}
::google::protobuf::uint64 flex_pdcp_stats::sfn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcp_stats.sfn)
  return sfn_;
}
void flex_pdcp_stats::set_sfn(::google::protobuf::uint64 value) {
  set_has_sfn();
  sfn_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_pdcp_stats.sfn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_mac_stats::kTbsDlFieldNumber;
const int flex_mac_stats::kTbsUlFieldNumber;
const int flex_mac_stats::kPrbRetxDlFieldNumber;
const int flex_mac_stats::kPrbRetxUlFieldNumber;
const int flex_mac_stats::kPrbDlFieldNumber;
const int flex_mac_stats::kPrbUlFieldNumber;
const int flex_mac_stats::kMcs1DlFieldNumber;
const int flex_mac_stats::kMcs2DlFieldNumber;
const int flex_mac_stats::kMcs1UlFieldNumber;
const int flex_mac_stats::kMcs2UlFieldNumber;
const int flex_mac_stats::kTotalBytesSdusUlFieldNumber;
const int flex_mac_stats::kTotalBytesSdusDlFieldNumber;
const int flex_mac_stats::kTotalPrbRetxDlFieldNumber;
const int flex_mac_stats::kTotalPrbRetxUlFieldNumber;
const int flex_mac_stats::kTotalPrbDlFieldNumber;
const int flex_mac_stats::kTotalPrbUlFieldNumber;
const int flex_mac_stats::kTotalPduDlFieldNumber;
const int flex_mac_stats::kTotalPduUlFieldNumber;
const int flex_mac_stats::kTotalTbsDlFieldNumber;
const int flex_mac_stats::kTotalTbsUlFieldNumber;
const int flex_mac_stats::kMacSdusDlFieldNumber;
const int flex_mac_stats::kHarqRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_mac_stats::flex_mac_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_mac_stats)
}
flex_mac_stats::flex_mac_stats(const flex_mac_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mac_sdus_dl_(from.mac_sdus_dl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tbs_dl_, &from.tbs_dl_,
    reinterpret_cast<char*>(&harq_round_) -
    reinterpret_cast<char*>(&tbs_dl_) + sizeof(harq_round_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_mac_stats)
}

void flex_mac_stats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tbs_dl_, 0, reinterpret_cast<char*>(&harq_round_) -
    reinterpret_cast<char*>(&tbs_dl_) + sizeof(harq_round_));
}

flex_mac_stats::~flex_mac_stats() {
  // @@protoc_insertion_point(destructor:protocol.flex_mac_stats)
  SharedDtor();
}

void flex_mac_stats::SharedDtor() {
}

void flex_mac_stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_mac_stats::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_mac_stats& flex_mac_stats::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_mac_stats* flex_mac_stats::New(::google::protobuf::Arena* arena) const {
  flex_mac_stats* n = new flex_mac_stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_mac_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_mac_stats)
  mac_sdus_dl_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tbs_dl_, 0, reinterpret_cast<char*>(&mcs2_dl_) -
      reinterpret_cast<char*>(&tbs_dl_) + sizeof(mcs2_dl_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&mcs1_ul_, 0, reinterpret_cast<char*>(&total_prb_ul_) -
      reinterpret_cast<char*>(&mcs1_ul_) + sizeof(total_prb_ul_));
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ::memset(&total_pdu_dl_, 0, reinterpret_cast<char*>(&harq_round_) -
      reinterpret_cast<char*>(&total_pdu_dl_) + sizeof(harq_round_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_mac_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_mac_stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tbs_dl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tbs_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbs_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tbs_ul = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tbs_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tbs_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prb_retx_dl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prb_retx_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prb_retx_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prb_retx_ul = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_prb_retx_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prb_retx_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prb_dl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_prb_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prb_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prb_ul = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_prb_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prb_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mcs1_dl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_mcs1_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs1_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mcs2_dl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_mcs2_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs2_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mcs1_ul = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_mcs1_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs1_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mcs2_ul = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_mcs2_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcs2_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_bytes_sdus_ul = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_total_bytes_sdus_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_bytes_sdus_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_bytes_sdus_dl = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_total_bytes_sdus_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_bytes_sdus_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_prb_retx_dl = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_total_prb_retx_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prb_retx_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_prb_retx_ul = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_total_prb_retx_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prb_retx_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_prb_dl = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_total_prb_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prb_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_prb_ul = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_total_prb_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prb_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_pdu_dl = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_total_pdu_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pdu_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_pdu_ul = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_total_pdu_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pdu_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_tbs_dl = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_total_tbs_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_tbs_dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_tbs_ul = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_total_tbs_ul();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_tbs_ul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mac_sdus_dl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 harq_round = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_harq_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harq_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_mac_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_mac_stats)
  return false;
#undef DO_
}

void flex_mac_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_mac_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tbs_dl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tbs_dl(), output);
  }

  // optional uint32 tbs_ul = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tbs_ul(), output);
  }

  // optional uint32 prb_retx_dl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prb_retx_dl(), output);
  }

  // optional uint32 prb_retx_ul = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prb_retx_ul(), output);
  }

  // optional uint32 prb_dl = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prb_dl(), output);
  }

  // optional uint32 prb_ul = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prb_ul(), output);
  }

  // optional uint32 mcs1_dl = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mcs1_dl(), output);
  }

  // optional uint32 mcs2_dl = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mcs2_dl(), output);
  }

  // optional uint32 mcs1_ul = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mcs1_ul(), output);
  }

  // optional uint32 mcs2_ul = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mcs2_ul(), output);
  }

  // optional uint32 total_bytes_sdus_ul = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_bytes_sdus_ul(), output);
  }

  // optional uint32 total_bytes_sdus_dl = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->total_bytes_sdus_dl(), output);
  }

  // optional uint32 total_prb_retx_dl = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->total_prb_retx_dl(), output);
  }

  // optional uint32 total_prb_retx_ul = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_prb_retx_ul(), output);
  }

  // optional uint32 total_prb_dl = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->total_prb_dl(), output);
  }

  // optional uint32 total_prb_ul = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->total_prb_ul(), output);
  }

  // optional uint32 total_pdu_dl = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->total_pdu_dl(), output);
  }

  // optional uint32 total_pdu_ul = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->total_pdu_ul(), output);
  }

  // optional uint32 total_tbs_dl = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->total_tbs_dl(), output);
  }

  // optional uint32 total_tbs_ul = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->total_tbs_ul(), output);
  }

  // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
  for (unsigned int i = 0, n = this->mac_sdus_dl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->mac_sdus_dl(i), output);
  }

  // optional uint32 harq_round = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->harq_round(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_mac_stats)
}

::google::protobuf::uint8* flex_mac_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_mac_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tbs_dl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tbs_dl(), target);
  }

  // optional uint32 tbs_ul = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tbs_ul(), target);
  }

  // optional uint32 prb_retx_dl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prb_retx_dl(), target);
  }

  // optional uint32 prb_retx_ul = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prb_retx_ul(), target);
  }

  // optional uint32 prb_dl = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prb_dl(), target);
  }

  // optional uint32 prb_ul = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prb_ul(), target);
  }

  // optional uint32 mcs1_dl = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mcs1_dl(), target);
  }

  // optional uint32 mcs2_dl = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mcs2_dl(), target);
  }

  // optional uint32 mcs1_ul = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mcs1_ul(), target);
  }

  // optional uint32 mcs2_ul = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mcs2_ul(), target);
  }

  // optional uint32 total_bytes_sdus_ul = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_bytes_sdus_ul(), target);
  }

  // optional uint32 total_bytes_sdus_dl = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->total_bytes_sdus_dl(), target);
  }

  // optional uint32 total_prb_retx_dl = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->total_prb_retx_dl(), target);
  }

  // optional uint32 total_prb_retx_ul = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_prb_retx_ul(), target);
  }

  // optional uint32 total_prb_dl = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->total_prb_dl(), target);
  }

  // optional uint32 total_prb_ul = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->total_prb_ul(), target);
  }

  // optional uint32 total_pdu_dl = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->total_pdu_dl(), target);
  }

  // optional uint32 total_pdu_ul = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->total_pdu_ul(), target);
  }

  // optional uint32 total_tbs_dl = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->total_tbs_dl(), target);
  }

  // optional uint32 total_tbs_ul = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->total_tbs_ul(), target);
  }

  // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
  for (unsigned int i = 0, n = this->mac_sdus_dl_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->mac_sdus_dl(i), deterministic, target);
  }

  // optional uint32 harq_round = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->harq_round(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_mac_stats)
  return target;
}

size_t flex_mac_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_mac_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
  {
    unsigned int count = this->mac_sdus_dl_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mac_sdus_dl(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 tbs_dl = 1;
    if (has_tbs_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbs_dl());
    }

    // optional uint32 tbs_ul = 2;
    if (has_tbs_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tbs_ul());
    }

    // optional uint32 prb_retx_dl = 3;
    if (has_prb_retx_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prb_retx_dl());
    }

    // optional uint32 prb_retx_ul = 4;
    if (has_prb_retx_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prb_retx_ul());
    }

    // optional uint32 prb_dl = 5;
    if (has_prb_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prb_dl());
    }

    // optional uint32 prb_ul = 6;
    if (has_prb_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prb_ul());
    }

    // optional uint32 mcs1_dl = 7;
    if (has_mcs1_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcs1_dl());
    }

    // optional uint32 mcs2_dl = 8;
    if (has_mcs2_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcs2_dl());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 mcs1_ul = 9;
    if (has_mcs1_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcs1_ul());
    }

    // optional uint32 mcs2_ul = 10;
    if (has_mcs2_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mcs2_ul());
    }

    // optional uint32 total_bytes_sdus_ul = 11;
    if (has_total_bytes_sdus_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_bytes_sdus_ul());
    }

    // optional uint32 total_bytes_sdus_dl = 12;
    if (has_total_bytes_sdus_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_bytes_sdus_dl());
    }

    // optional uint32 total_prb_retx_dl = 13;
    if (has_total_prb_retx_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_prb_retx_dl());
    }

    // optional uint32 total_prb_retx_ul = 14;
    if (has_total_prb_retx_ul()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_prb_retx_ul());
    }

    // optional uint32 total_prb_dl = 15;
    if (has_total_prb_dl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_prb_dl());
    }

    // optional uint32 total_prb_ul = 16;
    if (has_total_prb_ul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_prb_ul());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 total_pdu_dl = 17;
    if (has_total_pdu_dl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pdu_dl());
    }

    // optional uint32 total_pdu_ul = 18;
    if (has_total_pdu_ul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_pdu_ul());
    }

    // optional uint32 total_tbs_dl = 19;
    if (has_total_tbs_dl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_tbs_dl());
    }

    // optional uint32 total_tbs_ul = 20;
    if (has_total_tbs_ul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_tbs_ul());
    }

    // optional uint32 harq_round = 22;
    if (has_harq_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harq_round());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_mac_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_mac_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_mac_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_mac_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_mac_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_mac_stats)
    MergeFrom(*source);
  }
}

void flex_mac_stats::MergeFrom(const flex_mac_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_mac_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mac_sdus_dl_.MergeFrom(from.mac_sdus_dl_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tbs_dl_ = from.tbs_dl_;
    }
    if (cached_has_bits & 0x00000002u) {
      tbs_ul_ = from.tbs_ul_;
    }
    if (cached_has_bits & 0x00000004u) {
      prb_retx_dl_ = from.prb_retx_dl_;
    }
    if (cached_has_bits & 0x00000008u) {
      prb_retx_ul_ = from.prb_retx_ul_;
    }
    if (cached_has_bits & 0x00000010u) {
      prb_dl_ = from.prb_dl_;
    }
    if (cached_has_bits & 0x00000020u) {
      prb_ul_ = from.prb_ul_;
    }
    if (cached_has_bits & 0x00000040u) {
      mcs1_dl_ = from.mcs1_dl_;
    }
    if (cached_has_bits & 0x00000080u) {
      mcs2_dl_ = from.mcs2_dl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mcs1_ul_ = from.mcs1_ul_;
    }
    if (cached_has_bits & 0x00000200u) {
      mcs2_ul_ = from.mcs2_ul_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_bytes_sdus_ul_ = from.total_bytes_sdus_ul_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_bytes_sdus_dl_ = from.total_bytes_sdus_dl_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_prb_retx_dl_ = from.total_prb_retx_dl_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_prb_retx_ul_ = from.total_prb_retx_ul_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_prb_dl_ = from.total_prb_dl_;
    }
    if (cached_has_bits & 0x00008000u) {
      total_prb_ul_ = from.total_prb_ul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      total_pdu_dl_ = from.total_pdu_dl_;
    }
    if (cached_has_bits & 0x00020000u) {
      total_pdu_ul_ = from.total_pdu_ul_;
    }
    if (cached_has_bits & 0x00040000u) {
      total_tbs_dl_ = from.total_tbs_dl_;
    }
    if (cached_has_bits & 0x00080000u) {
      total_tbs_ul_ = from.total_tbs_ul_;
    }
    if (cached_has_bits & 0x00100000u) {
      harq_round_ = from.harq_round_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_mac_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_mac_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_mac_stats::CopyFrom(const flex_mac_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_mac_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_mac_stats::IsInitialized() const {
  return true;
}

void flex_mac_stats::Swap(flex_mac_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_mac_stats::InternalSwap(flex_mac_stats* other) {
  mac_sdus_dl_.InternalSwap(&other->mac_sdus_dl_);
  std::swap(tbs_dl_, other->tbs_dl_);
  std::swap(tbs_ul_, other->tbs_ul_);
  std::swap(prb_retx_dl_, other->prb_retx_dl_);
  std::swap(prb_retx_ul_, other->prb_retx_ul_);
  std::swap(prb_dl_, other->prb_dl_);
  std::swap(prb_ul_, other->prb_ul_);
  std::swap(mcs1_dl_, other->mcs1_dl_);
  std::swap(mcs2_dl_, other->mcs2_dl_);
  std::swap(mcs1_ul_, other->mcs1_ul_);
  std::swap(mcs2_ul_, other->mcs2_ul_);
  std::swap(total_bytes_sdus_ul_, other->total_bytes_sdus_ul_);
  std::swap(total_bytes_sdus_dl_, other->total_bytes_sdus_dl_);
  std::swap(total_prb_retx_dl_, other->total_prb_retx_dl_);
  std::swap(total_prb_retx_ul_, other->total_prb_retx_ul_);
  std::swap(total_prb_dl_, other->total_prb_dl_);
  std::swap(total_prb_ul_, other->total_prb_ul_);
  std::swap(total_pdu_dl_, other->total_pdu_dl_);
  std::swap(total_pdu_ul_, other->total_pdu_ul_);
  std::swap(total_tbs_dl_, other->total_tbs_dl_);
  std::swap(total_tbs_ul_, other->total_tbs_ul_);
  std::swap(harq_round_, other->harq_round_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_mac_stats::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_mac_stats

// optional uint32 tbs_dl = 1;
bool flex_mac_stats::has_tbs_dl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_mac_stats::set_has_tbs_dl() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_mac_stats::clear_has_tbs_dl() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_mac_stats::clear_tbs_dl() {
  tbs_dl_ = 0u;
  clear_has_tbs_dl();
}
::google::protobuf::uint32 flex_mac_stats::tbs_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.tbs_dl)
  return tbs_dl_;
}
void flex_mac_stats::set_tbs_dl(::google::protobuf::uint32 value) {
  set_has_tbs_dl();
  tbs_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.tbs_dl)
}

// optional uint32 tbs_ul = 2;
bool flex_mac_stats::has_tbs_ul() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_mac_stats::set_has_tbs_ul() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_mac_stats::clear_has_tbs_ul() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_mac_stats::clear_tbs_ul() {
  tbs_ul_ = 0u;
  clear_has_tbs_ul();
}
::google::protobuf::uint32 flex_mac_stats::tbs_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.tbs_ul)
  return tbs_ul_;
}
void flex_mac_stats::set_tbs_ul(::google::protobuf::uint32 value) {
  set_has_tbs_ul();
  tbs_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.tbs_ul)
}

// optional uint32 prb_retx_dl = 3;
bool flex_mac_stats::has_prb_retx_dl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_mac_stats::set_has_prb_retx_dl() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_mac_stats::clear_has_prb_retx_dl() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_mac_stats::clear_prb_retx_dl() {
  prb_retx_dl_ = 0u;
  clear_has_prb_retx_dl();
}
::google::protobuf::uint32 flex_mac_stats::prb_retx_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.prb_retx_dl)
  return prb_retx_dl_;
}
void flex_mac_stats::set_prb_retx_dl(::google::protobuf::uint32 value) {
  set_has_prb_retx_dl();
  prb_retx_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.prb_retx_dl)
}

// optional uint32 prb_retx_ul = 4;
bool flex_mac_stats::has_prb_retx_ul() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_mac_stats::set_has_prb_retx_ul() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_mac_stats::clear_has_prb_retx_ul() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_mac_stats::clear_prb_retx_ul() {
  prb_retx_ul_ = 0u;
  clear_has_prb_retx_ul();
}
::google::protobuf::uint32 flex_mac_stats::prb_retx_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.prb_retx_ul)
  return prb_retx_ul_;
}
void flex_mac_stats::set_prb_retx_ul(::google::protobuf::uint32 value) {
  set_has_prb_retx_ul();
  prb_retx_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.prb_retx_ul)
}

// optional uint32 prb_dl = 5;
bool flex_mac_stats::has_prb_dl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_mac_stats::set_has_prb_dl() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_mac_stats::clear_has_prb_dl() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_mac_stats::clear_prb_dl() {
  prb_dl_ = 0u;
  clear_has_prb_dl();
}
::google::protobuf::uint32 flex_mac_stats::prb_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.prb_dl)
  return prb_dl_;
}
void flex_mac_stats::set_prb_dl(::google::protobuf::uint32 value) {
  set_has_prb_dl();
  prb_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.prb_dl)
}

// optional uint32 prb_ul = 6;
bool flex_mac_stats::has_prb_ul() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void flex_mac_stats::set_has_prb_ul() {
  _has_bits_[0] |= 0x00000020u;
}
void flex_mac_stats::clear_has_prb_ul() {
  _has_bits_[0] &= ~0x00000020u;
}
void flex_mac_stats::clear_prb_ul() {
  prb_ul_ = 0u;
  clear_has_prb_ul();
}
::google::protobuf::uint32 flex_mac_stats::prb_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.prb_ul)
  return prb_ul_;
}
void flex_mac_stats::set_prb_ul(::google::protobuf::uint32 value) {
  set_has_prb_ul();
  prb_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.prb_ul)
}

// optional uint32 mcs1_dl = 7;
bool flex_mac_stats::has_mcs1_dl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void flex_mac_stats::set_has_mcs1_dl() {
  _has_bits_[0] |= 0x00000040u;
}
void flex_mac_stats::clear_has_mcs1_dl() {
  _has_bits_[0] &= ~0x00000040u;
}
void flex_mac_stats::clear_mcs1_dl() {
  mcs1_dl_ = 0u;
  clear_has_mcs1_dl();
}
::google::protobuf::uint32 flex_mac_stats::mcs1_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.mcs1_dl)
  return mcs1_dl_;
}
void flex_mac_stats::set_mcs1_dl(::google::protobuf::uint32 value) {
  set_has_mcs1_dl();
  mcs1_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.mcs1_dl)
}

// optional uint32 mcs2_dl = 8;
bool flex_mac_stats::has_mcs2_dl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void flex_mac_stats::set_has_mcs2_dl() {
  _has_bits_[0] |= 0x00000080u;
}
void flex_mac_stats::clear_has_mcs2_dl() {
  _has_bits_[0] &= ~0x00000080u;
}
void flex_mac_stats::clear_mcs2_dl() {
  mcs2_dl_ = 0u;
  clear_has_mcs2_dl();
}
::google::protobuf::uint32 flex_mac_stats::mcs2_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.mcs2_dl)
  return mcs2_dl_;
}
void flex_mac_stats::set_mcs2_dl(::google::protobuf::uint32 value) {
  set_has_mcs2_dl();
  mcs2_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.mcs2_dl)
}

// optional uint32 mcs1_ul = 9;
bool flex_mac_stats::has_mcs1_ul() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void flex_mac_stats::set_has_mcs1_ul() {
  _has_bits_[0] |= 0x00000100u;
}
void flex_mac_stats::clear_has_mcs1_ul() {
  _has_bits_[0] &= ~0x00000100u;
}
void flex_mac_stats::clear_mcs1_ul() {
  mcs1_ul_ = 0u;
  clear_has_mcs1_ul();
}
::google::protobuf::uint32 flex_mac_stats::mcs1_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.mcs1_ul)
  return mcs1_ul_;
}
void flex_mac_stats::set_mcs1_ul(::google::protobuf::uint32 value) {
  set_has_mcs1_ul();
  mcs1_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.mcs1_ul)
}

// optional uint32 mcs2_ul = 10;
bool flex_mac_stats::has_mcs2_ul() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void flex_mac_stats::set_has_mcs2_ul() {
  _has_bits_[0] |= 0x00000200u;
}
void flex_mac_stats::clear_has_mcs2_ul() {
  _has_bits_[0] &= ~0x00000200u;
}
void flex_mac_stats::clear_mcs2_ul() {
  mcs2_ul_ = 0u;
  clear_has_mcs2_ul();
}
::google::protobuf::uint32 flex_mac_stats::mcs2_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.mcs2_ul)
  return mcs2_ul_;
}
void flex_mac_stats::set_mcs2_ul(::google::protobuf::uint32 value) {
  set_has_mcs2_ul();
  mcs2_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.mcs2_ul)
}

// optional uint32 total_bytes_sdus_ul = 11;
bool flex_mac_stats::has_total_bytes_sdus_ul() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void flex_mac_stats::set_has_total_bytes_sdus_ul() {
  _has_bits_[0] |= 0x00000400u;
}
void flex_mac_stats::clear_has_total_bytes_sdus_ul() {
  _has_bits_[0] &= ~0x00000400u;
}
void flex_mac_stats::clear_total_bytes_sdus_ul() {
  total_bytes_sdus_ul_ = 0u;
  clear_has_total_bytes_sdus_ul();
}
::google::protobuf::uint32 flex_mac_stats::total_bytes_sdus_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_bytes_sdus_ul)
  return total_bytes_sdus_ul_;
}
void flex_mac_stats::set_total_bytes_sdus_ul(::google::protobuf::uint32 value) {
  set_has_total_bytes_sdus_ul();
  total_bytes_sdus_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_bytes_sdus_ul)
}

// optional uint32 total_bytes_sdus_dl = 12;
bool flex_mac_stats::has_total_bytes_sdus_dl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void flex_mac_stats::set_has_total_bytes_sdus_dl() {
  _has_bits_[0] |= 0x00000800u;
}
void flex_mac_stats::clear_has_total_bytes_sdus_dl() {
  _has_bits_[0] &= ~0x00000800u;
}
void flex_mac_stats::clear_total_bytes_sdus_dl() {
  total_bytes_sdus_dl_ = 0u;
  clear_has_total_bytes_sdus_dl();
}
::google::protobuf::uint32 flex_mac_stats::total_bytes_sdus_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_bytes_sdus_dl)
  return total_bytes_sdus_dl_;
}
void flex_mac_stats::set_total_bytes_sdus_dl(::google::protobuf::uint32 value) {
  set_has_total_bytes_sdus_dl();
  total_bytes_sdus_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_bytes_sdus_dl)
}

// optional uint32 total_prb_retx_dl = 13;
bool flex_mac_stats::has_total_prb_retx_dl() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void flex_mac_stats::set_has_total_prb_retx_dl() {
  _has_bits_[0] |= 0x00001000u;
}
void flex_mac_stats::clear_has_total_prb_retx_dl() {
  _has_bits_[0] &= ~0x00001000u;
}
void flex_mac_stats::clear_total_prb_retx_dl() {
  total_prb_retx_dl_ = 0u;
  clear_has_total_prb_retx_dl();
}
::google::protobuf::uint32 flex_mac_stats::total_prb_retx_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_prb_retx_dl)
  return total_prb_retx_dl_;
}
void flex_mac_stats::set_total_prb_retx_dl(::google::protobuf::uint32 value) {
  set_has_total_prb_retx_dl();
  total_prb_retx_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_prb_retx_dl)
}

// optional uint32 total_prb_retx_ul = 14;
bool flex_mac_stats::has_total_prb_retx_ul() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void flex_mac_stats::set_has_total_prb_retx_ul() {
  _has_bits_[0] |= 0x00002000u;
}
void flex_mac_stats::clear_has_total_prb_retx_ul() {
  _has_bits_[0] &= ~0x00002000u;
}
void flex_mac_stats::clear_total_prb_retx_ul() {
  total_prb_retx_ul_ = 0u;
  clear_has_total_prb_retx_ul();
}
::google::protobuf::uint32 flex_mac_stats::total_prb_retx_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_prb_retx_ul)
  return total_prb_retx_ul_;
}
void flex_mac_stats::set_total_prb_retx_ul(::google::protobuf::uint32 value) {
  set_has_total_prb_retx_ul();
  total_prb_retx_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_prb_retx_ul)
}

// optional uint32 total_prb_dl = 15;
bool flex_mac_stats::has_total_prb_dl() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void flex_mac_stats::set_has_total_prb_dl() {
  _has_bits_[0] |= 0x00004000u;
}
void flex_mac_stats::clear_has_total_prb_dl() {
  _has_bits_[0] &= ~0x00004000u;
}
void flex_mac_stats::clear_total_prb_dl() {
  total_prb_dl_ = 0u;
  clear_has_total_prb_dl();
}
::google::protobuf::uint32 flex_mac_stats::total_prb_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_prb_dl)
  return total_prb_dl_;
}
void flex_mac_stats::set_total_prb_dl(::google::protobuf::uint32 value) {
  set_has_total_prb_dl();
  total_prb_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_prb_dl)
}

// optional uint32 total_prb_ul = 16;
bool flex_mac_stats::has_total_prb_ul() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void flex_mac_stats::set_has_total_prb_ul() {
  _has_bits_[0] |= 0x00008000u;
}
void flex_mac_stats::clear_has_total_prb_ul() {
  _has_bits_[0] &= ~0x00008000u;
}
void flex_mac_stats::clear_total_prb_ul() {
  total_prb_ul_ = 0u;
  clear_has_total_prb_ul();
}
::google::protobuf::uint32 flex_mac_stats::total_prb_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_prb_ul)
  return total_prb_ul_;
}
void flex_mac_stats::set_total_prb_ul(::google::protobuf::uint32 value) {
  set_has_total_prb_ul();
  total_prb_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_prb_ul)
}

// optional uint32 total_pdu_dl = 17;
bool flex_mac_stats::has_total_pdu_dl() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void flex_mac_stats::set_has_total_pdu_dl() {
  _has_bits_[0] |= 0x00010000u;
}
void flex_mac_stats::clear_has_total_pdu_dl() {
  _has_bits_[0] &= ~0x00010000u;
}
void flex_mac_stats::clear_total_pdu_dl() {
  total_pdu_dl_ = 0u;
  clear_has_total_pdu_dl();
}
::google::protobuf::uint32 flex_mac_stats::total_pdu_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_pdu_dl)
  return total_pdu_dl_;
}
void flex_mac_stats::set_total_pdu_dl(::google::protobuf::uint32 value) {
  set_has_total_pdu_dl();
  total_pdu_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_pdu_dl)
}

// optional uint32 total_pdu_ul = 18;
bool flex_mac_stats::has_total_pdu_ul() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void flex_mac_stats::set_has_total_pdu_ul() {
  _has_bits_[0] |= 0x00020000u;
}
void flex_mac_stats::clear_has_total_pdu_ul() {
  _has_bits_[0] &= ~0x00020000u;
}
void flex_mac_stats::clear_total_pdu_ul() {
  total_pdu_ul_ = 0u;
  clear_has_total_pdu_ul();
}
::google::protobuf::uint32 flex_mac_stats::total_pdu_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_pdu_ul)
  return total_pdu_ul_;
}
void flex_mac_stats::set_total_pdu_ul(::google::protobuf::uint32 value) {
  set_has_total_pdu_ul();
  total_pdu_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_pdu_ul)
}

// optional uint32 total_tbs_dl = 19;
bool flex_mac_stats::has_total_tbs_dl() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void flex_mac_stats::set_has_total_tbs_dl() {
  _has_bits_[0] |= 0x00040000u;
}
void flex_mac_stats::clear_has_total_tbs_dl() {
  _has_bits_[0] &= ~0x00040000u;
}
void flex_mac_stats::clear_total_tbs_dl() {
  total_tbs_dl_ = 0u;
  clear_has_total_tbs_dl();
}
::google::protobuf::uint32 flex_mac_stats::total_tbs_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_tbs_dl)
  return total_tbs_dl_;
}
void flex_mac_stats::set_total_tbs_dl(::google::protobuf::uint32 value) {
  set_has_total_tbs_dl();
  total_tbs_dl_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_tbs_dl)
}

// optional uint32 total_tbs_ul = 20;
bool flex_mac_stats::has_total_tbs_ul() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void flex_mac_stats::set_has_total_tbs_ul() {
  _has_bits_[0] |= 0x00080000u;
}
void flex_mac_stats::clear_has_total_tbs_ul() {
  _has_bits_[0] &= ~0x00080000u;
}
void flex_mac_stats::clear_total_tbs_ul() {
  total_tbs_ul_ = 0u;
  clear_has_total_tbs_ul();
}
::google::protobuf::uint32 flex_mac_stats::total_tbs_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.total_tbs_ul)
  return total_tbs_ul_;
}
void flex_mac_stats::set_total_tbs_ul(::google::protobuf::uint32 value) {
  set_has_total_tbs_ul();
  total_tbs_ul_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.total_tbs_ul)
}

// repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
int flex_mac_stats::mac_sdus_dl_size() const {
  return mac_sdus_dl_.size();
}
void flex_mac_stats::clear_mac_sdus_dl() {
  mac_sdus_dl_.Clear();
}
const ::protocol::flex_mac_sdus_dl& flex_mac_stats::mac_sdus_dl(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.mac_sdus_dl)
  return mac_sdus_dl_.Get(index);
}
::protocol::flex_mac_sdus_dl* flex_mac_stats::mutable_mac_sdus_dl(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_mac_stats.mac_sdus_dl)
  return mac_sdus_dl_.Mutable(index);
}
::protocol::flex_mac_sdus_dl* flex_mac_stats::add_mac_sdus_dl() {
  // @@protoc_insertion_point(field_add:protocol.flex_mac_stats.mac_sdus_dl)
  return mac_sdus_dl_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::flex_mac_sdus_dl >*
flex_mac_stats::mutable_mac_sdus_dl() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_mac_stats.mac_sdus_dl)
  return &mac_sdus_dl_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::flex_mac_sdus_dl >&
flex_mac_stats::mac_sdus_dl() const {
  // @@protoc_insertion_point(field_list:protocol.flex_mac_stats.mac_sdus_dl)
  return mac_sdus_dl_;
}

// optional uint32 harq_round = 22;
bool flex_mac_stats::has_harq_round() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void flex_mac_stats::set_has_harq_round() {
  _has_bits_[0] |= 0x00100000u;
}
void flex_mac_stats::clear_has_harq_round() {
  _has_bits_[0] &= ~0x00100000u;
}
void flex_mac_stats::clear_harq_round() {
  harq_round_ = 0u;
  clear_has_harq_round();
}
::google::protobuf::uint32 flex_mac_stats::harq_round() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_stats.harq_round)
  return harq_round_;
}
void flex_mac_stats::set_harq_round(::google::protobuf::uint32 value) {
  set_has_harq_round();
  harq_round_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_stats.harq_round)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_mac_sdus_dl::kSduLengthFieldNumber;
const int flex_mac_sdus_dl::kLcidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_mac_sdus_dl::flex_mac_sdus_dl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_mac_sdus_dl)
}
flex_mac_sdus_dl::flex_mac_sdus_dl(const flex_mac_sdus_dl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sdu_length_, &from.sdu_length_,
    reinterpret_cast<char*>(&lcid_) -
    reinterpret_cast<char*>(&sdu_length_) + sizeof(lcid_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_mac_sdus_dl)
}

void flex_mac_sdus_dl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sdu_length_, 0, reinterpret_cast<char*>(&lcid_) -
    reinterpret_cast<char*>(&sdu_length_) + sizeof(lcid_));
}

flex_mac_sdus_dl::~flex_mac_sdus_dl() {
  // @@protoc_insertion_point(destructor:protocol.flex_mac_sdus_dl)
  SharedDtor();
}

void flex_mac_sdus_dl::SharedDtor() {
}

void flex_mac_sdus_dl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_mac_sdus_dl::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_mac_sdus_dl& flex_mac_sdus_dl::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_mac_sdus_dl* flex_mac_sdus_dl::New(::google::protobuf::Arena* arena) const {
  flex_mac_sdus_dl* n = new flex_mac_sdus_dl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_mac_sdus_dl::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_mac_sdus_dl)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&sdu_length_, 0, reinterpret_cast<char*>(&lcid_) -
      reinterpret_cast<char*>(&sdu_length_) + sizeof(lcid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_mac_sdus_dl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_mac_sdus_dl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sdu_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sdu_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdu_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lcid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_mac_sdus_dl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_mac_sdus_dl)
  return false;
#undef DO_
}

void flex_mac_sdus_dl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_mac_sdus_dl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdu_length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sdu_length(), output);
  }

  // optional uint32 lcid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lcid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_mac_sdus_dl)
}

::google::protobuf::uint8* flex_mac_sdus_dl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_mac_sdus_dl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdu_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sdu_length(), target);
  }

  // optional uint32 lcid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lcid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_mac_sdus_dl)
  return target;
}

size_t flex_mac_sdus_dl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_mac_sdus_dl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 sdu_length = 1;
    if (has_sdu_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdu_length());
    }

    // optional uint32 lcid = 2;
    if (has_lcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lcid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_mac_sdus_dl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_mac_sdus_dl)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_mac_sdus_dl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_mac_sdus_dl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_mac_sdus_dl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_mac_sdus_dl)
    MergeFrom(*source);
  }
}

void flex_mac_sdus_dl::MergeFrom(const flex_mac_sdus_dl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_mac_sdus_dl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sdu_length_ = from.sdu_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      lcid_ = from.lcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_mac_sdus_dl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_mac_sdus_dl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_mac_sdus_dl::CopyFrom(const flex_mac_sdus_dl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_mac_sdus_dl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_mac_sdus_dl::IsInitialized() const {
  return true;
}

void flex_mac_sdus_dl::Swap(flex_mac_sdus_dl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_mac_sdus_dl::InternalSwap(flex_mac_sdus_dl* other) {
  std::swap(sdu_length_, other->sdu_length_);
  std::swap(lcid_, other->lcid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_mac_sdus_dl::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_mac_sdus_dl

// optional uint32 sdu_length = 1;
bool flex_mac_sdus_dl::has_sdu_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_mac_sdus_dl::set_has_sdu_length() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_mac_sdus_dl::clear_has_sdu_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_mac_sdus_dl::clear_sdu_length() {
  sdu_length_ = 0u;
  clear_has_sdu_length();
}
::google::protobuf::uint32 flex_mac_sdus_dl::sdu_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_sdus_dl.sdu_length)
  return sdu_length_;
}
void flex_mac_sdus_dl::set_sdu_length(::google::protobuf::uint32 value) {
  set_has_sdu_length();
  sdu_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_sdus_dl.sdu_length)
}

// optional uint32 lcid = 2;
bool flex_mac_sdus_dl::has_lcid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_mac_sdus_dl::set_has_lcid() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_mac_sdus_dl::clear_has_lcid() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_mac_sdus_dl::clear_lcid() {
  lcid_ = 0u;
  clear_has_lcid();
}
::google::protobuf::uint32 flex_mac_sdus_dl::lcid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_mac_sdus_dl.lcid)
  return lcid_;
}
void flex_mac_sdus_dl::set_lcid(::google::protobuf::uint32 value) {
  set_has_lcid();
  lcid_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_mac_sdus_dl.lcid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_gtp_stats::kERabIdFieldNumber;
const int flex_gtp_stats::kTeidEnbFieldNumber;
const int flex_gtp_stats::kAddrEnbFieldNumber;
const int flex_gtp_stats::kTeidSgwFieldNumber;
const int flex_gtp_stats::kAddrSgwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_gtp_stats::flex_gtp_stats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_gtp_stats)
}
flex_gtp_stats::flex_gtp_stats(const flex_gtp_stats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_enb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr_enb()) {
    addr_enb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_enb_);
  }
  addr_sgw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr_sgw()) {
    addr_sgw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_sgw_);
  }
  ::memcpy(&e_rab_id_, &from.e_rab_id_,
    reinterpret_cast<char*>(&teid_sgw_) -
    reinterpret_cast<char*>(&e_rab_id_) + sizeof(teid_sgw_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_gtp_stats)
}

void flex_gtp_stats::SharedCtor() {
  _cached_size_ = 0;
  addr_enb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_sgw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&e_rab_id_, 0, reinterpret_cast<char*>(&teid_sgw_) -
    reinterpret_cast<char*>(&e_rab_id_) + sizeof(teid_sgw_));
}

flex_gtp_stats::~flex_gtp_stats() {
  // @@protoc_insertion_point(destructor:protocol.flex_gtp_stats)
  SharedDtor();
}

void flex_gtp_stats::SharedDtor() {
  addr_enb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_sgw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void flex_gtp_stats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_gtp_stats::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_gtp_stats& flex_gtp_stats::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_gtp_stats* flex_gtp_stats::New(::google::protobuf::Arena* arena) const {
  flex_gtp_stats* n = new flex_gtp_stats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_gtp_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_gtp_stats)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_addr_enb()) {
      GOOGLE_DCHECK(!addr_enb_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*addr_enb_.UnsafeRawStringPointer())->clear();
    }
    if (has_addr_sgw()) {
      GOOGLE_DCHECK(!addr_sgw_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*addr_sgw_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&e_rab_id_, 0, reinterpret_cast<char*>(&teid_sgw_) -
      reinterpret_cast<char*>(&e_rab_id_) + sizeof(teid_sgw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_gtp_stats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_gtp_stats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 e_rab_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_e_rab_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e_rab_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teid_enb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_teid_enb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teid_enb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string addr_enb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr_enb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr_enb().data(), this->addr_enb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_gtp_stats.addr_enb");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teid_sgw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_teid_sgw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teid_sgw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string addr_sgw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr_sgw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr_sgw().data(), this->addr_sgw().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_gtp_stats.addr_sgw");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_gtp_stats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_gtp_stats)
  return false;
#undef DO_
}

void flex_gtp_stats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_gtp_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 e_rab_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->e_rab_id(), output);
  }

  // optional uint32 teid_enb = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teid_enb(), output);
  }

  // optional string addr_enb = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr_enb().data(), this->addr_enb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_gtp_stats.addr_enb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->addr_enb(), output);
  }

  // optional uint32 teid_sgw = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teid_sgw(), output);
  }

  // optional string addr_sgw = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr_sgw().data(), this->addr_sgw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_gtp_stats.addr_sgw");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->addr_sgw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_gtp_stats)
}

::google::protobuf::uint8* flex_gtp_stats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_gtp_stats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 e_rab_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->e_rab_id(), target);
  }

  // optional uint32 teid_enb = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teid_enb(), target);
  }

  // optional string addr_enb = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr_enb().data(), this->addr_enb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_gtp_stats.addr_enb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr_enb(), target);
  }

  // optional uint32 teid_sgw = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teid_sgw(), target);
  }

  // optional string addr_sgw = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr_sgw().data(), this->addr_sgw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_gtp_stats.addr_sgw");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->addr_sgw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_gtp_stats)
  return target;
}

size_t flex_gtp_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_gtp_stats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string addr_enb = 3;
    if (has_addr_enb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr_enb());
    }

    // optional string addr_sgw = 5;
    if (has_addr_sgw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr_sgw());
    }

    // optional uint32 e_rab_id = 1;
    if (has_e_rab_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e_rab_id());
    }

    // optional uint32 teid_enb = 2;
    if (has_teid_enb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teid_enb());
    }

    // optional uint32 teid_sgw = 4;
    if (has_teid_sgw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teid_sgw());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_gtp_stats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_gtp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_gtp_stats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_gtp_stats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_gtp_stats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_gtp_stats)
    MergeFrom(*source);
  }
}

void flex_gtp_stats::MergeFrom(const flex_gtp_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_gtp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr_enb();
      addr_enb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_enb_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_addr_sgw();
      addr_sgw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_sgw_);
    }
    if (cached_has_bits & 0x00000004u) {
      e_rab_id_ = from.e_rab_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      teid_enb_ = from.teid_enb_;
    }
    if (cached_has_bits & 0x00000010u) {
      teid_sgw_ = from.teid_sgw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_gtp_stats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_gtp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_gtp_stats::CopyFrom(const flex_gtp_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_gtp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_gtp_stats::IsInitialized() const {
  return true;
}

void flex_gtp_stats::Swap(flex_gtp_stats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_gtp_stats::InternalSwap(flex_gtp_stats* other) {
  addr_enb_.Swap(&other->addr_enb_);
  addr_sgw_.Swap(&other->addr_sgw_);
  std::swap(e_rab_id_, other->e_rab_id_);
  std::swap(teid_enb_, other->teid_enb_);
  std::swap(teid_sgw_, other->teid_sgw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_gtp_stats::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_gtp_stats

// optional uint32 e_rab_id = 1;
bool flex_gtp_stats::has_e_rab_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_gtp_stats::set_has_e_rab_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_gtp_stats::clear_has_e_rab_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_gtp_stats::clear_e_rab_id() {
  e_rab_id_ = 0u;
  clear_has_e_rab_id();
}
::google::protobuf::uint32 flex_gtp_stats::e_rab_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gtp_stats.e_rab_id)
  return e_rab_id_;
}
void flex_gtp_stats::set_e_rab_id(::google::protobuf::uint32 value) {
  set_has_e_rab_id();
  e_rab_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_gtp_stats.e_rab_id)
}

// optional uint32 teid_enb = 2;
bool flex_gtp_stats::has_teid_enb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_gtp_stats::set_has_teid_enb() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_gtp_stats::clear_has_teid_enb() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_gtp_stats::clear_teid_enb() {
  teid_enb_ = 0u;
  clear_has_teid_enb();
}
::google::protobuf::uint32 flex_gtp_stats::teid_enb() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gtp_stats.teid_enb)
  return teid_enb_;
}
void flex_gtp_stats::set_teid_enb(::google::protobuf::uint32 value) {
  set_has_teid_enb();
  teid_enb_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_gtp_stats.teid_enb)
}

// optional string addr_enb = 3;
bool flex_gtp_stats::has_addr_enb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_gtp_stats::set_has_addr_enb() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_gtp_stats::clear_has_addr_enb() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_gtp_stats::clear_addr_enb() {
  addr_enb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr_enb();
}
const ::std::string& flex_gtp_stats::addr_enb() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gtp_stats.addr_enb)
  return addr_enb_.GetNoArena();
}
void flex_gtp_stats::set_addr_enb(const ::std::string& value) {
  set_has_addr_enb();
  addr_enb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_gtp_stats.addr_enb)
}
#if LANG_CXX11
void flex_gtp_stats::set_addr_enb(::std::string&& value) {
  set_has_addr_enb();
  addr_enb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_gtp_stats.addr_enb)
}
#endif
void flex_gtp_stats::set_addr_enb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addr_enb();
  addr_enb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_gtp_stats.addr_enb)
}
void flex_gtp_stats::set_addr_enb(const char* value, size_t size) {
  set_has_addr_enb();
  addr_enb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_gtp_stats.addr_enb)
}
::std::string* flex_gtp_stats::mutable_addr_enb() {
  set_has_addr_enb();
  // @@protoc_insertion_point(field_mutable:protocol.flex_gtp_stats.addr_enb)
  return addr_enb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_gtp_stats::release_addr_enb() {
  // @@protoc_insertion_point(field_release:protocol.flex_gtp_stats.addr_enb)
  clear_has_addr_enb();
  return addr_enb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_gtp_stats::set_allocated_addr_enb(::std::string* addr_enb) {
  if (addr_enb != NULL) {
    set_has_addr_enb();
  } else {
    clear_has_addr_enb();
  }
  addr_enb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr_enb);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_gtp_stats.addr_enb)
}

// optional uint32 teid_sgw = 4;
bool flex_gtp_stats::has_teid_sgw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void flex_gtp_stats::set_has_teid_sgw() {
  _has_bits_[0] |= 0x00000010u;
}
void flex_gtp_stats::clear_has_teid_sgw() {
  _has_bits_[0] &= ~0x00000010u;
}
void flex_gtp_stats::clear_teid_sgw() {
  teid_sgw_ = 0u;
  clear_has_teid_sgw();
}
::google::protobuf::uint32 flex_gtp_stats::teid_sgw() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gtp_stats.teid_sgw)
  return teid_sgw_;
}
void flex_gtp_stats::set_teid_sgw(::google::protobuf::uint32 value) {
  set_has_teid_sgw();
  teid_sgw_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_gtp_stats.teid_sgw)
}

// optional string addr_sgw = 5;
bool flex_gtp_stats::has_addr_sgw() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_gtp_stats::set_has_addr_sgw() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_gtp_stats::clear_has_addr_sgw() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_gtp_stats::clear_addr_sgw() {
  addr_sgw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr_sgw();
}
const ::std::string& flex_gtp_stats::addr_sgw() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gtp_stats.addr_sgw)
  return addr_sgw_.GetNoArena();
}
void flex_gtp_stats::set_addr_sgw(const ::std::string& value) {
  set_has_addr_sgw();
  addr_sgw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_gtp_stats.addr_sgw)
}
#if LANG_CXX11
void flex_gtp_stats::set_addr_sgw(::std::string&& value) {
  set_has_addr_sgw();
  addr_sgw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_gtp_stats.addr_sgw)
}
#endif
void flex_gtp_stats::set_addr_sgw(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addr_sgw();
  addr_sgw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_gtp_stats.addr_sgw)
}
void flex_gtp_stats::set_addr_sgw(const char* value, size_t size) {
  set_has_addr_sgw();
  addr_sgw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_gtp_stats.addr_sgw)
}
::std::string* flex_gtp_stats::mutable_addr_sgw() {
  set_has_addr_sgw();
  // @@protoc_insertion_point(field_mutable:protocol.flex_gtp_stats.addr_sgw)
  return addr_sgw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_gtp_stats::release_addr_sgw() {
  // @@protoc_insertion_point(field_release:protocol.flex_gtp_stats.addr_sgw)
  clear_has_addr_sgw();
  return addr_sgw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_gtp_stats::set_allocated_addr_sgw(::std::string* addr_sgw) {
  if (addr_sgw != NULL) {
    set_has_addr_sgw();
  } else {
    clear_has_addr_sgw();
  }
  addr_sgw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr_sgw);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_gtp_stats.addr_sgw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_s1ap_ue::kMmeS1IpFieldNumber;
const int flex_s1ap_ue::kEnbUeS1ApIdFieldNumber;
const int flex_s1ap_ue::kMmeUeS1ApIdFieldNumber;
const int flex_s1ap_ue::kSelectedPlmnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

flex_s1ap_ue::flex_s1ap_ue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_stats_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.flex_s1ap_ue)
}
flex_s1ap_ue::flex_s1ap_ue(const flex_s1ap_ue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mme_s1_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mme_s1_ip()) {
    mme_s1_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mme_s1_ip_);
  }
  if (from.has_selected_plmn()) {
    selected_plmn_ = new ::protocol::flex_plmn(*from.selected_plmn_);
  } else {
    selected_plmn_ = NULL;
  }
  ::memcpy(&enb_ue_s1ap_id_, &from.enb_ue_s1ap_id_,
    reinterpret_cast<char*>(&mme_ue_s1ap_id_) -
    reinterpret_cast<char*>(&enb_ue_s1ap_id_) + sizeof(mme_ue_s1ap_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_s1ap_ue)
}

void flex_s1ap_ue::SharedCtor() {
  _cached_size_ = 0;
  mme_s1_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&selected_plmn_, 0, reinterpret_cast<char*>(&mme_ue_s1ap_id_) -
    reinterpret_cast<char*>(&selected_plmn_) + sizeof(mme_ue_s1ap_id_));
}

flex_s1ap_ue::~flex_s1ap_ue() {
  // @@protoc_insertion_point(destructor:protocol.flex_s1ap_ue)
  SharedDtor();
}

void flex_s1ap_ue::SharedDtor() {
  mme_s1_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete selected_plmn_;
  }
}

void flex_s1ap_ue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flex_s1ap_ue::descriptor() {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const flex_s1ap_ue& flex_s1ap_ue::default_instance() {
  protobuf_stats_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

flex_s1ap_ue* flex_s1ap_ue::New(::google::protobuf::Arena* arena) const {
  flex_s1ap_ue* n = new flex_s1ap_ue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void flex_s1ap_ue::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_s1ap_ue)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_mme_s1_ip()) {
      GOOGLE_DCHECK(!mme_s1_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mme_s1_ip_.UnsafeRawStringPointer())->clear();
    }
    if (has_selected_plmn()) {
      GOOGLE_DCHECK(selected_plmn_ != NULL);
      selected_plmn_->::protocol::flex_plmn::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&enb_ue_s1ap_id_, 0, reinterpret_cast<char*>(&mme_ue_s1ap_id_) -
      reinterpret_cast<char*>(&enb_ue_s1ap_id_) + sizeof(mme_ue_s1ap_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool flex_s1ap_ue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.flex_s1ap_ue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mme_s1_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mme_s1_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mme_s1_ip().data(), this->mme_s1_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protocol.flex_s1ap_ue.mme_s1_ip");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enb_ue_s1ap_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_enb_ue_s1ap_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enb_ue_s1ap_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mme_ue_s1ap_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_mme_ue_s1ap_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mme_ue_s1ap_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protocol.flex_plmn selected_plmn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected_plmn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.flex_s1ap_ue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.flex_s1ap_ue)
  return false;
#undef DO_
}

void flex_s1ap_ue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.flex_s1ap_ue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mme_s1_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mme_s1_ip().data(), this->mme_s1_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_ue.mme_s1_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mme_s1_ip(), output);
  }

  // optional uint32 enb_ue_s1ap_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enb_ue_s1ap_id(), output);
  }

  // optional uint32 mme_ue_s1ap_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mme_ue_s1ap_id(), output);
  }

  // optional .protocol.flex_plmn selected_plmn = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->selected_plmn_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.flex_s1ap_ue)
}

::google::protobuf::uint8* flex_s1ap_ue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_s1ap_ue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mme_s1_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mme_s1_ip().data(), this->mme_s1_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_ue.mme_s1_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mme_s1_ip(), target);
  }

  // optional uint32 enb_ue_s1ap_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enb_ue_s1ap_id(), target);
  }

  // optional uint32 mme_ue_s1ap_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mme_ue_s1ap_id(), target);
  }

  // optional .protocol.flex_plmn selected_plmn = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->selected_plmn_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_s1ap_ue)
  return target;
}

size_t flex_s1ap_ue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_s1ap_ue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string mme_s1_ip = 1;
    if (has_mme_s1_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mme_s1_ip());
    }

    // optional .protocol.flex_plmn selected_plmn = 4;
    if (has_selected_plmn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->selected_plmn_);
    }

    // optional uint32 enb_ue_s1ap_id = 2;
    if (has_enb_ue_s1ap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enb_ue_s1ap_id());
    }

    // optional uint32 mme_ue_s1ap_id = 3;
    if (has_mme_ue_s1ap_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mme_ue_s1ap_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flex_s1ap_ue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_s1ap_ue)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_s1ap_ue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const flex_s1ap_ue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_s1ap_ue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_s1ap_ue)
    MergeFrom(*source);
  }
}

void flex_s1ap_ue::MergeFrom(const flex_s1ap_ue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_s1ap_ue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mme_s1_ip();
      mme_s1_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mme_s1_ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_selected_plmn()->::protocol::flex_plmn::MergeFrom(from.selected_plmn());
    }
    if (cached_has_bits & 0x00000004u) {
      enb_ue_s1ap_id_ = from.enb_ue_s1ap_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      mme_ue_s1ap_id_ = from.mme_ue_s1ap_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_s1ap_ue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_s1ap_ue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_s1ap_ue::CopyFrom(const flex_s1ap_ue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_s1ap_ue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_s1ap_ue::IsInitialized() const {
  return true;
}

void flex_s1ap_ue::Swap(flex_s1ap_ue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void flex_s1ap_ue::InternalSwap(flex_s1ap_ue* other) {
  mme_s1_ip_.Swap(&other->mme_s1_ip_);
  std::swap(selected_plmn_, other->selected_plmn_);
  std::swap(enb_ue_s1ap_id_, other->enb_ue_s1ap_id_);
  std::swap(mme_ue_s1ap_id_, other->mme_ue_s1ap_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata flex_s1ap_ue::GetMetadata() const {
  protobuf_stats_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_stats_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// flex_s1ap_ue

// optional string mme_s1_ip = 1;
bool flex_s1ap_ue::has_mme_s1_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void flex_s1ap_ue::set_has_mme_s1_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void flex_s1ap_ue::clear_has_mme_s1_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void flex_s1ap_ue::clear_mme_s1_ip() {
  mme_s1_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mme_s1_ip();
}
const ::std::string& flex_s1ap_ue::mme_s1_ip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_ue.mme_s1_ip)
  return mme_s1_ip_.GetNoArena();
}
void flex_s1ap_ue::set_mme_s1_ip(const ::std::string& value) {
  set_has_mme_s1_ip();
  mme_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_ue.mme_s1_ip)
}
#if LANG_CXX11
void flex_s1ap_ue::set_mme_s1_ip(::std::string&& value) {
  set_has_mme_s1_ip();
  mme_s1_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_ue.mme_s1_ip)
}
#endif
void flex_s1ap_ue::set_mme_s1_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mme_s1_ip();
  mme_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_ue.mme_s1_ip)
}
void flex_s1ap_ue::set_mme_s1_ip(const char* value, size_t size) {
  set_has_mme_s1_ip();
  mme_s1_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_ue.mme_s1_ip)
}
::std::string* flex_s1ap_ue::mutable_mme_s1_ip() {
  set_has_mme_s1_ip();
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_ue.mme_s1_ip)
  return mme_s1_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* flex_s1ap_ue::release_mme_s1_ip() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_ue.mme_s1_ip)
  clear_has_mme_s1_ip();
  return mme_s1_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void flex_s1ap_ue::set_allocated_mme_s1_ip(::std::string* mme_s1_ip) {
  if (mme_s1_ip != NULL) {
    set_has_mme_s1_ip();
  } else {
    clear_has_mme_s1_ip();
  }
  mme_s1_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mme_s1_ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_ue.mme_s1_ip)
}

// optional uint32 enb_ue_s1ap_id = 2;
bool flex_s1ap_ue::has_enb_ue_s1ap_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void flex_s1ap_ue::set_has_enb_ue_s1ap_id() {
  _has_bits_[0] |= 0x00000004u;
}
void flex_s1ap_ue::clear_has_enb_ue_s1ap_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void flex_s1ap_ue::clear_enb_ue_s1ap_id() {
  enb_ue_s1ap_id_ = 0u;
  clear_has_enb_ue_s1ap_id();
}
::google::protobuf::uint32 flex_s1ap_ue::enb_ue_s1ap_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_ue.enb_ue_s1ap_id)
  return enb_ue_s1ap_id_;
}
void flex_s1ap_ue::set_enb_ue_s1ap_id(::google::protobuf::uint32 value) {
  set_has_enb_ue_s1ap_id();
  enb_ue_s1ap_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_ue.enb_ue_s1ap_id)
}

// optional uint32 mme_ue_s1ap_id = 3;
bool flex_s1ap_ue::has_mme_ue_s1ap_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void flex_s1ap_ue::set_has_mme_ue_s1ap_id() {
  _has_bits_[0] |= 0x00000008u;
}
void flex_s1ap_ue::clear_has_mme_ue_s1ap_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void flex_s1ap_ue::clear_mme_ue_s1ap_id() {
  mme_ue_s1ap_id_ = 0u;
  clear_has_mme_ue_s1ap_id();
}
::google::protobuf::uint32 flex_s1ap_ue::mme_ue_s1ap_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_ue.mme_ue_s1ap_id)
  return mme_ue_s1ap_id_;
}
void flex_s1ap_ue::set_mme_ue_s1ap_id(::google::protobuf::uint32 value) {
  set_has_mme_ue_s1ap_id();
  mme_ue_s1ap_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_ue.mme_ue_s1ap_id)
}

// optional .protocol.flex_plmn selected_plmn = 4;
bool flex_s1ap_ue::has_selected_plmn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void flex_s1ap_ue::set_has_selected_plmn() {
  _has_bits_[0] |= 0x00000002u;
}
void flex_s1ap_ue::clear_has_selected_plmn() {
  _has_bits_[0] &= ~0x00000002u;
}
void flex_s1ap_ue::clear_selected_plmn() {
  if (selected_plmn_ != NULL) selected_plmn_->::protocol::flex_plmn::Clear();
  clear_has_selected_plmn();
}
const ::protocol::flex_plmn& flex_s1ap_ue::selected_plmn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_ue.selected_plmn)
  return selected_plmn_ != NULL ? *selected_plmn_
                         : *::protocol::flex_plmn::internal_default_instance();
}
::protocol::flex_plmn* flex_s1ap_ue::mutable_selected_plmn() {
  set_has_selected_plmn();
  if (selected_plmn_ == NULL) {
    selected_plmn_ = new ::protocol::flex_plmn;
  }
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_ue.selected_plmn)
  return selected_plmn_;
}
::protocol::flex_plmn* flex_s1ap_ue::release_selected_plmn() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_ue.selected_plmn)
  clear_has_selected_plmn();
  ::protocol::flex_plmn* temp = selected_plmn_;
  selected_plmn_ = NULL;
  return temp;
}
void flex_s1ap_ue::set_allocated_selected_plmn(::protocol::flex_plmn* selected_plmn) {
  delete selected_plmn_;
  selected_plmn_ = selected_plmn;
  if (selected_plmn) {
    set_has_selected_plmn();
  } else {
    clear_has_selected_plmn();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_ue.selected_plmn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
